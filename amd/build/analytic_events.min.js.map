{"version":3,"file":"analytic_events.min.js","sources":["../src/analytic_events.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module for handling analytics events in the Tiny Cursive plugin.\n * Provides functionality for displaying analytics data, replaying writing,\n * checking differences and showing quality metrics.\n *\n * @module     tiny_cursive/analytic_events\n * @copyright  2024 CTI <info@cursivetechnology.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport myModal from \"./analytic_modal\";\nimport {call as getContent} from \"core/ajax\";\nimport $ from 'jquery';\nimport {get_string as getString} from 'core/str';\nimport {get_strings as getStrings} from 'core/str';\nimport Chart from 'core/chartjs';\n\nexport default class AnalyticEvents {\n\n    createModal(userid, context, questionid = '', authIcon) {\n        $('#analytics' + userid + questionid).on('click', function(e) {\n            e.preventDefault();\n\n            // Create Moodle modal\n            myModal.create({templateContext: context}).then(modal => {\n                $('#content' + userid + ' .tiny_cursive_table  tbody tr:first-child td:nth-child(2)').html(authIcon);\n                modal.show();\n                return true;\n            }).catch(error => {\n                window.console.error(\"Failed to create modal:\", error);\n            });\n        });\n    }\n\n    analytics(userid, templates, context, questionid = '', replayInstances = null, authIcon) {\n        $('body').on('click', '#analytic' + userid + questionid, function(e) {\n            $('#rep' + userid + questionid).prop('disabled', false);\n            $('#quality' + userid + questionid).prop('disabled', false);\n            e.preventDefault();\n            $('#content' + userid).html($('<div>').addClass('d-flex justify-content-center my-5')\n                .append($('<div>').addClass('tiny_cursive-loader')));\n            if (replayInstances && replayInstances[userid]) {\n                replayInstances[userid].stopReplay();\n            }\n            $('.tiny_cursive-nav-tab').find('.active').removeClass('active');\n            $(this).addClass('active'); // Add 'active' class to the clicked element\n\n            templates.render('tiny_cursive/analytics_table', context).then(function(html) {\n                $('#content' + userid).html(html);\n                $('#content' + userid + ' .tiny_cursive_table  tbody tr:first-child td:nth-child(2)').html(authIcon);\n                return true;\n            }).fail(function(error) {\n                window.console.error(\"Failed to render template:\", error);\n            });\n        });\n    }\n\n    checkDiff(userid, fileid, questionid = '', replayInstances = null) {\n        const nodata = document.createElement('p');\n        nodata.classList.add('tiny_cursive_nopayload', 'bg-light');\n        getString('nopaylod', 'tiny_cursive').then(str => {\n            nodata.textContent = str;\n            return true;\n        }).catch(error => window.console.log(error));\n        $('body').on('click', '#diff' + userid + questionid, function(e) {\n            $('#rep' + userid + questionid).prop('disabled', false);\n            $('#quality' + userid + questionid).prop('disabled', false);\n            e.preventDefault();\n            $('#content' + userid).html($('<div>').addClass('d-flex justify-content-center my-5')\n                .append($('<div>').addClass('tiny_cursive-loader')));\n            $('.tiny_cursive-nav-tab').find('.active').removeClass('active');\n            $(this).addClass('active');\n            if (replayInstances && replayInstances[userid]) {\n                replayInstances[userid].stopReplay();\n            }\n            if (!fileid) {\n                $('#content' + userid).html(nodata);\n                throw new Error('Missing file id or Difference Content not received yet');\n            }\n            getContent([{\n                methodname: 'cursive_get_writing_differences',\n                args: {fileid: fileid},\n            }])[0].done(response => {\n                let responsedata = JSON.parse(response.data);\n                if (responsedata) {\n                    let submittedText = atob(responsedata.submitted_text);\n\n                    // Fetch the dynamic strings.\n                    getStrings([\n                        {key: 'original_text', component: 'tiny_cursive'},\n                        {key: 'editspastesai', component: 'tiny_cursive'}\n                    ]).done(strings => {\n                        const originalTextString = strings[0];\n                        const editsPastesAIString = strings[1];\n\n                        const commentBox = $('<div class=\"p-2 border rounded mb-2\">');\n                        var pasteCountDiv = $('<div></div>');\n                        getString('pastecount', 'tiny_cursive').then(str => {\n                            pasteCountDiv.append('<div><strong>' + str + ' :</strong> ' + responsedata.commentscount + '</div>');\n                            return true;\n                        }).catch(error => window.console.log(error));\n\n                        var commentsDiv = $('<div class=\"border-bottom\"></div>');\n                        getString('comments', 'tiny_cursive').then(str => {\n                            commentsDiv.append('<strong>' + str + '</strong>');\n                            return true;\n                        }).catch(error => window.console.error(error));\n\n                        var commentsList = $('<div></div>');\n\n                        let comments = responsedata.comments;\n                        for (let index in comments) {\n                            var commentDiv = $('<div class=\"shadow-sm p-1 my-1\"></div>').text(comments[index].usercomment);\n                            commentsList.append(commentDiv);\n                        }\n                        commentBox.append(pasteCountDiv).append(commentsDiv).append(commentsList);\n\n                        const $legend = $('<div class=\"d-flex p-2 border rounded mb-2\">');\n\n                        // Create the first legend item\n                        const $attributedItem = $('<div>', {\"class\": \"tiny_cursive-legend-item\"});\n                        const $attributedBox = $('<div>', {\"class\": \"tiny_cursive-box attributed\"});\n                        const $attributedText = $('<span>').text(originalTextString);\n                        $attributedItem.append($attributedBox).append($attributedText);\n\n                        // Create the second legend item\n                        const $unattributedItem = $('<div>', {\"class\": 'tiny_cursive-legend-item'});\n                        const $unattributedBox = $('<div>', {\"class\": 'tiny_cursive-box tiny_cursive_added'});\n                        const $unattributedText = $('<span>').text(editsPastesAIString);\n                        $unattributedItem.append($unattributedBox).append($unattributedText);\n\n                        // Append the legend items to the legend container.\n                        $legend.append($attributedItem).append($unattributedItem);\n\n                        let contents = $('<div>').addClass('tiny_cursive-comparison-content');\n                        let textBlock2 = $('<div>').addClass('tiny_cursive-text-block').append(\n                            $('<div>').attr('id', 'tiny_cursive-reconstructed_text').html(JSON.parse(submittedText))\n                        );\n\n                        contents.append(commentBox, $legend, textBlock2);\n                        $('#content' + userid).html(contents); // Update content.\n                    }).fail(error => {\n                        window.console.error(\"Failed to load language strings:\", error);\n                        $('#content' + userid).html(nodata);\n                    });\n                } else {\n                    $('#content' + userid).html(nodata);\n                }\n            }).fail(error => {\n                $('#content' + userid).html(nodata);\n                throw new Error('Error loading JSON file: ' + error.message);\n            });\n        });\n    }\n\n    replyWriting(userid, filepath, questionid = '', replayInstances = null) {\n        $('body').on('click', '#rep' + userid + questionid, function(e) {\n            $(this).prop('disabled', true);\n            $('#quality' + userid + questionid).prop('disabled', false);\n            e.preventDefault();\n            $('#content' + userid).html($('<div>').addClass('d-flex justify-content-center my-5')\n                .append($('<div>').addClass('tiny_cursive-loader')));\n            $('.tiny_cursive-nav-tab').find('.active').removeClass('active');\n            $(this).addClass('active'); // Add 'active' class to the clicked element\n            if (replayInstances && replayInstances[userid]) {\n                replayInstances[userid].stopReplay();\n            }\n            if (questionid) {\n                // eslint-disable-next-line\n                video_playback(userid, filepath, questionid);\n            } else {\n                // eslint-disable-next-line\n                video_playback(userid, filepath);\n            }\n        });\n    }\n\n    quality(userid, templates, context, questionid = '', replayInstances = null, cmid) {\n        let metricsData = '';\n        const nodata = document.createElement('p');\n        nodata.classList.add('text-center', 'p-5', 'bg-light', 'rounded', 'm-5', 'text-primary');\n        nodata.style.verticalAlign = 'middle';\n        nodata.style.textTransform = 'uppercase';\n        nodata.style.fontWeight = '500';\n        getString('nopaylod', 'tiny_cursive').then(str => {\n            nodata.textContent = str;\n            return true;\n        }).catch(error => window.console.error(error));\n\n        $('body').on('click', '#quality' + userid + questionid, function(e) {\n\n            $(this).prop('disabled', true);\n            $('#rep' + userid + questionid).prop('disabled', false);\n            e.preventDefault();\n            $('.tiny_cursive-nav-tab').find('.active').removeClass('active');\n            $(this).addClass('active'); // Add 'active' class to the clicked element\n\n            let res = getContent([{\n                methodname: 'cursive_get_quality_metrics',\n                args: {\"file_id\": context.tabledata.file_id ?? userid, cmid: cmid},\n            }]);\n\n            const content = document.getElementById('content' + userid);\n            if (content) {\n                content.innerHTML = '';\n                const loaderDiv = document.createElement('div');\n                loaderDiv.className = 'd-flex justify-content-center my-5';\n                const loader = document.createElement('div');\n                loader.className = 'tiny_cursive-loader';\n                loaderDiv.appendChild(loader);\n                content.appendChild(loaderDiv);\n            }\n\n            if (replayInstances && replayInstances[userid]) {\n                replayInstances[userid].stopReplay();\n            }\n\n            templates.render('tiny_cursive/quality_chart', context).then(function(html) {\n                const content = document.getElementById('content' + userid);\n\n                res[0].done(response => {\n                    if (response.status) {\n                        metricsData = response.data;\n                        let proUser = metricsData.quality_access;\n\n                        if (!proUser) {\n                            // eslint-disable-next-line promise/no-nesting\n                            templates.render('tiny_cursive/upgrade_to_pro', []).then(function(html) {\n                                $('#content' + userid).html(html);\n                                return true;\n                            }).fail(function(error) {\n                                window.console.error(error);\n                            });\n                        } else {\n\n                            if (content) {\n                                content.innerHTML = html;\n                            }\n                            if (!metricsData) {\n                                $('#content' + userid).html(nodata);\n                            }\n                            //  MetricsData.p_burst_cnt,'P-burst Count', metricsData.total_active_time, 'Total Active Time',\n                            var originalData = [\n                                metricsData.word_len_mean, metricsData.edits, metricsData.p_burst_mean,\n                                metricsData.q_count, metricsData.sentence_count,\n                                metricsData.verbosity, metricsData.word_count, metricsData.sent_word_count_mean\n                            ];\n\n                            // eslint-disable-next-line promise/no-nesting\n                            Promise.all([\n                                getString('word_len_mean', 'tiny_cursive'),\n                                getString('edits', 'tiny_cursive'),\n                                getString('p_burst_mean', 'tiny_cursive'),\n                                getString('q_count', 'tiny_cursive'),\n                                getString('sentence_count', 'tiny_cursive'),\n                                getString('verbosity', 'tiny_cursive'),\n                                getString('word_count', 'tiny_cursive'),\n                                getString('sent_word_count_mean', 'tiny_cursive'),\n                                getString('average', 'tiny_cursive'),\n                            ]).then(([wordLength, edits, pBurstMean, qCount, sentenceCount, verbosity, wordCount,\n                                sentWordCountMean, average]) => {\n                                let chartvas = document.querySelector('#chart' + userid);\n                                let levels = [wordLength, edits, pBurstMean, qCount, sentenceCount, verbosity, wordCount,\n                                    sentWordCountMean];\n\n                                const data = {\n                                    labels: [\n                                        levels\n                                    ],\n                                    datasets: [{\n                                        data: originalData.map(d => {\n                                            if (d > 100) {\n                                                return 100;\n                                            } else if (d < -100) {\n                                                return -100;\n                                            } else {\n                                                return d;\n                                            }\n                                        }),\n                                        backgroundColor: function(context) {\n                                            // Apply green or gray depending on value.\n                                            const value = context.raw;\n\n                                            if (value > 0 && value < 100) {\n                                                return '#43BB97';\n                                            } else if (value < 0) {\n                                                return '#AAAAAA';\n                                            } else {\n                                                return '#00432F'; // Green for positive, gray for negative.\n                                            }\n\n                                        },\n                                        barPercentage: 0.75,\n                                    }]\n                                };\n\n                                const drawPercentage = {\n                                    id: 'drawPercentage',\n                                    afterDraw: (chart) => {\n                                        const {ctx, data} = chart;\n                                        ctx.save();\n                                        let value;\n                                        chart.getDatasetMeta(0).data.forEach((dataPoint, index) => {\n                                            value = parseInt(data.datasets[0].data[index]);\n                                            if (!value) {\n                                                value = 0;\n                                            }\n                                            value = originalData[index];\n\n                                            ctx.font = \"bold 14px sans-serif\";\n\n                                            if (value > 50 && value <= 100) {\n                                                ctx.fillStyle = 'white';\n                                                ctx.textAlign = 'right';\n                                                ctx.fillText(value + '%', dataPoint.x - 5, dataPoint.y + 5);\n                                            } else if (value <= 10 && value > 0) {\n                                                ctx.fillStyle = '#43bb97';\n                                                ctx.textAlign = 'left';\n                                                if (value >= 1) {\n                                                    ctx.fillText('0' + value + '%', dataPoint.x + 5, dataPoint.y + 5);\n                                                } else {\n                                                    ctx.fillText(value + '%', dataPoint.x + 5, dataPoint.y + 5);\n                                                }\n                                                // eslint-disable-next-line no-empty\n                                            } else if (value == 0 || value == undefined) {\n                                            } else if (value > 100) {\n                                                ctx.fillStyle = 'white';\n                                                ctx.textAlign = 'right';\n                                                ctx.fillText(value + '%', dataPoint.x - 5, dataPoint.y + 5);\n                                            } else if (value < -50 && value >= -100) {\n                                                ctx.fillStyle = 'white';\n                                                ctx.textAlign = 'left';\n                                                ctx.fillText(value + '%', dataPoint.x + 5, dataPoint.y + 5);\n                                            } else if (value < -100) {\n                                                ctx.fillStyle = 'white';\n                                                ctx.textAlign = 'left';\n                                                ctx.fillText(value + '%', dataPoint.x + 5, dataPoint.y + 5);\n                                            } else if (value > -50 && value < 0) {\n                                                ctx.fillStyle = 'grey';\n                                                ctx.textAlign = 'right';\n                                                ctx.fillText(value + '%', dataPoint.x - 5, dataPoint.y + 5);\n                                            } else {\n                                                ctx.fillStyle = '#43bb97';\n                                                ctx.textAlign = 'left';\n                                                ctx.fillText(value + '%', dataPoint.x + 5, dataPoint.y + 5);\n                                            }\n\n                                        });\n                                    }\n                                };\n\n                                const chartAreaBg = {\n                                    id: 'chartAreaBg',\n                                    beforeDraw: (chart) => {\n                                        const {ctx, scales: {x, y}} = chart;\n                                        ctx.save();\n\n                                        const segmentPixel = y.getPixelForValue(y.ticks[0].value) -\n                                            y.getPixelForValue(y.ticks[1].value);\n                                        const doubleSegment = y.ticks[2].value - y.ticks[0].value;\n                                        let tickArray = [];\n\n                                        // Generate tick values.\n                                        for (let i = 0; i <= y.max; i += doubleSegment) {\n                                            if (i !== y.max) {\n                                                tickArray.push(i);\n                                            }\n                                        }\n\n                                        // Draw the background rectangles for each tick.\n                                        tickArray.forEach(tick => {\n                                            ctx.fillStyle = 'rgba(0, 0, 0, 0.02)';\n                                            ctx.fillRect(0, y.getPixelForValue(tick) + 80, x.width + x.width + 21, segmentPixel);\n                                        });\n                                    }\n                                };\n\n\n                                return new Chart(chartvas, {\n                                    type: 'bar',\n                                    data: data,\n                                    options: {\n                                        responsive: false,\n                                        maintainAspectRatio: false,\n                                        indexAxis: 'y',\n                                        elements: {\n                                            bar: {\n                                                borderRadius: 16,\n                                                borderWidth: 0,\n                                                zIndex: 1,\n                                            }\n                                        },\n                                        scales: {\n                                            x: {\n                                                beginAtZero: true,\n                                                min: -100,\n                                                max: 100,\n                                                ticks: {\n                                                    callback: function(value) {\n                                                        if (value === -100 || value === 100) {\n                                                            return value + '%';\n                                                        } else if (value === 0) {\n                                                            return average;\n                                                        }\n                                                        return '';\n                                                    },\n                                                    display: true,\n                                                    font: function(context) {\n                                                        if (context && context.tick && context.tick.value === 0) {\n                                                            return {\n                                                                weight: 'bold',\n                                                                size: 14,\n                                                                color: 'black'\n                                                            };\n                                                        }\n                                                        return {\n                                                            weight: 'bold',\n                                                            size: 13,\n                                                            color: 'black'\n                                                        };\n                                                    },\n                                                    color: 'black',\n\n                                                },\n                                                grid: {\n                                                    display: true,\n                                                    color: function(context) {\n                                                        return context.tick.value === 0 ? 'black' : '#eaeaea';\n                                                    },\n                                                    tickLength: 0,\n                                                },\n                                                position: 'top'\n\n                                            },\n                                            y: {\n                                                beginAtZero: true,\n                                                ticks: {\n                                                    display: true,\n                                                    align: 'center',\n\n                                                    crossAlign: 'far',\n                                                    font: {\n                                                        size: 18,\n                                                    },\n                                                    tickLength: 100,\n                                                    color: 'black',\n                                                },\n                                                grid: {\n                                                    display: true,\n                                                    tickLength: 1000,\n                                                },\n\n                                            }\n                                        },\n                                        plugins: {\n                                            legend: {\n                                                display: false,\n                                            },\n                                            title: {\n                                                display: false,\n                                            },\n                                            tooltip: {\n                                                yAlign: 'bottom',\n                                                xAlign: 'center',\n                                                callbacks: {\n                                                    label: function(context) {\n                                                        const originalValue = originalData[context.dataIndex];\n                                                        return originalValue; // Show the original value.\n                                                    },\n                                                },\n                                            },\n                                        }\n                                    },\n                                    plugins: [chartAreaBg, drawPercentage]\n                                });\n                            }).catch(error => {\n                                window.console.log(error);\n                            });\n\n                        }\n                    }\n                }).fail(error => {\n                    $('#content' + userid).html(nodata);\n                    throw new Error('Error: no data received yet', error);\n                });\n                return true;\n            }).catch(function(error) {\n                window.console.error(\"Failed to render template:\", error);\n            });\n\n            document.querySelectorAll('.tiny_cursive-nav-tab .active').forEach(el => el.classList.remove('active'));\n            e.target.classList.add('active');\n        });\n    }\n\n    formatedTime(data) {\n        if (data.total_time_seconds) {\n            let totalTimeSeconds = data.total_time_seconds;\n            let hours = Math.floor(totalTimeSeconds / 3600).toString().padStart(2, 0);\n            let minutes = Math.floor((totalTimeSeconds % 3600) / 60).toString().padStart(2, 0);\n            let seconds = (totalTimeSeconds % 60).toString().padStart(2, 0);\n            return `${hours}h ${minutes}m ${seconds}s`;\n        } else {\n            return \"0h 0m 0s\";\n        }\n    }\n\n    authorshipStatus(firstFile, score, scoreSetting) {\n        var icon = 'fa fa-circle-o';\n        var color = 'font-size:32px;color:black';\n        score = parseFloat(score);\n\n        if (firstFile) {\n            icon = 'fa fa-solid fa-info-circle';\n            color = 'font-size:32px;color:#000000';\n        } else if (score >= scoreSetting) {\n            icon = 'fa fa-check-circle';\n            color = 'font-size:32px;color:green';\n        } else if (score < scoreSetting) {\n            icon = 'fa fa-question-circle';\n            color = 'font-size:32px;color:#A9A9A9';\n        }\n\n        return $('<i>').addClass(icon).attr('style', color);\n    }\n}\n"],"names":["createModal","userid","context","questionid","authIcon","on","e","preventDefault","create","templateContext","then","modal","html","show","catch","error","window","console","analytics","templates","replayInstances","prop","addClass","append","stopReplay","find","removeClass","this","render","fail","checkDiff","fileid","nodata","document","createElement","classList","add","str","textContent","log","Error","methodname","args","done","response","responsedata","JSON","parse","data","submittedText","atob","submitted_text","key","component","strings","originalTextString","editsPastesAIString","commentBox","pasteCountDiv","commentscount","commentsDiv","commentsList","comments","index","commentDiv","text","usercomment","$legend","$attributedItem","$attributedBox","$attributedText","$unattributedItem","$unattributedBox","$unattributedText","contents","textBlock2","attr","message","replyWriting","filepath","video_playback","quality","cmid","metricsData","style","verticalAlign","textTransform","fontWeight","res","tabledata","file_id","content","getElementById","innerHTML","loaderDiv","className","loader","appendChild","status","quality_access","originalData","word_len_mean","edits","p_burst_mean","q_count","sentence_count","verbosity","word_count","sent_word_count_mean","Promise","all","_ref","wordLength","pBurstMean","qCount","sentenceCount","wordCount","sentWordCountMean","average","chartvas","querySelector","labels","datasets","map","d","backgroundColor","value","raw","barPercentage","drawPercentage","id","afterDraw","chart","ctx","save","getDatasetMeta","forEach","dataPoint","parseInt","font","fillStyle","textAlign","fillText","x","y","undefined","Chart","type","options","responsive","maintainAspectRatio","indexAxis","elements","bar","borderRadius","borderWidth","zIndex","scales","beginAtZero","min","max","ticks","callback","display","tick","weight","size","color","grid","tickLength","position","align","crossAlign","plugins","legend","title","tooltip","yAlign","xAlign","callbacks","label","dataIndex","beforeDraw","segmentPixel","getPixelForValue","doubleSegment","tickArray","i","push","fillRect","width","querySelectorAll","el","remove","target","formatedTime","total_time_seconds","totalTimeSeconds","Math","floor","toString","padStart","authorshipStatus","firstFile","score","scoreSetting","icon","parseFloat"],"mappings":"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"}