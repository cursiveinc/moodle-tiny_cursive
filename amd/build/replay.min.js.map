{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport {call as fetchJson} from 'core/ajax';\nimport templates from 'core/templates';\nimport $ from 'jquery';\nimport * as Str from 'core/str';\n\nexport default class Replay {\n    controllerId = '';\n\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        this.controllerId = controllerId;\n        this.replayInProgress = false;\n        this.speed = parseFloat(speed);\n        this.loop = loop;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.cursorPosition = 0;\n        this.currentEventIndex = 0;\n        this.totalEvents = 0;\n        this.currentTime = 0;\n        this.totalDuration = 0;\n        this.usercomments = [];\n        this.pasteTimestamps = [];\n        this.isPasteEvent = false;\n\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n\n        this.loadJSON(filePath)\n            .then((data) => {\n                if (data.status) {\n                    var val = JSON.parse(data.data);\n                    this.logData = val;\n                    if (data.comments) {\n                        var comments = JSON.parse(data.comments);\n                        this.usercomments = Array.isArray(comments) ? [...comments] : [];\n                    }\n\n                    if (\"data\" in this.logData) {\n                        this.logData = this.logData.data;\n                    }\n                    if (\"payload\" in this.logData) {\n                        this.logData = this.logData.payload;\n                    }\n\n                    if (this.logData.length > 0 && this.logData[0].unixTimestamp) {\n                        const startTime = this.logData[0].unixTimestamp;\n                        this.logData = this.logData.map(event => ({\n                            ...event,\n                            normalizedTime: event.unixTimestamp - startTime\n                        }));\n                        this.totalDuration = this.logData[this.logData.length - 1].normalizedTime;\n                    }\n\n                    this.totalEvents = this.logData.length;\n                    this.identifyPasteEvents();\n                    if (controllerId && this.logData) {\n                        this.constructController(controllerId);\n                    }\n                    this.startReplay();\n                } else {\n                    try {\n                        // eslint-disable-next-line\n                        Promise.all([\n                            templates.render('tiny_cursive/no_submission'),\n                            Str.get_string('warningpayload', 'tiny_cursive')\n                        ])\n                            .then(function (results) {\n                                var html = results[0];\n                                var str = results[1];\n                                var newElement = $(html);\n                                newElement.text(str);\n                                $('.tiny_cursive').html(newElement);\n                                return true;\n                            })\n                            .catch(function (error) {\n                                window.console.error(error);\n                            });\n                    } catch (error) {\n                        window.console.error(error);\n                    }\n                }\n                return data;\n            })\n            .catch(error => {\n                try {\n                    // eslint-disable-next-line\n                    Promise.all([\n                        templates.render('tiny_cursive/no_submission'),\n                        Str.get_string('warningpayload', 'tiny_cursive')\n                    ])\n                        .then(function (results) {\n                            var html = results[0];\n                            var str = results[1];\n                            var newElement = $(html);\n                            newElement.text(str);\n                            $('.tiny_cursive').html(newElement);\n                        })\n                        .catch(function (error) {\n                            window.console.error(error);\n                        });\n                } catch (error) {\n                    window.console.error(error);\n                }\n                window.console.error('Error loading JSON file: ' + error.message);\n            });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n            var playSvg = document.createElement('img');\n            playSvg.src = M.util.image_url('playicon', 'tiny_cursive');\n\n            if (this.playButton) {\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg.outerHTML;\n            }\n        }\n    }\n\n    constructController(controllerId) {\n        this.replayInProgress = false;\n        this.currentPosition = 0;\n        this.speed = 1;\n        if (this.replayIntervalId) {\n            clearInterval(this.replayIntervalId);\n            this.replayIntervalId = null;\n        }\n\n        const container = document.getElementById(controllerId);\n        if (!container) {\n            window.console.error(\"Container not found with ID:\", controllerId);\n            return;\n        }\n\n        const controlContainer = container.querySelector('.tiny_cursive_replay_control');\n        if (!controlContainer) {\n            window.console.error(\"Replay control container not found in:\", controllerId);\n            return;\n        }\n        controlContainer.innerHTML = '<span class=\"tiny_cursive_loading_spinner\"></span>';\n\n        const topRow = document.createElement('div');\n        topRow.classList.add('tiny_cursive_top_row');\n\n        // Play button\n        this.playButton = document.createElement('button');\n        this.playButton.classList.add('tiny_cursive_play_button');\n        const playSvg = document.createElement('i');\n        playSvg.className = '';\n        this.playButton.innerHTML = `<span class=\"play-icon\">${playSvg.outerHTML}</span>`;\n\n        this.playButton.addEventListener('click', () => {\n            if (this.replayInProgress) {\n                this.stopReplay();\n                const playImg = document.createElement('img');\n                playImg.src = M.util.image_url('playicon', 'tiny_cursive');\n                this.playButton.querySelector('.play-icon').innerHTML = playImg.outerHTML;\n            } else {\n                this.startReplay(false);\n            }\n            $('.tiny_cursive-nav-tab').find('.active').removeClass('active');\n            $('a[id^=\"rep\"]').addClass('active');\n        });\n        topRow.appendChild(this.playButton);\n\n        // Scrubber\n        const scrubberContainer = document.createElement('div');\n        scrubberContainer.classList.add('tiny_cursive_scrubber_container');\n\n        this.scrubberElement = document.createElement('input');\n        this.scrubberElement.classList.add('tiny_cursive_timeline_scrubber', 'timeline-scrubber');\n        this.scrubberElement.type = 'range';\n        this.scrubberElement.max = '100';\n        this.scrubberElement.min = '0';\n        this.scrubberElement.value = '0';\n\n        this.scrubberElement.addEventListener('input', () => {\n            const scrubberValue = parseInt(this.scrubberElement.value, 10);\n            this.skipToTime(scrubberValue);\n        });\n\n        scrubberContainer.appendChild(this.scrubberElement);\n        topRow.appendChild(scrubberContainer);\n\n        // Time display\n        this.timeDisplay = document.createElement('div');\n        this.timeDisplay.classList.add('tiny_cursive_time_display');\n        this.timeDisplay.textContent = '00:00 / 00:00';\n        topRow.appendChild(this.timeDisplay);\n\n        const bottomRow = document.createElement('div');\n        bottomRow.classList.add('tiny_cursive_bottom_row');\n\n        // Speed controls\n        const speedContainer = document.createElement('div');\n        speedContainer.classList.add('tiny_cursive_speed_controls', 'speed-controls');\n\n        const speedLabel = document.createElement('span');\n        speedLabel.classList.add('tiny_cursive_speed_label');\n        speedLabel.textContent = 'Speed: ';\n        speedContainer.appendChild(speedLabel);\n\n        const speedGroup = document.createElement('div');\n        speedGroup.classList.add('tiny_cursive_speed_group');\n\n        [1, 1.5, 2, 5, 10].forEach(speedValue => {\n            const speedBtn = document.createElement('button');\n            speedBtn.textContent = `${speedValue}x`;\n            speedBtn.classList.add('tiny_cursive_speed_btn', 'speed-btn');\n            if (parseFloat(speedValue) === parseFloat(this.speed)) {\n                speedBtn.classList.add('active');\n            }\n            speedBtn.dataset.speed = speedValue;\n\n            speedBtn.addEventListener('click', () => {\n                document.querySelectorAll('.tiny_cursive_speed_btn').forEach(btn => btn.classList.remove('active'));\n                speedBtn.classList.add('active');\n                this.speed = parseFloat(speedBtn.dataset.speed);\n                if (this.replayInProgress) {\n                    this.stopReplay();\n                    this.startReplay(false);\n                }\n            });\n\n            speedGroup.appendChild(speedBtn);\n        });\n\n        speedContainer.appendChild(speedGroup);\n        bottomRow.appendChild(speedContainer);\n\n        const existingPanel = container.querySelector('.paste-events-panel');\n        if (existingPanel) {\n            existingPanel.remove();\n        }\n\n        // Paste Events Toggle\n        const pasteEventsToggle = document.createElement('div');\n        pasteEventsToggle.classList.add('tiny_cursive_paste_events_toggle', 'paste-events-toggle');\n\n        const pasteEventsIcon = document.createElement('span');\n        const pasteIcon = document.createElement('img');\n        pasteIcon.src = M.util.image_url('pasteicon', 'tiny_cursive');\n        pasteEventsIcon.innerHTML = pasteIcon.outerHTML;\n        pasteEventsIcon.classList.add('tiny_cursive_paste_events_icon');\n\n        const pasteEventsText = document.createElement('span');\n        pasteEventsText.textContent = 'Paste Events';\n\n        const pasteEventCount = document.createElement('span');\n        pasteEventCount.textContent = `(${this.usercomments.length})`;\n        pasteEventCount.className = 'paste-event-count';\n        pasteEventCount.style.marginLeft = '2px';\n\n        const chevronIcon = document.createElement('span');\n        const chevron = document.createElement('i');\n        chevron.className = 'fa fa-chevron-down';\n        chevronIcon.innerHTML = chevron.outerHTML;\n        chevronIcon.style.marginLeft = '5px';\n        chevronIcon.style.transition = 'transform 0.3s ease';\n\n        pasteEventsToggle.appendChild(pasteEventsIcon);\n        pasteEventsToggle.appendChild(pasteEventsText);\n        pasteEventsToggle.appendChild(pasteEventCount);\n        pasteEventsToggle.appendChild(chevronIcon);\n\n        // Create Paste Events Panel\n        const pasteEventsPanel = document.createElement('div');\n        pasteEventsPanel.classList.add('tiny_cursive_paste_events_panel', 'paste-events-panel');\n        pasteEventsPanel.style.display = 'none';\n\n        this.populatePasteEventsPanel(pasteEventsPanel);\n\n        pasteEventsToggle.addEventListener('click', () => {\n            const isHidden = pasteEventsPanel.style.display === 'none';\n            pasteEventsPanel.style.display = isHidden ? 'block' : 'none';\n            chevronIcon.style.transform = isHidden ? 'rotate(180deg)' : 'rotate(0)';\n        });\n\n        bottomRow.appendChild(pasteEventsToggle);\n\n        this.pasteEventsPanel = pasteEventsPanel;\n        this.pasteEventCount = pasteEventCount;\n\n        controlContainer.appendChild(topRow);\n        controlContainer.appendChild(bottomRow);\n        container.appendChild(pasteEventsPanel);\n\n        controlContainer.querySelector('.tiny_cursive_loading_spinner')?.remove();\n    }\n\n    identifyPasteEvents() {\n        this.pasteTimestamps = [];\n        let controlPressed = false;\n        let pasteCount = 0;\n\n        // Check for finding Control+V combinations\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                if (event.key === \"Control\") {\n                    controlPressed = true;\n                } else if (event.key === \"v\" && controlPressed) {\n                    const timestamp = event.normalizedTime || 0;\n\n                    let userComment = \"\";\n                    if (this.usercomments && this.usercomments[pasteCount]) {\n                        userComment = this.usercomments[pasteCount];\n                    }\n\n                    this.pasteTimestamps.push({\n                        index: pasteCount,\n                        time: timestamp,\n                        formattedTime: this.formatTime(timestamp),\n                        pastedText: userComment,\n                        timestamp: timestamp\n                    });\n                    pasteCount++;\n\n                    controlPressed = false;\n                } else {\n                    controlPressed = false;\n                }\n            }\n        }\n\n        if (this.usercomments.length > 0 && this.pasteTimestamps.length === 0) {\n            for (let i = 0; i < this.usercomments.length; i++) {\n                this.pasteTimestamps.push({\n                    index: i,\n                    time: 0,\n                    formattedTime: this.formatTime(0),\n                    pastedText: this.usercomments[i],\n                    timestamp: 0\n                });\n            }\n        }\n\n        while (this.pasteTimestamps.length < this.usercomments.length) {\n            const lastIndex = this.pasteTimestamps.length;\n            this.pasteTimestamps.push({\n                index: lastIndex,\n                time: 0,\n                formattedTime: this.formatTime(0),\n                pastedText: this.usercomments[lastIndex],\n                timestamp: 0\n            });\n        }\n\n        if (this.pasteEventsPanel) {\n            this.populatePasteEventsPanel(this.pasteEventsPanel);\n        }\n    }\n\n    populatePasteEventsPanel(panel) {\n        panel.innerHTML = '';\n\n        while (panel.firstChild) {\n            panel.removeChild(panel.firstChild);\n        }\n        panel.classList.add('tiny_cursive_event_panel');\n\n        const pasteEvents = this.pasteTimestamps && this.pasteTimestamps.length ?\n            this.pasteTimestamps : [];\n\n        if (!pasteEvents || pasteEvents.length === 0) {\n            const noEventsMessage = document.createElement('div');\n            noEventsMessage.className = 'no-paste-events-message p-3';\n            noEventsMessage.textContent = 'No paste events detected for this submission.';\n            panel.appendChild(noEventsMessage);\n            return;\n        }\n\n        const carouselContainer = document.createElement('div');\n        carouselContainer.classList.add('tiny_cursive_paste_events_carousel', 'paste-events-carousel');\n\n        const navigationRow = document.createElement('div');\n        navigationRow.classList.add('paste-events-navigation', 'tiny_cursive_navigation_row');\n\n        const counterDisplay = document.createElement('div');\n        counterDisplay.classList.add('paste-events-counter', 'tiny_cursive_counter_display');\n        counterDisplay.textContent = 'Paste Events';\n\n        const navButtons = document.createElement('div');\n        navButtons.classList.add('tiny_cursive_nav_buttons', 'tiny_cursive_nav_buttons');\n\n        const prevButton = document.createElement('button');\n        prevButton.classList.add('paste-event-prev-btn', 'tiny_cursive_nav_button');\n        const leftChevron = document.createElement('i');\n        leftChevron.className = 'fa fa-chevron-left';\n        prevButton.innerHTML = leftChevron.outerHTML;\n\n        const nextButton = document.createElement('button');\n        nextButton.className = 'paste-event-next-btn tiny_cursive_nav_button';\n        const rightChevron = document.createElement('i');\n        rightChevron.className = 'fa fa-chevron-right';\n        nextButton.innerHTML = rightChevron.outerHTML;\n        nextButton.disabled = pasteEvents.length <= 1;\n\n        navButtons.appendChild(prevButton);\n        navButtons.appendChild(nextButton);\n\n        navigationRow.appendChild(counterDisplay);\n        navigationRow.appendChild(navButtons);\n\n        const contentContainer = document.createElement('div');\n        contentContainer.className = 'paste-events-content tiny_cursive_content_container';\n\n        // Create initial content with first paste event\n        const createPasteEventDisplay = (pasteEvent) => {\n            const eventRow = document.createElement('div');\n            eventRow.className = 'tiny_cursive_event_row';\n\n            // Header row with timestamp and play button\n            const headerRow = document.createElement('div');\n            headerRow.className = 'tiny_cursive_header_row';\n\n            // Timestamp and text container\n            const textContainer = document.createElement('div');\n            textContainer.className = 'tiny_cursive_text_container';\n\n            const timestampContainer = document.createElement('div');\n            timestampContainer.className = 'paste-event-timestamp tiny_cursive_paste_event_timestamp';\n            timestampContainer.textContent = pasteEvent.formattedTime;\n\n            const pastedTextContainer = document.createElement('div');\n            pastedTextContainer.className = 'paste-event-text tiny_cursive_pasted_text_container';\n            pastedTextContainer.textContent = pasteEvent.pastedText;\n\n            textContainer.appendChild(timestampContainer);\n            textContainer.appendChild(pastedTextContainer);\n\n            const playButton = document.createElement('button');\n            playButton.className = 'paste-event-play-btn tiny_cursive_seekplay_button';\n\n            const playIcon = document.createElement('img');\n            playIcon.src = M.util.image_url('seekplayicon', 'tiny_cursive');\n            playButton.innerHTML = playIcon.outerHTML;\n\n            playButton.addEventListener('click', () => {\n                this.jumpToTimestamp(pasteEvent.timestamp);\n            });\n\n            headerRow.appendChild(textContainer);\n            headerRow.appendChild(playButton);\n\n            eventRow.appendChild(headerRow);\n\n            return eventRow;\n        };\n\n        contentContainer.appendChild(createPasteEventDisplay(pasteEvents[0]));\n\n        carouselContainer.appendChild(navigationRow);\n        carouselContainer.appendChild(contentContainer);\n\n        panel.appendChild(carouselContainer);\n\n        let currentIndex = 0;\n\n        prevButton.addEventListener('click', () => {\n            if (currentIndex > 0) {\n                currentIndex--;\n                updatePasteEventDisplay();\n            }\n        });\n\n        nextButton.addEventListener('click', () => {\n            if (currentIndex < pasteEvents.length - 1) {\n                currentIndex++;\n                updatePasteEventDisplay();\n            }\n        });\n\n        const updatePasteEventDisplay = () => {\n            contentContainer.innerHTML = '';\n            contentContainer.appendChild(createPasteEventDisplay(pasteEvents[currentIndex]));\n\n            counterDisplay.textContent = 'Paste Events';\n\n            prevButton.disabled = currentIndex === 0;\n            prevButton.style.opacity = currentIndex === 0 ? '0.5' : '1';\n            nextButton.disabled = currentIndex === pasteEvents.length - 1;\n            nextButton.style.opacity = currentIndex === pasteEvents.length - 1 ? '0.5' : '1';\n        };\n    }\n\n    jumpToTimestamp(timestamp) {\n        const percentage = this.totalDuration > 0 ? (timestamp / this.totalDuration) * 100 : 0;\n\n        this.skipToTime(percentage);\n\n        if (!this.replayInProgress) {\n            this.startReplay(false);\n        }\n    }\n\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n\n            if (this.timeDisplay) {\n                const displayTime = Math.min(this.currentTime, this.totalDuration);\n                const currentTimeFormatted = this.formatTime(displayTime);\n                const totalTimeFormatted = this.formatTime(this.totalDuration);\n                this.timeDisplay.textContent = `${currentTimeFormatted} / ${totalTimeFormatted}`;\n            }\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response => {\n            return response;\n        }).fail(error => {\n            throw new Error('Error loading JSON file: ' + error.message);\n        });\n    }\n\n    formatTime(ms) {\n        const seconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n\n    // Call this to make a \"start\" or \"start over\" function\n    startReplay(reset = true) {\n        // Clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        const atEnd = (this.totalDuration > 0 && this.currentTime >= this.totalDuration) ||\n            (this.currentEventIndex >= this.totalEvents);\n        if (atEnd && !reset) {\n            reset = true;\n        }\n        this.replayInProgress = true;\n        if (reset) {\n            this.outputElement.innerHTML = '';\n            this.text = '';\n            this.cursorPosition = 0;\n            this.currentEventIndex = 0;\n            this.currentTime = 0;\n            this.highlightedChars = [];\n            this.deletedChars = [];\n            this.isControlKeyPressed = false;\n        }\n        if (this.playButton) {\n            const pauseSvg = document.createElement('i');\n            pauseSvg.className = 'fa fa-pause';\n            this.playButton.querySelector('.play-icon').innerHTML = pauseSvg.outerHTML;\n        }\n        this.replayLog();\n    }\n\n    // Called by startReplay() to recursively call through keydown events\n    replayLog() {\n        if (!this.replayInProgress) {\n            this.updateDisplayText(this.text, this.cursorPosition, [], []);\n            return;\n        }\n\n        while (this.currentEventIndex < this.logData.length) {\n            const event = this.logData[this.currentEventIndex];\n\n            if (event.normalizedTime && event.normalizedTime > this.currentTime) {\n                break;\n            }\n\n            let text = this.text || '';\n            let cursor = this.cursorPosition || 0;\n            let updatedHighlights = [...this.highlightedChars];\n            let updatedDeleted = [...this.deletedChars];\n\n            // Use rePosition for the first event or mouse events\n            if (event.rePosition !== undefined && (this.currentEventIndex === 0\n                || event.event === 'mouseDown' || event.event === 'mouseUp')) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                }\n                else if (event.key !== \"v\") {\n                    if (event.key !== \"Control\" && event.key !== 'Backspace' && event.key !== 'Delete' &&\n                        event.key !== 'ArrowLeft' && event.key !== 'ArrowRight') {\n                        this.isControlKeyPressed = false;\n                    }\n                    if (event.key !== \"Backspace\" && event.key !== \"Delete\" &&\n                        event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n                        this.isPasteEvent = false;\n                    }\n                }\n                else if (event.key === 'v' && this.isControlKeyPressed) {\n                    this.isPasteEvent = true;\n                    this.isControlKeyPressed = false;\n                }\n                if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    // Handle Control+Backspace word deletion\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            updatedDeleted.push({\n                                index: wordStart + i,\n                                char: wordToDelete[i],\n                                time: this.currentTime,\n                                expiresAt: this.currentTime + 2000\n                            });\n                        }\n                        // Remove the word\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                }\n                // Handle Ctrl+Delete\n                else if (event.key === \"Delete\" && this.isControlKeyPressed) {\n                    if (cursor < text.length) {\n                        const wordEnd = this.findNextWordBoundary(text, cursor);\n                        const wordToDelete = text.substring(cursor, wordEnd);\n\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            updatedDeleted.push({\n                                index: cursor + i,\n                                char: wordToDelete[i],\n                                time: this.currentTime,\n                                expiresAt: this.currentTime + 2000\n                            });\n                        }\n\n                        // Remove the word from text\n                        text = text.substring(0, cursor) + text.substring(wordEnd);\n                    }\n                }\n                // Handle Ctrl+ArrowLeft\n                else if (event.key === \"ArrowLeft\" && this.isControlKeyPressed) {\n                    cursor = this.findPreviousWordBoundary(text, cursor);\n                }\n                // Handle Ctrl+ArrowRight\n                else if (event.key === \"ArrowRight\" && this.isControlKeyPressed) {\n                    cursor = this.findNextWordBoundary(text, cursor);\n                }\n                // Handle regular Backspace\n                else if (event.key === \"Backspace\" && !this.isPasteEvent) {\n                    if (cursor > 0) {\n                        // Store the character being deleted\n                        updatedDeleted.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 2000 // Make deletions visible for 2 seconds\n                        });\n                        // Remove the character before cursor\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor--;\n                    }\n                }\n                // Handle Delete key\n                else if (event.key === \"Delete\" && !this.isControlKeyPressed) {\n                    if (cursor < text.length) {\n                        updatedDeleted.push({\n                            index: cursor,\n                            char: text[cursor],\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 2000\n                        });\n                        text = text.substring(0, cursor) + text.substring(cursor + 1);\n                    }\n                }\n                // Handle ArrowLeft\n                else if (event.key === \"ArrowLeft\" && !this.isControlKeyPressed) {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                // Handle ArrowRight\n                else if (event.key === \"ArrowRight\" && !this.isControlKeyPressed) {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                // Handle character insertion\n                else if (charToInsert !== null && charToInsert !== \"\") {\n                    // Insert the character at cursor position\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    // Highlight non-space characters\n                    if (charToInsert.trim() !== \"\") {\n                        updatedHighlights.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 1500 // Make highlights visible for 1.5 seconds\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.text = text;\n            this.cursorPosition = cursor;\n\n            // Filter out expired highlights and deletions\n            this.highlightedChars = updatedHighlights.filter(h =>\n                !h.expiresAt || h.expiresAt > this.currentTime\n            );\n\n            this.deletedChars = updatedDeleted.filter(d =>\n                !d.expiresAt || d.expiresAt > this.currentTime\n            );\n\n            this.currentEventIndex++;\n        }\n\n        this.updateDisplayText(this.text, this.cursorPosition, this.highlightedChars, this.deletedChars);\n\n        // Update timeline\n        if (this.totalDuration > 0) {\n            const percentComplete = Math.min((this.currentTime / this.totalDuration) * 100, 100);\n            this.setScrubberVal(percentComplete);\n        }\n\n        // Continue or stop replay\n        if (this.replayInProgress) {\n            const baseIncrement = 100;\n            const incrementTime = baseIncrement / this.speed;\n            this.currentTime += baseIncrement;\n\n            if (this.currentEventIndex >= this.totalEvents) {\n                if (this.loop) {\n                    this.startReplay(true);\n                } else {\n                    this.stopReplay();\n                    this.updateDisplayText(this.text, this.cursorPosition, [], []);\n                }\n            } else {\n                this.replayTimeout = setTimeout(() => this.replayLog(), incrementTime);\n            }\n        }\n    }\n\n    findNextWordBoundary(text, cursor) {\n        if (!text || cursor >= text.length) {\n            return cursor;\n        }\n\n        if (text[cursor] === ' ') {\n            while (cursor < text.length && text[cursor] === ' ') {\n                cursor++;\n            }\n        }\n\n        if (cursor >= text.length) {\n            let lastNonSpace = text.length - 1;\n            while (lastNonSpace >= 0 && text[lastNonSpace] === ' ') {\n                lastNonSpace--;\n            }\n            cursor = lastNonSpace + 1;\n            return cursor;\n        }\n\n        let wordEnd = cursor;\n        while (wordEnd < text.length && text[wordEnd] !== ' ') {\n            wordEnd++;\n        }\n\n        return wordEnd;\n    }\n\n    findPreviousWordBoundary(text, cursor) {\n        let pos = cursor;\n\n        if (pos <= 0) {\n            return 0;\n        }\n\n        pos--;\n\n        while (pos > 0 && (text[pos] === ' ' || text[pos] === '\\n')) {\n            pos--;\n        }\n\n        while (pos > 0 && text[pos - 1] !== ' ' && text[pos - 1] !== '\\n') {\n            pos--;\n        }\n\n        return pos;\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        const wasPlaying = this.replayInProgress;\n        if (wasPlaying) {\n            this.replayInProgress = false;\n            clearTimeout(this.replayTimeout);\n        }\n\n        const targetTime = (this.totalDuration * percentage) / 100;\n        this.currentTime = targetTime;\n        this.currentEventIndex = 0;\n        this.text = '';\n        this.cursorPosition = 0;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.isControlKeyPressed = false;\n        this.isPasteEvent = false;\n\n        let text = '';\n        let cursor = 0;\n        let updatedHighlights = [];\n        let updatedDeleted = [];\n\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.normalizedTime && event.normalizedTime > targetTime) {\n                this.currentEventIndex = i;\n                break;\n            }\n\n            // Use rePosition for first event or mouse events\n            if (event.rePosition !== undefined && (i === 0 || event.event === 'mouseDown' || event.event === 'mouseUp')) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                } else if (event.key !== \"v\") {\n                    if (event.key !== \"Control\" && event.key !== 'Backspace' && event.key !== 'Delete' &&\n                        event.key !== 'ArrowLeft' && event.key !== 'ArrowRight') {\n                        this.isControlKeyPressed = false;\n                    }\n                    if (event.key !== \"Backspace\" && event.key !== \"Delete\" &&\n                        event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n                        this.isPasteEvent = false;\n                    }\n                } else if (event.key === 'v' && this.isControlKeyPressed) {\n                    this.isPasteEvent = true;\n                    this.isControlKeyPressed = false;\n                }\n\n                // Handle Ctrl+Backspace\n                if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let j = 0; j < wordToDelete.length; j++) {\n                            updatedDeleted.push({\n                                index: wordStart + j,\n                                char: wordToDelete[j],\n                                time: targetTime,\n                                expiresAt: targetTime + 2000\n                            });\n                        }\n\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                // Handle Ctrl+Delete\n                else if (event.key === \"Delete\" && this.isControlKeyPressed) {\n                    if (cursor < text.length) {\n                        const wordEnd = this.findNextWordBoundary(text, cursor);\n                        const wordToDelete = text.substring(cursor, wordEnd);\n\n                        for (let j = 0; j < wordToDelete.length; j++) {\n                            updatedDeleted.push({\n                                index: cursor + j,\n                                char: wordToDelete[j],\n                                time: targetTime,\n                                expiresAt: targetTime + 2000\n                            });\n                        }\n\n                        text = text.substring(0, cursor) + text.substring(wordEnd);\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                // Handle Ctrl+ArrowLeft\n                else if (event.key === \"ArrowLeft\" && this.isControlKeyPressed) {\n                    cursor = this.findPreviousWordBoundary(text, cursor);\n                }\n                // Handle Ctrl+ArrowRight\n                else if (event.key === \"ArrowRight\" && this.isControlKeyPressed) {\n                    cursor = this.findNextWordBoundary(text, cursor);\n                }\n                // Handle regular Backspace\n                else if (event.key === \"Backspace\" && !this.isPasteEvent) {\n                    if (cursor > 0) {\n                        updatedDeleted.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: targetTime,\n                            expiresAt: targetTime + 2000\n                        });\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor--;\n                    }\n                }\n                // Handle Delete key\n                else if (event.key === \"Delete\" && !this.isControlKeyPressed) {\n                    if (cursor < text.length) {\n                        updatedDeleted.push({\n                            index: cursor,\n                            char: text[cursor],\n                            time: targetTime,\n                            expiresAt: targetTime + 2000\n                        });\n                        text = text.substring(0, cursor) + text.substring(cursor + 1);\n                    }\n                }\n                // Handle ArrowLeft\n                else if (event.key === \"ArrowLeft\" && !this.isControlKeyPressed) {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                // Handle ArrowRight\n                else if (event.key === \"ArrowRight\" && !this.isControlKeyPressed) {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                // Handle character insertion\n                else if (charToInsert && charToInsert.length > 0) {\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    if (charToInsert.trim() !== \"\") {\n                        updatedHighlights.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: targetTime,\n                            expiresAt: targetTime + 1500\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.currentEventIndex = i + 1;\n        }\n        // Filter expired highlights and deletions\n        this.highlightedChars = updatedHighlights.filter(h => !h.expiresAt || h.expiresAt > targetTime);\n        this.deletedChars = updatedDeleted.filter(d => !d.expiresAt || d.expiresAt > targetTime);\n\n        this.text = text;\n        this.cursorPosition = cursor;\n        this.updateDisplayText(text, cursor, this.highlightedChars, this.deletedChars);\n        this.setScrubberVal(percentage);\n\n        if (wasPlaying) {\n            this.replayInProgress = true;\n            this.replayLog();\n        }\n    }\n\n\n    // Update display with text, cursor, highlights and deletions\n    updateDisplayText(text, cursorPosition, highlights, deletions) {\n        let html = '';\n        const highlightMap = {};\n        const deletionMap = {};\n        const currentTime = this.currentTime;\n\n        highlights.forEach(h => {\n            let opacity = 1;\n            if (h.expiresAt) {\n                const timeRemaining = h.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, timeRemaining / 500);\n                }\n            }\n            highlightMap[h.index] = { char: h.char, opacity: opacity };\n        });\n\n        deletions.forEach(d => {\n            let opacity = 0.5;\n            if (d.expiresAt) {\n                const timeRemaining = d.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, (timeRemaining / 500) * 0.5);\n                }\n            }\n            deletionMap[d.index] = { char: d.char, opacity: opacity };\n        });\n\n        // Find if we have out-of-bounds deletions (from Control+Backspace)\n        const outOfRangeDeletions = deletions.filter(d => d.index >= text.length);\n\n        const textLines = text.split('\\n');\n        let currentPosition = 0;\n\n        for (let lineIndex = 0; lineIndex < textLines.length; lineIndex++) {\n            const line = textLines[lineIndex];\n\n            for (let i = 0; i < line.length; i++) {\n                if (currentPosition === cursorPosition) {\n                    html += '<span class=\"tiny_cursive-cursor\"></span>';\n                }\n\n                const char = line[i];\n\n                if (deletionMap[currentPosition]) {\n                    const deletion = deletionMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-deleted-char\" style=\"opacity: ${deletion.opacity};\">${deletion.char}</span>`;\n                }\n\n                if (highlightMap[currentPosition] && char !== ' ') {\n                    const highlight = highlightMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-highlighted-char\" style=\"opacity: ${highlight.opacity};\">${char}</span>`;\n                } else {\n                    html += char === ' ' ? '&nbsp;' : this.escapeHtml(char);\n                }\n\n                currentPosition++;\n            }\n\n            if (currentPosition === cursorPosition) {\n                html += '<span class=\"tiny_cursive-cursor\"></span>';\n            }\n\n            if (lineIndex < textLines.length - 1) {\n                html += '<br>';\n                currentPosition++;\n            }\n        }\n\n        if (cursorPosition === text.length && !html.endsWith('<span class=\"tiny_cursive-cursor\"></span>')) {\n            html += '<span class=\"tiny_cursive-cursor\"></span>';\n        }\n\n        // For control + backspace functionalities\n        if (outOfRangeDeletions.length > 0) {\n            outOfRangeDeletions.sort((a, b) => a.index - b.index);\n\n            const cursorHTML = '<span class=\"tiny_cursive-cursor\"></span>';\n            let cursorPos = html.lastIndexOf(cursorHTML);\n\n            if (cursorPos !== -1) {\n                let deletedWordHTML = '<span class=\"tiny_cursive-deleted-char\" style=\"opacity: 0.5;\">';\n                outOfRangeDeletions.forEach(d => {\n                    deletedWordHTML += d.char;\n                });\n                deletedWordHTML += '</span>';\n                html = html.substring(0, cursorPos) + deletedWordHTML + html.substring(cursorPos);\n            }\n        }\n\n        const wasScrolledToBottom = this.outputElement.scrollHeight -\n            this.outputElement.clientHeight <= this.outputElement.scrollTop + 1;\n\n        this.outputElement.innerHTML = html;\n\n        if (wasScrolledToBottom || this.isCursorBelowViewport()) {\n            this.outputElement.scrollTop = this.outputElement.scrollHeight;\n        }\n    }\n\n    // Check if cursor is below visible viewport\n    isCursorBelowViewport() {\n        const cursorElement = this.outputElement.querySelector('.tiny_cursive-cursor:last-of-type');\n        if (!cursorElement) {\n            return false;\n        }\n\n        const cursorRect = cursorElement.getBoundingClientRect();\n        const outputRect = this.outputElement.getBoundingClientRect();\n\n        return cursorRect.bottom > outputRect.bottom;\n    }\n\n    escapeHtml(unsafe) {\n        return unsafe\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    // Used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key) {\n        switch (key) {\n            case \"Enter\":\n                return \"\\n\";\n            case \"Backspace\":\n            case \"Delete\":\n                return \"\";\n            case \"ControlBackspace\":\n                return \"\";\n            case \" \":\n                return \" \";\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\",\n                    \"ArrowLeft\", \"Meta\", \"CapsLock\", \"Tab\", \"Escape\", \"Delete\", \"PageUp\", \"PageDown\",\n                    \"Insert\", \"Home\", \"End\", \"NumLock\", \"Insert\", \"Home\", \"End\", \"NumLock\", \"AudioVolumeUp\",\n                    \"AudioVolumeDown\", \"MediaPlayPause\", \"F1\", \"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\",\n                    \"F10\", \"F11\", \"F12\", \"PrintScreen\", \"UnIdentified\"]\n                    .includes(key) ? key : \"\";\n        }\n    }\n}"],"names":["controllerId","constructor","elementId","filePath","speed","loop","replayInProgress","parseFloat","highlightedChars","deletedChars","cursorPosition","currentEventIndex","totalEvents","currentTime","totalDuration","usercomments","pasteTimestamps","isPasteEvent","element","document","getElementById","Error","outputElement","loadJSON","then","data","status","val","JSON","parse","logData","comments","Array","isArray","this","payload","length","unixTimestamp","startTime","map","event","normalizedTime","identifyPasteEvents","constructController","startReplay","Promise","all","templates","render","Str","get_string","results","html","str","newElement","text","catch","error","window","console","message","stopReplay","clearTimeout","replayTimeout","playSvg","createElement","src","M","util","image_url","playButton","querySelector","innerHTML","outerHTML","currentPosition","replayIntervalId","clearInterval","container","controlContainer","topRow","classList","add","className","addEventListener","playImg","find","removeClass","addClass","appendChild","scrubberContainer","scrubberElement","type","max","min","value","scrubberValue","parseInt","skipToTime","timeDisplay","textContent","bottomRow","speedContainer","speedLabel","speedGroup","forEach","speedValue","speedBtn","dataset","querySelectorAll","btn","remove","existingPanel","pasteEventsToggle","pasteEventsIcon","pasteIcon","pasteEventsText","pasteEventCount","style","marginLeft","chevronIcon","chevron","transition","pasteEventsPanel","display","populatePasteEventsPanel","isHidden","transform","controlPressed","pasteCount","i","toLowerCase","key","timestamp","userComment","push","index","time","formattedTime","formatTime","pastedText","lastIndex","panel","firstChild","removeChild","pasteEvents","noEventsMessage","carouselContainer","navigationRow","counterDisplay","navButtons","prevButton","leftChevron","nextButton","rightChevron","disabled","contentContainer","createPasteEventDisplay","pasteEvent","eventRow","headerRow","textContainer","timestampContainer","pastedTextContainer","playIcon","jumpToTimestamp","currentIndex","updatePasteEventDisplay","opacity","percentage","setScrubberVal","String","displayTime","Math","currentTimeFormatted","totalTimeFormatted","methodname","args","filepath","done","response","fail","ms","seconds","floor","remainingSeconds","toString","padStart","reset","isControlKeyPressed","pauseSvg","replayLog","cursor","updatedHighlights","updatedDeleted","undefined","rePosition","charToInsert","applyKey","wordStart","wordToDelete","substring","char","expiresAt","wordEnd","findNextWordBoundary","findPreviousWordBoundary","trim","filter","h","d","updateDisplayText","percentComplete","baseIncrement","incrementTime","setTimeout","lastNonSpace","pos","skipToEnd","textOutput","slice","wasPlaying","targetTime","j","highlights","deletions","highlightMap","deletionMap","timeRemaining","outOfRangeDeletions","textLines","split","lineIndex","line","deletion","escapeHtml","endsWith","sort","a","b","cursorHTML","cursorPos","lastIndexOf","deletedWordHTML","wasScrolledToBottom","scrollHeight","clientHeight","scrollTop","isCursorBelowViewport","cursorElement","cursorRect","getBoundingClientRect","outputRect","bottom","unsafe","replace","includes"],"mappings":"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"}