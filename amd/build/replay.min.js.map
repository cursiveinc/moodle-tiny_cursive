{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport {call as fetchJson} from 'core/ajax';\nimport templates from 'core/templates';\nimport $ from 'jquery';\nimport * as Str from 'core/str';\n\nexport default class Replay {\n    controllerId = '';\n\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        this.controllerId = controllerId;\n        this.replayInProgress = false;\n        this.speed = parseFloat(speed);\n        this.loop = loop;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.cursorPosition = 0;\n        this.currentEventIndex = 0;\n        this.totalEvents = 0;\n        this.currentTime = 0;\n        this.totalDuration = 0;\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n            this.outputElement.style.whiteSpace = 'pre-wrap';\n            this.outputElement.style.wordBreak = 'break-word';\n            this.outputElement.style.maxWidth = '100%';\n            this.outputElement.style.overflow = 'auto';\n            this.outputElement.style.fontFamily = 'monospace';\n            this.outputElement.style.padding = '10px';\n            this.outputElement.style.border = '1px solid #e0e0e0';\n            this.outputElement.style.borderRadius = '4px';\n            this.outputElement.style.minHeight = '100px';\n            this.outputElement.style.backgroundColor = '#fff';\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n        if (controllerId) {\n            this.constructController(controllerId);\n        }\n        this.loadJSON(filePath)\n            .then((data) => {\n                if (data.status) {\n                    var val = JSON.parse(data.data);\n                    this.logData = val;\n                    if (\"data\" in this.logData) {\n                        this.logData = this.logData.data;\n                    }\n                    if (\"payload\" in this.logData) {\n                        this.logData = this.logData.payload;\n                    }\n                    if (this.logData.length > 0 && this.logData[0].unixTimestamp) {\n                        const startTime = this.logData[0].unixTimestamp;\n                        this.logData = this.logData.map(event => ({\n                            ...event,\n                            normalizedTime: event.unixTimestamp - startTime\n                        }));\n                        this.totalDuration = this.logData[this.logData.length - 1].normalizedTime;\n                    }\n                    this.totalEvents = this.logData.length;\n                    this.startReplay();\n                } else {\n                    try {\n                        // eslint-disable-next-line\n                        Promise.all([\n                            templates.render('tiny_cursive/no_submission'),\n                            Str.get_string('warningpayload', 'tiny_cursive')\n                        ])\n                            .then(function (results) {\n                                var html = results[0];\n                                var str = results[1];\n                                var updatedHtml = html.replace('No Submission', str);\n                                $('.tiny_cursive').html(updatedHtml);\n                                return true;\n                            })\n                            .catch(function (error) {\n                                window.console.error(error);\n                            });\n                    } catch (error) {\n                        window.console.error(error);\n                    }\n                }\n                return data;\n            })\n            .catch(error => {\n                try {\n                    // eslint-disable-next-line\n                    Promise.all([\n                        templates.render('tiny_cursive/no_submission'),\n                        Str.get_string('warningpayload', 'tiny_cursive')\n                    ])\n                        .then(function (results) {\n                            var html = results[0];\n                            var str = results[1];\n                            var updatedHtml = html.replace('No Submission', str);\n                            $('.tiny_cursive').html(updatedHtml);\n                            return true;\n                        })\n                        .catch(function (error) {\n                            window.console.error(error);\n                        });\n                } catch (error) {\n                    window.console.error(error);\n                }\n                window.console.error('Error loading JSON file: ' + error.message);\n            });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n            const playSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\"\n            viewBox=\"0 0 24 24\" fill=\"white\" stroke=\"white\" stroke-width=\"2\">\n            <polygon points=\"5,3 19,12 5,21\" />\n            </svg>`;\n            if (this.playButton) {\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg;\n            }\n        }\n    }\n\n    constructController(controllerId) {\n        this.replayInProgress = false;\n        this.currentPosition = 0;\n        this.speed = 1;\n        if (this.replayIntervalId) {\n            clearInterval(this.replayIntervalId);\n            this.replayIntervalId = null;\n        }\n        const container = document.getElementById(controllerId);\n        if (!container) {\n            window.console.error(\"Container element not found with ID:\", controllerId);\n            return;\n        }\n        // Clean up any existing controls first\n        const existingControls = container.querySelectorAll('.replay-control');\n        existingControls.forEach(control => control.remove());\n        // Create a container for all controls\n        const controlContainer = document.createElement('div');\n        controlContainer.className = 'replay-control';\n        controlContainer.style.display = 'flex';\n        controlContainer.style.flexDirection = 'column';\n        controlContainer.style.gap = '10px';\n        controlContainer.style.margin = '10px 0';\n        controlContainer.style.alignItems = 'center';\n        controlContainer.style.padding = '12px';\n        controlContainer.style.borderRadius = '8px';\n        controlContainer.style.backgroundColor = '#f8f9fa';\n        controlContainer.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';\n        controlContainer.style.width = '100%';\n\n        // Create first row for play button and scrubber\n        const topRow = document.createElement('div');\n        topRow.style.display = 'flex';\n        topRow.style.width = '100%';\n        topRow.style.gap = '12px';\n        topRow.style.alignItems = 'center';\n\n        // Create play button\n        this.playButton = document.createElement('button');\n        this.playButton.className = 'play-button';\n        this.playButton.style.minWidth = '42px';\n        this.playButton.style.height = '42px';\n        this.playButton.style.borderRadius = '50%';\n        this.playButton.style.background = '#4285f4';\n        this.playButton.style.color = 'white';\n        this.playButton.style.border = 'none';\n        this.playButton.style.cursor = 'pointer';\n        this.playButton.style.display = 'flex';\n        this.playButton.style.alignItems = 'center';\n        this.playButton.style.justifyContent = 'center';\n        this.playButton.style.transition = 'background-color 0.2s, transform 0.1s';\n        this.playButton.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n        this.playButton.style.flexShrink = '0';\n\n        const playSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\"\n        viewBox=\"0 0 24 24\" fill=\"white\" stroke=\"white\" stroke-width=\"2\">\n        <polygon points=\"5,3 19,12 5,21\" />\n        </svg>`;\n        this.playButton.innerHTML = `<span class=\"play-icon\">${playSvg}</span>`;\n        this.playButton.addEventListener('mouseover', () => {\n            this.playButton.style.background = '#3367d6';\n            this.playButton.style.transform = 'scale(1.05)';\n        });\n        this.playButton.addEventListener('mouseout', () => {\n            this.playButton.style.background = '#4285f4';\n            this.playButton.style.transform = 'scale(1)';\n        });\n        this.playButton.addEventListener('click', () => {\n            if (this.replayInProgress) {\n                this.stopReplay();\n                const playSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\"\n                viewBox=\"0 0 24 24\" fill=\"white\" stroke=\"white\" stroke-width=\"2\">\n                <polygon points=\"5,3 19,12 5,21\" />\n                </svg>`;\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg;\n            } else {\n                this.startReplay(false);\n            }\n        });\n        topRow.appendChild(this.playButton);\n\n        // Create timeline scrubber\n        const scrubberContainer = document.createElement('div');\n        scrubberContainer.style.flexGrow = '1';\n        scrubberContainer.style.width = '100%';\n\n        this.scrubberElement = document.createElement('input');\n        this.scrubberElement.type = 'range';\n        this.scrubberElement.id = 'timelineScrubber';\n        this.scrubberElement.className = 'timeline-scrubber';\n        this.scrubberElement.min = '0';\n        this.scrubberElement.max = '100';\n        this.scrubberElement.value = '0';\n        this.scrubberElement.style.width = '100%';\n        this.scrubberElement.style.height = '8px';\n        this.scrubberElement.style.borderRadius = '4px';\n        this.scrubberElement.style.accentColor = '#4285f4';\n        this.scrubberElement.addEventListener('input', () => {\n            const scrubberValue = parseInt(this.scrubberElement.value, 10);\n            this.skipToTime(scrubberValue);\n        });\n\n        scrubberContainer.appendChild(this.scrubberElement);\n        topRow.appendChild(scrubberContainer);\n\n        // Create second row for speed controls and time display\n        const bottomRow = document.createElement('div');\n        bottomRow.style.display = 'flex';\n        bottomRow.style.width = '100%';\n        bottomRow.style.justifyContent = 'space-between';\n        bottomRow.style.alignItems = 'center';\n        bottomRow.style.marginTop = '5px';\n\n        // Create Speed controls\n        const speedContainer = document.createElement('div');\n        speedContainer.className = 'speed-controls';\n        speedContainer.style.display = 'flex';\n        speedContainer.style.gap = '6px';\n        speedContainer.style.flexShrink = '0';\n\n        // Create a single button like container for speed options\n        const speedGroup = document.createElement('div');\n        speedGroup.style.display = 'flex';\n        speedGroup.style.borderRadius = '6px';\n        speedGroup.style.overflow = 'hidden';\n        speedGroup.style.border = '1px solid #e0e0e0';\n\n        [1, 1.5, 2, 5, 10].forEach(speedValue => {\n            const speedBtn = document.createElement('button');\n            speedBtn.textContent = `${speedValue}x`;\n            speedBtn.className = `speed-btn ${parseFloat(speedValue) === parseFloat(this.speed) ? 'active' : ''}`;\n            speedBtn.style.padding = '6px 12px';\n            speedBtn.style.border = 'none';\n            speedBtn.style.borderRight = speedValue !== 10 ? '1px solid #e0e0e0' : 'none';\n            speedBtn.style.background = parseFloat(speedValue) === parseFloat(this.speed) ? '#4285f4' : 'white';\n            speedBtn.style.color = parseFloat(speedValue) === parseFloat(this.speed) ? 'white' : '#333';\n            speedBtn.style.cursor = 'pointer';\n            speedBtn.style.fontSize = '13px';\n            speedBtn.style.fontWeight = '500';\n            speedBtn.style.transition = 'background 0.2s, color 0.2s';\n            speedBtn.dataset.speed = speedValue;\n            speedBtn.addEventListener('mouseover', () => {\n                if (!speedBtn.classList.contains('active')) {\n                    speedBtn.style.background = '#f1f3f4';\n                }\n            });\n            speedBtn.addEventListener('mouseout', () => {\n                if (!speedBtn.classList.contains('active')) {\n                    speedBtn.style.background = 'white';\n                }\n            });\n            speedBtn.addEventListener('click', () => {\n                document.querySelectorAll('.speed-btn').forEach(btn => {\n                    btn.style.background = 'white';\n                    btn.style.color = '#333';\n                    btn.classList.remove('active');\n                });\n                speedBtn.style.background = '#4285f4';\n                speedBtn.style.color = 'white';\n                speedBtn.classList.add('active');\n                this.speed = parseFloat(speedBtn.dataset.speed);\n                // Restart to apply the new speed\n                const wasPlaying = this.replayInProgress;\n                if (wasPlaying) {\n                    this.stopReplay();\n                    this.startReplay(false);\n                }\n            });\n            speedGroup.appendChild(speedBtn);\n        });\n\n        speedContainer.appendChild(speedGroup);\n        bottomRow.appendChild(speedContainer);\n\n        // Add time display\n        this.timeDisplay = document.createElement('div');\n        this.timeDisplay.className = 'time-display';\n        this.timeDisplay.textContent = '00:00 / 00:00';\n        this.timeDisplay.style.fontSize = '14px';\n        this.timeDisplay.style.fontFamily = 'monospace';\n        this.timeDisplay.style.color = '#333';\n        this.timeDisplay.style.backgroundColor = '#f1f3f4';\n        this.timeDisplay.style.padding = '5px 10px';\n        this.timeDisplay.style.borderRadius = '4px';\n        this.timeDisplay.style.flexShrink = '0';\n        this.timeDisplay.style.minWidth = '110px';\n        this.timeDisplay.style.textAlign = 'center';\n\n        bottomRow.appendChild(this.timeDisplay);\n\n        // Add rows to container\n        controlContainer.appendChild(topRow);\n        controlContainer.appendChild(bottomRow);\n\n        // Add the controls container to main container\n        container.insertBefore(controlContainer, container.firstChild);\n\n        // Set styles for the output element to handle text wrapping\n        if (this.outputElement) {\n            this.outputElement.style.whiteSpace = 'pre-wrap';\n            this.outputElement.style.wordBreak = 'break-word';\n            this.outputElement.style.maxWidth = '100%';\n            this.outputElement.style.overflow = 'auto';\n            this.outputElement.style.fontFamily = 'monospace';\n            this.outputElement.style.padding = '10px';\n            this.outputElement.style.border = '1px solid #e0e0e0';\n            this.outputElement.style.borderRadius = '4px';\n            this.outputElement.style.minHeight = '100px';\n            this.outputElement.style.backgroundColor = '#fff';\n        }\n\n        // Add persistent styles only once\n        if (!document.getElementById('tiny_cursive-replay-control-styles')) {\n            const styleElement = document.createElement('style');\n            styleElement.id = 'tiny_cursive-replay-control-styles';\n            styleElement.textContent = `\n                .tiny_cursive-replay-control {\n                    margin: 10px 0;\n                    padding: 12px;\n                    border-radius: 8px;\n                    background-color: #f8f9fa;\n                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n                    transition: box-shadow 0.3s ease;\n                    width: 100%;\n                    box-sizing: border-box;\n                }\n    \n                .tiny_cursive-replay-control:hover {\n                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n                }\n    \n                .tiny_cursive-highlighted-char {\n                    color: #34a853;\n                    font-weight: bold;\n                    transition: opacity 0.3s ease, color 0.3s ease;\n                }\n    \n                .tiny_cursive-deleted-char {\n                    color: #ea4335;\n                    text-decoration: line-through;\n                    opacity: 0.5;\n                    transition: opacity 0.3s ease;\n                }\n    \n                .tiny_cursive-cursor {\n                    display: inline-block;\n                    width: 2px;\n                    height: 1.2em;\n                    background-color: #4285f4;\n                    animation: tiny_cursive-blink 1s infinite;\n                    vertical-align: middle;\n                    border-radius: 1px;\n                }\n    \n                @keyframes tiny_cursive-blink {\n                    0%, 100% { opacity: 1; }\n                    50% { opacity: 0; }\n                }\n    \n                .tiny_cursive-timeline-scrubber {\n                    width: 100%;\n                    height: 8px;\n                    border-radius: 4px;\n                    appearance: none;\n                    background: #e0e0e0;\n                    transition: background 0.2s;\n                }\n    \n                .tiny_cursive-timeline-scrubber:hover {\n                    background: #d0d0d0;\n                }\n    \n                .tiny_cursive-timeline-scrubber::-webkit-slider-thumb {\n                    appearance: none;\n                    width: 16px;\n                    height: 16px;\n                    border-radius: 50%;\n                    background: #4285f4;\n                    cursor: pointer;\n                    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n                    transition: transform 0.1s, box-shadow 0.1s;\n                }\n    \n                .tiny_cursive-timeline-scrubber::-webkit-slider-thumb:hover {\n                    transform: scale(1.1);\n                    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n                }\n    \n                .tiny_cursive-timeline-scrubber::-moz-range-thumb {\n                    width: 16px;\n                    height: 16px;\n                    border-radius: 50%;\n                    background: #4285f4;\n                    cursor: pointer;\n                    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n                    transition: transform 0.1s;\n                }\n    \n                .tiny_cursive-timeline-scrubber::-moz-range-thumb:hover {\n                    transform: scale(1.1);\n                    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n                }\n    \n                .tiny_cursive-speed-btn.active {\n                    background: #4285f4 !important;\n                    color: white !important;\n                    font-weight: 500;\n                }\n            `;\n            document.head.appendChild(styleElement);\n        }\n    }\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n\n            if (this.timeDisplay) {\n                const currentTimeFormatted = this.formatTime(this.currentTime);\n                const totalTimeFormatted = this.formatTime(this.totalDuration);\n                this.timeDisplay.textContent = `${currentTimeFormatted} / ${totalTimeFormatted}`;\n            }\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response => {\n            return response;\n        }).fail(error => {\n            throw new Error('Error loading JSON file: ' + error.message);\n        });\n    }\n\n    formatTime(ms) {\n        const seconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n\n    // Call this to make a \"start\" or \"start over\" function\n    startReplay(reset = true) {\n        // Clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        const atEnd = (this.totalDuration > 0 && this.currentTime >= this.totalDuration) ||\n            (this.currentEventIndex >= this.totalEvents);\n        if (atEnd && !reset) {\n            reset = true;\n        }\n        this.replayInProgress = true;\n        if (reset) {\n            this.outputElement.innerHTML = '';\n            this.text = '';\n            this.cursorPosition = 0;\n            this.currentEventIndex = 0;\n            this.currentTime = 0;\n            this.highlightedChars = [];\n            this.deletedChars = [];\n        }\n        if (this.playButton) {\n            const pauseSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\"\n            viewBox=\"0 0 24 24\" fill=\"white\" stroke=\"white\" stroke-width=\"2\">\n            <rect x=\"6\" y=\"4\" width=\"4\" height=\"16\" />\n            <rect x=\"14\" y=\"4\" width=\"4\" height=\"16\" />\n            </svg>`;\n            this.playButton.querySelector('.play-icon').innerHTML = pauseSvg;\n        }\n        this.replayLog();\n    }\n\n    // Called by startReplay() to recursively call through keydown events\n    replayLog() {\n        if (!this.replayInProgress) {\n            this.updateDisplayText(this.text, this.cursorPosition, [], []);\n            return;\n        }\n\n        while (this.currentEventIndex < this.logData.length) {\n            const event = this.logData[this.currentEventIndex];\n\n            if (event.normalizedTime && event.normalizedTime > this.currentTime) {\n                break;\n            }\n\n            let text = this.text || '';\n            let cursor = this.cursorPosition || 0;\n            let updatedHighlights = [...this.highlightedChars];\n            let updatedDeleted = [...this.deletedChars];\n\n            // Always update cursor position based on rePosition if available\n            if (event.rePosition !== undefined) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                }\n                else if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    // Handle Control+Backspace word deletion\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            updatedDeleted.push({\n                                index: wordStart + i,\n                                char: wordToDelete[i],\n                                time: this.currentTime,\n                                expiresAt: this.currentTime + 2000\n                            });\n                        }\n                        // Remove the word\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                else if (event.key === \"Backspace\") {\n                    if (cursor > 0) {\n                        // Store the character being deleted\n                        updatedDeleted.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 2000 // Make deletions visible for 2 seconds\n                        });\n                        // Remove the character before cursor\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor--;\n                    }\n                }\n                else if (event.key === \"ArrowLeft\") {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                else if (event.key === \"ArrowRight\") {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                else if (charToInsert !== null && charToInsert !== \"\") {\n                    // Insert the character at cursor position\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    // Highlight non-space characters\n                    if (charToInsert.trim() !== \"\") {\n                        updatedHighlights.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 1500 // Make highlights visible for 1.5 seconds\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.text = text;\n            this.cursorPosition = cursor;\n\n            // Filter out expired highlights and deletions\n            this.highlightedChars = updatedHighlights.filter(h =>\n                !h.expiresAt || h.expiresAt > this.currentTime\n            );\n\n            this.deletedChars = updatedDeleted.filter(d =>\n                !d.expiresAt || d.expiresAt > this.currentTime\n            );\n\n            this.currentEventIndex++;\n        }\n\n        this.updateDisplayText(this.text, this.cursorPosition, this.highlightedChars, this.deletedChars);\n\n        // Update timeline\n        if (this.totalDuration > 0) {\n            const percentComplete = Math.min((this.currentTime / this.totalDuration) * 100, 100);\n            this.setScrubberVal(percentComplete);\n        }\n\n        // Continue or stop replay\n        if (this.replayInProgress) {\n            const baseIncrement = 100;\n            const incrementTime = baseIncrement / this.speed;\n            this.currentTime += baseIncrement;\n\n            if (this.currentEventIndex >= this.totalEvents) {\n                if (this.loop) {\n                    this.startReplay();\n                } else {\n                    this.stopReplay();\n                    this.updateDisplayText(this.text, this.cursorPosition, [], []);\n                }\n            } else {\n                this.replayTimeout = setTimeout(() => this.replayLog(), incrementTime);\n            }\n        }\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        const wasPlaying = this.replayInProgress;\n        if (wasPlaying) {\n            this.replayInProgress = false;\n            clearTimeout(this.replayTimeout);\n        }\n\n        const targetTime = (this.totalDuration * percentage) / 100;\n        this.currentTime = targetTime;\n        this.currentEventIndex = 0;\n        this.text = '';\n        this.cursorPosition = 0;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n\n        let text = '';\n        let cursor = 0;\n\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.normalizedTime && event.normalizedTime > targetTime) {\n                this.currentEventIndex = i;\n                break;\n            }\n\n            if (event.rePosition !== undefined) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                }\n                else if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            this.deletedChars.push({\n                                index: wordStart + i,\n                                char: wordToDelete[i],\n                                time: targetTime,\n                                expiresAt: targetTime + 2000\n                            });\n                        }\n\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                else if (event.key === \"Backspace\") {\n                    if (cursor > 0) {\n                        this.deletedChars.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: targetTime,\n                            expiresAt: targetTime + 1000\n                        });\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor = Math.max(0, cursor - 1);\n                    }\n                }\n                else if (event.key === \"ArrowLeft\") {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                else if (event.key === \"ArrowRight\") {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                else if (charToInsert && charToInsert.length > 0) {\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    if (charToInsert.trim() !== \"\") {\n                        this.highlightedChars.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: targetTime,\n                            expiresAt: targetTime + 1000\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.currentEventIndex = i + 1;\n        }\n\n        this.text = text;\n        this.cursorPosition = cursor;\n        this.updateDisplayText(text, cursor, this.highlightedChars, this.deletedChars);\n        this.setScrubberVal(percentage);\n\n        if (wasPlaying) {\n            this.replayInProgress = true;\n            this.replayLog();\n        }\n    }\n\n\n    // Update display with text, cursor, highlights and deletions\n    updateDisplayText(text, cursorPosition, highlights, deletions) {\n        let html = '';\n        const highlightMap = {};\n        const deletionMap = {};\n        const currentTime = this.currentTime;\n\n        highlights.forEach(h => {\n            let opacity = 1;\n            if (h.expiresAt) {\n                const timeRemaining = h.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, timeRemaining / 500);\n                }\n            }\n            highlightMap[h.index] = { char: h.char, opacity: opacity };\n        });\n\n        deletions.forEach(d => {\n            let opacity = 0.5;\n            if (d.expiresAt) {\n                const timeRemaining = d.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, (timeRemaining / 500) * 0.5);\n                }\n            }\n            deletionMap[d.index] = { char: d.char, opacity: opacity };\n        });\n\n        // Find if we have out-of-bounds deletions (from Control+Backspace)\n        const outOfRangeDeletions = deletions.filter(d => d.index >= text.length);\n\n        const textLines = text.split('\\n');\n        let currentPosition = 0;\n\n        for (let lineIndex = 0; lineIndex < textLines.length; lineIndex++) {\n            const line = textLines[lineIndex];\n\n            for (let i = 0; i < line.length; i++) {\n                if (currentPosition === cursorPosition) {\n                    html += '<span class=\"tiny_cursive-cursor\">|</span>';\n                }\n\n                const char = line[i];\n\n                if (deletionMap[currentPosition]) {\n                    const deletion = deletionMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-deleted-char\" style=\"opacity: ${deletion.opacity};\">${deletion.char}</span>`;\n                }\n\n                if (highlightMap[currentPosition] && char !== ' ') {\n                    const highlight = highlightMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-highlighted-char\" style=\"opacity: ${highlight.opacity};\">${char}</span>`;\n                } else {\n                    html += char === ' ' ? '&nbsp;' : this.escapeHtml(char);\n                }\n\n                currentPosition++;\n            }\n\n            if (currentPosition === cursorPosition) {\n                html += '<span class=\"tiny_cursive-cursor\">|</span>';\n            }\n\n            if (lineIndex < textLines.length - 1) {\n                html += '<br>';\n                currentPosition++;\n            }\n        }\n\n        if (cursorPosition === text.length && !html.endsWith('<span class=\"tiny_cursive-cursor\">|</span>')) {\n            html += '<span class=\"tiny_cursive-cursor\">|</span>';\n        }\n\n        // For control + backspace functionalities\n        if (outOfRangeDeletions.length > 0) {\n            outOfRangeDeletions.sort((a, b) => a.index - b.index);\n\n            const cursorHTML = '<span class=\"tiny_cursive-cursor\">|</span>';\n            let cursorPos = html.lastIndexOf(cursorHTML);\n\n            if (cursorPos !== -1) {\n                let deletedWordHTML = '<span class=\"tiny_cursive-deleted-char\" style=\"opacity: 0.5;\">';\n                outOfRangeDeletions.forEach(d => {\n                    deletedWordHTML += d.char;\n                });\n                deletedWordHTML += '</span>';\n                html = html.substring(0, cursorPos) + deletedWordHTML + html.substring(cursorPos);\n            }\n        }\n\n        const wasScrolledToBottom = this.outputElement.scrollHeight -\n            this.outputElement.clientHeight <= this.outputElement.scrollTop + 1;\n\n        this.outputElement.innerHTML = html;\n\n        if (wasScrolledToBottom || this.isCursorBelowViewport()) {\n            this.outputElement.scrollTop = this.outputElement.scrollHeight;\n        }\n    }\n\n    // Check if cursor is below visible viewport\n    isCursorBelowViewport() {\n        const cursorElement = this.outputElement.querySelector('.tiny_cursive-cursor:last-of-type');\n        if (!cursorElement) {\n            return false;\n        }\n\n        const cursorRect = cursorElement.getBoundingClientRect();\n        const outputRect = this.outputElement.getBoundingClientRect();\n\n        return cursorRect.bottom > outputRect.bottom;\n    }\n\n    escapeHtml(unsafe) {\n        return unsafe\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    // Used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key) {\n        switch (key) {\n            case \"Enter\":\n                return \"\\n\";\n            case \"Backspace\":\n                return \"\";\n            case \"ControlBackspace\":\n                return \"\";\n            case \" \":\n                return \" \";\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\",\n                    \"ArrowLeft\", \"Meta\", \"CapsLock\", \"Tab\", \"Escape\", \"Delete\", \"PageUp\", \"PageDown\",\n                    \"Insert\", \"Home\", \"End\", \"NumLock\"]\n                    .includes(key) ? key : \"\";\n        }\n    }\n}"],"names":["constructor","elementId","filePath","speed","loop","controllerId","replayInProgress","parseFloat","highlightedChars","deletedChars","cursorPosition","currentEventIndex","totalEvents","currentTime","totalDuration","element","document","getElementById","Error","outputElement","style","whiteSpace","wordBreak","maxWidth","overflow","fontFamily","padding","border","borderRadius","minHeight","backgroundColor","constructController","loadJSON","then","data","status","val","JSON","parse","logData","this","payload","length","unixTimestamp","startTime","map","event","normalizedTime","startReplay","Promise","all","templates","render","Str","get_string","results","html","str","updatedHtml","replace","catch","error","window","console","message","stopReplay","clearTimeout","replayTimeout","playSvg","playButton","querySelector","innerHTML","currentPosition","replayIntervalId","clearInterval","container","querySelectorAll","forEach","control","remove","controlContainer","createElement","className","display","flexDirection","gap","margin","alignItems","boxShadow","width","topRow","minWidth","height","background","color","cursor","justifyContent","transition","flexShrink","addEventListener","transform","appendChild","scrubberContainer","flexGrow","scrubberElement","type","id","min","max","value","accentColor","scrubberValue","parseInt","skipToTime","bottomRow","marginTop","speedContainer","speedGroup","speedValue","speedBtn","textContent","borderRight","fontSize","fontWeight","dataset","classList","contains","btn","add","timeDisplay","textAlign","insertBefore","firstChild","styleElement","head","setScrubberVal","String","currentTimeFormatted","formatTime","totalTimeFormatted","methodname","args","filepath","done","response","fail","ms","seconds","Math","floor","minutes","remainingSeconds","toString","padStart","reset","text","pauseSvg","replayLog","updatedHighlights","updatedDeleted","undefined","rePosition","toLowerCase","charToInsert","applyKey","key","isControlKeyPressed","wordStart","wordToDelete","substring","i","push","index","char","time","expiresAt","trim","filter","h","d","updateDisplayText","percentComplete","baseIncrement","incrementTime","setTimeout","skipToEnd","textOutput","slice","percentage","wasPlaying","targetTime","highlights","deletions","highlightMap","deletionMap","opacity","timeRemaining","outOfRangeDeletions","textLines","split","lineIndex","line","deletion","highlight","escapeHtml","endsWith","sort","a","b","cursorHTML","cursorPos","lastIndexOf","deletedWordHTML","wasScrolledToBottom","scrollHeight","clientHeight","scrollTop","isCursorBelowViewport","cursorElement","cursorRect","getBoundingClientRect","outputRect","bottom","unsafe","includes"],"mappings":"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"}