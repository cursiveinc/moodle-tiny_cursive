{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport {call as fetchJson} from 'core/ajax';\nimport templates from 'core/templates';\nimport $ from 'jquery';\nimport * as Str from 'core/str';\n\nexport default class Replay {\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        // Initialize core properties\n        this.controllerId = controllerId || '';\n        this.replayInProgress = false;\n        this.speed = parseFloat(speed);\n        this.loop = loop;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.cursorPosition = 0;\n        this.currentEventIndex = 0;\n        this.totalEvents = 0;\n        this.currentTime = 0;\n        this.totalDuration = 0;\n        this.usercomments = [];\n        this.pasteTimestamps = [];\n        this.isPasteEvent = false;\n        this.isControlKeyPressed = false;\n        this.text = '';\n\n        const element = document.getElementById(elementId);\n        if (!element) {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n        this.outputElement = element;\n\n        // Load JSON data and initialize replay\n        this.loadJSON(filePath).then(data => {\n            if (data.status) {\n                this.processData(data);\n                this.totalEvents = this.logData.length;\n                this.identifyPasteEvents();\n                if (this.controllerId && this.logData) {\n                    this.constructController(this.controllerId);\n                }\n                this.startReplay();\n            } else {\n                this.handleNoSubmission();\n            }\n            return data;\n        }).catch(error => {\n            this.handleError(error);\n        });\n    }\n\n    // Process JSON data and normalize timestamps\n    processData(data) {\n        this.logData = JSON.parse(data.data);\n        if (data.comments) {\n            this.usercomments = Array.isArray(JSON.parse(data.comments)) ? JSON.parse(data.comments) : [];\n        }\n        if ('data' in this.logData) {\n            this.logData = this.logData.data;\n        }\n        if ('payload' in this.logData) {\n            this.logData = this.logData.payload;\n        }\n        if (this.logData.length > 0 && this.logData[0].unixTimestamp) {\n            const startTime = this.logData[0].unixTimestamp;\n            this.logData = this.logData.map(event => ({\n                ...event,\n                normalizedTime: event.unixTimestamp - startTime\n            }));\n            this.totalDuration = this.logData[this.logData.length - 1].normalizedTime;\n        }\n    }\n\n    handleNoSubmission() {\n        Promise.all([\n            templates.render('tiny_cursive/no_submission'),\n            Str.get_string('warningpayload', 'tiny_cursive')\n        ]).then(([html, str]) => {\n            const newElement = $(html).text(str);\n            $('.tiny_cursive').html(newElement);\n        }).catch(error => {\n            window.console.error(error);\n        });\n    }\n\n    handleError(error) {\n        Promise.all([\n            templates.render('tiny_cursive/no_submission'),\n            Str.get_string('warningpayload', 'tiny_cursive')\n        ]).then(([html, str]) => {\n            const newElement = $(html).text(str);\n            $('.tiny_cursive').html(newElement);\n        }).catch(error => {\n            window.console.error(error);\n        });\n        window.console.error('Error loading JSON file:', error.message);\n    }\n\n    // Stop the replay and update play button icon\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n            if (this.playButton) {\n                const playSvg = document.createElement('img');\n                playSvg.src = M.util.image_url('playicon', 'tiny_cursive');\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg.outerHTML;\n            }\n        }\n    }\n\n    // Build the replay control UI (play button, scrubber, speed controls)\n    constructController(controllerId) {\n        this.replayInProgress = false;\n        this.currentPosition = 0;\n        this.speed = 1;\n        if (this.replayIntervalId) {\n            clearInterval(this.replayIntervalId);\n            this.replayIntervalId = null;\n        }\n\n        const container = document.getElementById(controllerId);\n        if (!container) {\n            window.console.error('Container not found with ID:', controllerId);\n            return;\n        }\n\n        const controlContainer = container.querySelector('.tiny_cursive_replay_control');\n        if (!controlContainer) {\n            window.console.error('Replay control container not found in:', controllerId);\n            return;\n        }\n        controlContainer.innerHTML = '<span class=\"tiny_cursive_loading_spinner\"></span>';\n\n        this.buildControllerUI(controlContainer, container);\n        controlContainer.querySelector('.tiny_cursive_loading_spinner')?.remove();\n    }\n\n    buildControllerUI(controlContainer, container) {\n        const topRow = document.createElement('div');\n        topRow.classList.add('tiny_cursive_top_row');\n\n        this.playButton = this.createPlayButton();\n        topRow.appendChild(this.playButton);\n\n        const scrubberContainer = this.createScrubberContainer();\n        topRow.appendChild(scrubberContainer);\n\n        this.timeDisplay = this.createTimeDisplay();\n        topRow.appendChild(this.timeDisplay);\n\n        const bottomRow = document.createElement('div');\n        bottomRow.classList.add('tiny_cursive_bottom_row');\n\n        const speedContainer = this.createSpeedControls();\n        bottomRow.appendChild(speedContainer);\n\n        const pasteEventsToggle = this.createPasteEventsToggle(container);\n        bottomRow.appendChild(pasteEventsToggle);\n\n        controlContainer.appendChild(topRow);\n        controlContainer.appendChild(bottomRow);\n        container.appendChild(this.pasteEventsPanel);\n    }\n\n    createPlayButton() {\n        const playButton = document.createElement('button');\n        playButton.classList.add('tiny_cursive_play_button');\n        const playSvg = document.createElement('i');\n        playButton.innerHTML = `<span class=\"play-icon\">${playSvg.outerHTML}</span>`;\n        playButton.addEventListener('click', () => {\n            if (this.replayInProgress) {\n                this.stopReplay();\n            } else {\n                this.startReplay(false);\n            }\n            $('.tiny_cursive-nav-tab').find('.active').removeClass('active');\n            $('a[id^=\"rep\"]').addClass('active');\n        });\n        return playButton;\n    }\n\n    createScrubberContainer() {\n        const scrubberContainer = document.createElement('div');\n        scrubberContainer.classList.add('tiny_cursive_scrubber_container');\n        this.scrubberElement = document.createElement('input');\n        this.scrubberElement.classList.add('tiny_cursive_timeline_scrubber', 'timeline-scrubber');\n        this.scrubberElement.type = 'range';\n        this.scrubberElement.max = '100';\n        this.scrubberElement.min = '0';\n        this.scrubberElement.value = '0';\n        this.scrubberElement.addEventListener('input', () => {\n            this.skipToTime(parseInt(this.scrubberElement.value, 10));\n        });\n        scrubberContainer.appendChild(this.scrubberElement);\n        return scrubberContainer;\n    }\n\n    createTimeDisplay() {\n        const timeDisplay = document.createElement('div');\n        timeDisplay.classList.add('tiny_cursive_time_display');\n        timeDisplay.textContent = '00:00 / 00:00';\n        return timeDisplay;\n    }\n\n    createSpeedControls() {\n        const speedContainer = document.createElement('div');\n        speedContainer.classList.add('tiny_cursive_speed_controls', 'speed-controls');\n        const speedLabel = document.createElement('span');\n        speedLabel.classList.add('tiny_cursive_speed_label');\n        speedLabel.textContent = 'Speed: ';\n        speedContainer.appendChild(speedLabel);\n\n        const speedGroup = document.createElement('div');\n        speedGroup.classList.add('tiny_cursive_speed_group');\n        [1, 1.5, 2, 5, 10].forEach(speed => {\n            const speedBtn = document.createElement('button');\n            speedBtn.textContent = `${speed}x`;\n            speedBtn.classList.add('tiny_cursive_speed_btn', 'speed-btn');\n            if (parseFloat(speed) === this.speed) {\n                speedBtn.classList.add('active');\n            }\n            speedBtn.dataset.speed = speed;\n            speedBtn.addEventListener('click', () => {\n                document.querySelectorAll('.tiny_cursive_speed_btn').forEach(btn => btn.classList.remove('active'));\n                speedBtn.classList.add('active');\n                this.speed = parseFloat(speedBtn.dataset.speed);\n                if (this.replayInProgress) {\n                    this.stopReplay();\n                    this.startReplay(false);\n                }\n            });\n            speedGroup.appendChild(speedBtn);\n        });\n        speedContainer.appendChild(speedGroup);\n        return speedContainer;\n    }\n\n    createPasteEventsToggle(container) {\n        const pasteEventsToggle = document.createElement('div');\n        pasteEventsToggle.classList.add('tiny_cursive_paste_events_toggle', 'paste-events-toggle');\n\n        const pasteEventsIcon = document.createElement('span');\n        const pasteIcon = document.createElement('img');\n        pasteIcon.src = M.util.image_url('pasteicon', 'tiny_cursive');\n        pasteEventsIcon.innerHTML = pasteIcon.outerHTML;\n        pasteEventsIcon.classList.add('tiny_cursive_paste_events_icon');\n\n        const pasteEventsText = document.createElement('span');\n        pasteEventsText.textContent = 'Paste Events';\n\n        this.pasteEventCount = document.createElement('span');\n        this.pasteEventCount.textContent = `(${this.usercomments.length})`;\n        this.pasteEventCount.className = 'paste-event-count';\n        this.pasteEventCount.style.marginLeft = '2px';\n\n        const chevronIcon = document.createElement('span');\n        const chevron = document.createElement('i');\n        chevron.className = 'fa fa-chevron-down';\n        chevronIcon.innerHTML = chevron.outerHTML;\n        chevronIcon.style.marginLeft = '5px';\n        chevronIcon.style.transition = 'transform 0.3s ease';\n\n        pasteEventsToggle.appendChild(pasteEventsIcon);\n        pasteEventsToggle.appendChild(pasteEventsText);\n        pasteEventsToggle.appendChild(this.pasteEventCount);\n        pasteEventsToggle.appendChild(chevronIcon);\n\n        this.pasteEventsPanel = this.createPasteEventsPanel(container);\n        pasteEventsToggle.addEventListener('click', () => {\n            const isHidden = this.pasteEventsPanel.style.display === 'none';\n            this.pasteEventsPanel.style.display = isHidden ? 'block' : 'none';\n            chevronIcon.style.transform = isHidden ? 'rotate(180deg)' : 'rotate(0deg)';\n        });\n\n        return pasteEventsToggle;\n    }\n\n    createPasteEventsPanel(container) {\n        const existingPanel = container.querySelector('.paste-events-panel');\n        if (existingPanel) {\n            existingPanel.remove();\n        }\n        const pasteEventsPanel = document.createElement('div');\n        pasteEventsPanel.classList.add('tiny_cursive_paste_events_panel', 'paste-events-panel');\n        pasteEventsPanel.style.display = 'none';\n        this.populatePasteEventsPanel(pasteEventsPanel);\n        return pasteEventsPanel;\n    }\n\n    // Detect Ctrl+V paste events and sync with user comments\n    identifyPasteEvents() {\n        this.pasteTimestamps = [];\n        let controlPressed = false;\n        let pasteCount = 0;\n\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.event?.toLowerCase() === 'keydown') {\n                if (event.key === 'Control') {\n                    controlPressed = true;\n                } else if (event.key === 'v' && controlPressed) {\n                    const timestamp = event.normalizedTime || 0;\n                    this.pasteTimestamps.push({\n                        index: pasteCount,\n                        time: timestamp,\n                        formattedTime: this.formatTime(timestamp),\n                        pastedText: this.usercomments[pasteCount] || '',\n                        timestamp\n                    });\n                    pasteCount++;\n                    controlPressed = false;\n                } else {\n                    controlPressed = false;\n                }\n            }\n        }\n\n        if (this.usercomments.length > 0 && this.pasteTimestamps.length === 0) {\n            this.usercomments.forEach((comment, i) => {\n                this.pasteTimestamps.push({\n                    index: i,\n                    time: 0,\n                    formattedTime: this.formatTime(0),\n                    pastedText: comment,\n                    timestamp: 0\n                });\n            });\n        }\n\n        while (this.pasteTimestamps.length < this.usercomments.length) {\n            const lastIndex = this.pasteTimestamps.length;\n            this.pasteTimestamps.push({\n                index: lastIndex,\n                time: 0,\n                formattedTime: this.formatTime(0),\n                pastedText: this.usercomments[lastIndex],\n                timestamp: 0\n            });\n        }\n\n        if (this.pasteEventsPanel) {\n            this.populatePasteEventsPanel(this.pasteEventsPanel);\n        }\n    }\n\n    // Populate the paste events panel with navigation\n    populatePasteEventsPanel(panel) {\n        panel.innerHTML = '';\n        panel.classList.add('tiny_cursive_event_panel');\n\n        if (!this.pasteTimestamps.length) {\n            const noEventsMessage = document.createElement('div');\n            noEventsMessage.className = 'no-paste-events-message p-3';\n            noEventsMessage.textContent = 'No paste events detected for this submission.';\n            panel.appendChild(noEventsMessage);\n            return;\n        }\n\n        const carouselContainer = document.createElement('div');\n        carouselContainer.classList.add('tiny_cursive_paste_events_carousel', 'paste-events-carousel');\n\n        const navigationRow = document.createElement('div');\n        navigationRow.classList.add('paste-events-navigation', 'tiny_cursive_navigation_row');\n\n        const counterDisplay = document.createElement('div');\n        counterDisplay.classList.add('paste-events-counter', 'tiny_cursive_counter_display');\n        counterDisplay.textContent = 'Paste Events';\n\n        const navButtons = document.createElement('div');\n        navButtons.classList.add('tiny_cursive_nav_buttons');\n        const prevButton = document.createElement('button');\n        prevButton.classList.add('paste-event-prev-btn', 'tiny_cursive_nav_button');\n        prevButton.innerHTML = '<i class=\"fa fa-chevron-left\"></i>';\n\n        const nextButton = document.createElement('button');\n        nextButton.classList.add('paste-event-next-btn', 'tiny_cursive_nav_button');\n        nextButton.innerHTML = '<i class=\"fa fa-chevron-right\"></i>';\n        nextButton.disabled = this.pasteTimestamps.length <= 1;\n\n        navButtons.appendChild(prevButton);\n        navButtons.appendChild(nextButton);\n        navigationRow.appendChild(counterDisplay);\n        navigationRow.appendChild(navButtons);\n\n        const contentContainer = document.createElement('div');\n        contentContainer.className = 'paste-events-content tiny_cursive_content_container';\n        contentContainer.appendChild(this.createPasteEventDisplay(this.pasteTimestamps[0]));\n\n        carouselContainer.appendChild(navigationRow);\n        carouselContainer.appendChild(contentContainer);\n        panel.appendChild(carouselContainer);\n\n        let currentIndex = 0;\n        const updateDisplay = () => {\n            contentContainer.innerHTML = '';\n            contentContainer.appendChild(this.createPasteEventDisplay(this.pasteTimestamps[currentIndex]));\n            counterDisplay.textContent = 'Paste Events';\n            prevButton.disabled = currentIndex === 0;\n            prevButton.style.opacity = currentIndex === 0 ? '0.5' : '1';\n            nextButton.disabled = currentIndex === this.pasteTimestamps.length - 1;\n            nextButton.style.opacity = currentIndex === this.pasteTimestamps.length - 1 ? '0.5' : '1';\n        };\n\n        prevButton.addEventListener('click', () => {\n            if (currentIndex > 0) {\n                currentIndex--;\n                updateDisplay();\n            }\n        });\n\n        nextButton.addEventListener('click', () => {\n            if (currentIndex < this.pasteTimestamps.length - 1) {\n                currentIndex++;\n                updateDisplay();\n            }\n        });\n    }\n\n    createPasteEventDisplay(pasteEvent) {\n        const eventRow = document.createElement('div');\n        eventRow.className = 'tiny_cursive_event_row';\n\n        const headerRow = document.createElement('div');\n        headerRow.className = 'tiny_cursive_header_row';\n\n        const textContainer = document.createElement('div');\n        textContainer.className = 'tiny_cursive_text_container';\n\n        const timestampContainer = document.createElement('div');\n        timestampContainer.className = 'paste-event-timestamp tiny_cursive_paste_event_timestamp';\n        timestampContainer.textContent = pasteEvent.formattedTime;\n\n        const pastedTextContainer = document.createElement('div');\n        pastedTextContainer.className = 'paste-event-text tiny_cursive_pasted_text_container';\n        pastedTextContainer.textContent = pasteEvent.pastedText;\n\n        textContainer.appendChild(timestampContainer);\n        textContainer.appendChild(pastedTextContainer);\n\n        const playButton = document.createElement('button');\n        playButton.className = 'paste-event-play-btn tiny_cursive_seekplay_button';\n        const playIcon = document.createElement('img');\n        playIcon.src = M.util.image_url('seekplayicon', 'tiny_cursive');\n        playButton.innerHTML = playIcon.outerHTML;\n        playButton.addEventListener('click', () => this.jumpToTimestamp(pasteEvent.timestamp));\n\n        headerRow.appendChild(textContainer);\n        headerRow.appendChild(playButton);\n        eventRow.appendChild(headerRow);\n\n        return eventRow;\n    }\n\n    // Jump to a specific timestamp in the replay\n    jumpToTimestamp(timestamp) {\n        const percentage = this.totalDuration > 0 ? (timestamp / this.totalDuration) * 100 : 0;\n        this.skipToTime(percentage);\n        if (!this.replayInProgress) {\n            this.startReplay(false);\n        }\n    }\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n            if (this.timeDisplay) {\n                const displayTime = Math.min(this.currentTime, this.totalDuration);\n                this.timeDisplay.textContent = `${this.formatTime(displayTime)} / ${this.formatTime(this.totalDuration)}`;\n            }\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: { filepath: filePath }\n        }])[0].done(response => response).fail(error => {\n            throw new Error(`Error loading JSON file: ${error.message}`);\n        });\n    }\n\n    formatTime(ms) {\n        const seconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n\n    // Start or restart the replay\n    startReplay(reset = true) {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        const atEnd = (this.totalDuration > 0 && this.currentTime >= this.totalDuration) ||\n            (this.currentEventIndex >= this.totalEvents);\n        if (atEnd && !reset) {\n            reset = true;\n        }\n        this.replayInProgress = true;\n        if (reset) {\n            this.outputElement.innerHTML = '';\n            this.text = '';\n            this.cursorPosition = 0;\n            this.currentEventIndex = 0;\n            this.currentTime = 0;\n            this.highlightedChars = [];\n            this.deletedChars = [];\n            this.isControlKeyPressed = false;\n        }\n        if (this.playButton) {\n            const pauseSvg = document.createElement('i');\n            pauseSvg.className = 'fa fa-pause';\n            this.playButton.querySelector('.play-icon').innerHTML = pauseSvg.outerHTML;\n        }\n        this.replayLog();\n    }\n\n    // Process events in sequence to simulate typing\n    replayLog() {\n        if (!this.replayInProgress) {\n            this.updateDisplayText(this.text, this.cursorPosition, [], []);\n            return;\n        }\n\n        while (this.currentEventIndex < this.logData.length) {\n            const event = this.logData[this.currentEventIndex];\n            if (event.normalizedTime && event.normalizedTime > this.currentTime) {\n                break;\n            }\n\n            let text = this.text || '';\n            let cursor = this.cursorPosition;\n            let updatedHighlights = [...this.highlightedChars];\n            let updatedDeleted = [...this.deletedChars];\n\n            if (event.rePosition !== undefined && (this.currentEventIndex === 0 ||\n                event.event === 'mouseDown' || event.event === 'mouseUp')) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event?.toLowerCase() === 'keydown') {\n                ({text, cursor, updatedHighlights, updatedDeleted } =\n                    this.processKeydownEvent(event, text, cursor, updatedHighlights, updatedDeleted));\n            }\n\n            this.text = text;\n            this.cursorPosition = cursor;\n            this.highlightedChars = updatedHighlights.filter(h => !h.expiresAt || h.expiresAt > this.currentTime);\n            this.deletedChars = updatedDeleted.filter(d => !d.expiresAt || d.expiresAt > this.currentTime);\n\n            this.currentEventIndex++;\n        }\n\n        this.updateDisplayText(this.text, this.cursorPosition, this.highlightedChars, this.deletedChars);\n        if (this.totalDuration > 0) {\n            const percentComplete = Math.min((this.currentTime / this.totalDuration) * 100, 100);\n            this.setScrubberVal(percentComplete);\n        }\n\n        if (this.replayInProgress) {\n            const baseIncrement = 100;\n            const incrementTime = baseIncrement / this.speed;\n            this.currentTime += baseIncrement;\n            if (this.currentEventIndex >= this.totalEvents) {\n                if (this.loop) {\n                    this.startReplay(true);\n                } else {\n                    this.stopReplay();\n                    this.updateDisplayText(this.text, this.cursorPosition, [], []);\n                }\n            } else {\n                this.replayTimeout = setTimeout(() => this.replayLog(), incrementTime);\n            }\n        }\n    }\n\n    // Handle keydown events (e.g., typing, backspace, Ctrl+V)\n    processKeydownEvent(event, text, cursor, highlights, deletions) {\n        const charToInsert = this.applyKey(event.key);\n\n        if (event.key === 'Control') {\n            this.isControlKeyPressed = true;\n        } else if (event.key === 'v' && this.isControlKeyPressed) {\n            this.isPasteEvent = true;\n            this.isControlKeyPressed = false;\n        } else if (!['Control', 'Backspace', 'Delete', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n            this.isControlKeyPressed = false;\n            this.isPasteEvent = false;\n        }\n\n        if (event.key === 'Backspace' && this.isControlKeyPressed) {\n            if (cursor > 0) {\n                let wordStart = cursor;\n                while (wordStart > 0 && text[wordStart - 1] === ' ') { wordStart--; }\n                while (wordStart > 0 && text[wordStart - 1] !== ' ') { wordStart--; }\n                const wordToDelete = text.substring(wordStart, cursor);\n                for (let i = 0; i < wordToDelete.length; i++) {\n                    deletions.push({\n                        index: wordStart + i,\n                        char: wordToDelete[i],\n                        time: this.currentTime,\n                        expiresAt: this.currentTime + 2000\n                    });\n                }\n                text = text.substring(0, wordStart) + text.substring(cursor);\n                cursor = wordStart;\n            }\n        } else if (event.key === 'Delete' && this.isControlKeyPressed) {\n            if (cursor < text.length) {\n                const wordEnd = this.findNextWordBoundary(text, cursor);\n                const wordToDelete = text.substring(cursor, wordEnd);\n                for (let i = 0; i < wordToDelete.length; i++) {\n                    deletions.push({\n                        index: cursor + i,\n                        char: wordToDelete[i],\n                        time: this.currentTime,\n                        expiresAt: this.currentTime + 2000\n                    });\n                }\n                text = text.substring(0, cursor) + text.substring(wordEnd);\n            }\n        } else if (event.key === 'ArrowLeft' && this.isControlKeyPressed) {\n            cursor = this.findPreviousWordBoundary(text, cursor);\n        } else if (event.key === 'ArrowRight' && this.isControlKeyPressed) {\n            cursor = this.findNextWordBoundary(text, cursor);\n        } else if (event.key === 'Backspace' && !this.isPasteEvent) {\n            if (cursor > 0) {\n                deletions.push({\n                    index: cursor - 1,\n                    char: text[cursor - 1],\n                    time: this.currentTime,\n                    expiresAt: this.currentTime + 2000\n                });\n                text = text.substring(0, cursor - 1) + text.substring(cursor);\n                cursor--;\n            }\n        } else if (event.key === 'Delete' && !this.isControlKeyPressed) {\n            if (cursor < text.length) {\n                deletions.push({\n                    index: cursor,\n                    char: text[cursor],\n                    time: this.currentTime,\n                    expiresAt: this.currentTime + 2000\n                });\n                text = text.substring(0, cursor) + text.substring(cursor + 1);\n            }\n        } else if (event.key === 'ArrowLeft' && !this.isControlKeyPressed) {\n            cursor = Math.max(0, cursor - 1);\n        } else if (event.key === 'ArrowRight' && !this.isControlKeyPressed) {\n            cursor = Math.min(text.length, cursor + 1);\n        } else if (charToInsert && charToInsert.length > 0) {\n            text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n            if (charToInsert.trim() !== '') {\n                highlights.push({\n                    index: cursor,\n                    char: charToInsert,\n                    time: this.currentTime,\n                    expiresAt: this.currentTime + 1500\n                });\n            }\n            cursor++;\n        }\n\n        return { text, cursor, updatedHighlights: highlights, updatedDeleted: deletions };\n    }\n\n    // Finds the index of the next word boundary after the cursor position\n    findNextWordBoundary(text, cursor) {\n        if (!text || cursor >= text.length) {\n            return cursor;\n        }\n        if (text[cursor] === ' ') {\n            while (cursor < text.length && text[cursor] === ' ') {\n                 cursor++;\n            }\n        }\n        if (cursor >= text.length) {\n            let lastNonSpace = text.length - 1;\n            while (lastNonSpace >= 0 && text[lastNonSpace] === ' ') {\n                 lastNonSpace--;\n            }\n            return lastNonSpace + 1;\n        }\n        let wordEnd = cursor;\n        while (wordEnd < text.length && text[wordEnd] !== ' ') {\n             wordEnd++;\n         }\n        return wordEnd;\n    }\n\n    // Finds the index of the previous word boundary before the cursor position\n    findPreviousWordBoundary(text, cursor) {\n        if (cursor <= 0) {\n            return 0;\n        }\n        let pos = cursor - 1;\n        while (pos > 0 && (text[pos] === ' ' || text[pos] === '\\n')) {\n             pos--;\n        }\n        while (pos > 0 && text[pos - 1] !== ' ' && text[pos - 1] !== '\\n') {\n             pos--;\n        }\n\n        return pos;\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        const wasPlaying = this.replayInProgress;\n        this.stopReplay();\n\n        const targetTime = (this.totalDuration * percentage) / 100;\n        this.currentTime = targetTime;\n        this.currentEventIndex = 0;\n        this.text = '';\n        this.cursorPosition = 0;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.isControlKeyPressed = false;\n        this.isPasteEvent = false;\n\n        let text = '';\n        let cursor = 0;\n        let highlights = [];\n        let deletions = [];\n\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.normalizedTime && event.normalizedTime > targetTime) {\n                this.currentEventIndex = i;\n                break;\n            }\n            if (event.rePosition !== undefined && (i === 0 || event.event === 'mouseDown' || event.event === 'mouseUp')) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n            if (event.event?.toLowerCase() === 'keydown') {\n                ({ text, cursor, updatedHighlights: highlights, updatedDeleted: deletions } =\n                    this.processKeydownEvent(event, text, cursor, highlights, deletions));\n            }\n            this.currentEventIndex = i + 1;\n        }\n\n        this.text = text;\n        this.cursorPosition = cursor;\n        this.highlightedChars = highlights.filter(h => !h.expiresAt || h.expiresAt > targetTime);\n        this.deletedChars = deletions.filter(d => !d.expiresAt || d.expiresAt > targetTime);\n        this.updateDisplayText(this.text, this.cursorPosition, this.highlightedChars, this.deletedChars);\n        this.setScrubberVal(percentage);\n\n        if (wasPlaying) {\n            this.replayInProgress = true;\n            this.replayLog();\n        }\n    }\n\n    // Update display with text, cursor, highlights and deletions\n    updateDisplayText(text, cursorPosition, highlights, deletions) {\n        let html = '';\n        const highlightMap = {};\n        const deletionMap = {};\n        const currentTime = this.currentTime;\n\n        highlights.forEach(h => {\n            let opacity = 1;\n            if (h.expiresAt && h.expiresAt - currentTime < 500) {\n                opacity = Math.max(0, (h.expiresAt - currentTime) / 500);\n            }\n            highlightMap[h.index] = { char: h.char, opacity };\n        });\n\n        deletions.forEach(d => {\n            let opacity = 0.5;\n            if (d.expiresAt && d.expiresAt - currentTime < 500) {\n                opacity = Math.max(0, ((d.expiresAt - currentTime) / 500) * 0.5);\n            }\n            deletionMap[d.index] = { char: d.char, opacity };\n        });\n\n        // Find if we have out-of-bounds deletions (from Control+Backspace)\n        const outOfRangeDeletions = deletions.filter(d => d.index >= text.length);\n        const textLines = text.split('\\n');\n        let currentPosition = 0;\n\n        for (let lineIndex = 0; lineIndex < textLines.length; lineIndex++) {\n            const line = textLines[lineIndex];\n            for (let i = 0; i < line.length; i++) {\n                if (currentPosition === cursorPosition) {\n                    html += '<span class=\"tiny_cursive-cursor\"></span>';\n                }\n                const char = line[i];\n                if (deletionMap[currentPosition]) {\n                    html += `<span class=\"tiny_cursive-deleted-char\" style=\"opacity: \n                        ${deletionMap[currentPosition].opacity};\">${deletionMap[currentPosition].char}</span>`;\n                }\n                if (highlightMap[currentPosition] && char !== ' ') {\n                    html += `<span class=\"tiny_cursive-highlighted-char\" style=\"opacity: \n                        ${highlightMap[currentPosition].opacity};\">${char}</span>`;\n                } else {\n                    html += char === ' ' ? ' ' : this.escapeHtml(char);\n                }\n                currentPosition++;\n            }\n            if (currentPosition === cursorPosition) {\n                html += '<span class=\"tiny_cursive-cursor\"></span>';\n            }\n            if (lineIndex < textLines.length - 1) {\n                html += '<br>';\n                currentPosition++;\n            }\n        }\n\n        if (cursorPosition === text.length && !html.endsWith('<span class=\"tiny_cursive-cursor\"></span>')) {\n            html += '<span class=\"tiny_cursive-cursor\"></span>';\n        }\n\n        if (outOfRangeDeletions.length > 0) {\n            outOfRangeDeletions.sort((a, b) => a.index - b.index);\n            const cursorHTML = '<span class=\"tiny_cursive-cursor\"></span>';\n            const cursorPos = html.lastIndexOf(cursorHTML);\n            if (cursorPos !== -1) {\n                let deletedWordHTML = '<span class=\"tiny_cursive-deleted-char\" style=\"opacity: 0.5;\">';\n                outOfRangeDeletions.forEach(d => { deletedWordHTML += d.char; });\n                deletedWordHTML += '</span>';\n                html = html.substring(0, cursorPos) + deletedWordHTML + html.substring(cursorPos);\n            }\n        }\n\n        const wasScrolledToBottom = this.outputElement.scrollHeight -\n            this.outputElement.clientHeight <= this.outputElement.scrollTop + 1;\n        this.outputElement.innerHTML = html;\n\n        if (wasScrolledToBottom || this.isCursorBelowViewport()) {\n            this.outputElement.scrollTop = this.outputElement.scrollHeight;\n        }\n    }\n\n    // Check if cursor is below visible viewport\n    isCursorBelowViewport() {\n        const cursorElement = this.outputElement.querySelector('.tiny_cursive-cursor:last-of-type');\n        if (!cursorElement) {\n            return false;\n        }\n\n        const cursorRect = cursorElement.getBoundingClientRect();\n        const outputRect = this.outputElement.getBoundingClientRect();\n\n        return cursorRect.bottom > outputRect.bottom;\n    }\n\n    escapeHtml(unsafe) {\n        return unsafe\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#039;');\n    }\n\n    // Used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key) {\n        switch (key) {\n            case 'Enter':\n                return '\\n';\n            case 'Backspace':\n            case 'Delete':\n            case 'ControlBackspace':\n                return '';\n            case ' ':\n                 return ' ';\n            default:\n                return !['Shift', 'Ctrl', 'Alt', 'ArrowDown', 'ArrowUp', 'Control', 'ArrowRight',\n                    'ArrowLeft', 'Meta', 'CapsLock', 'Tab', 'Escape', 'Delete', 'PageUp', 'PageDown',\n                    'Insert', 'Home', 'End', 'NumLock', 'AudioVolumeUp', 'AudioVolumeDown',\n                    'MediaPlayPause', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10',\n                    'F11', 'F12', 'PrintScreen', 'UnIdentified'].includes(key) ? key : '';\n        }\n    }\n}"],"names":["constructor","elementId","filePath","speed","loop","controllerId","replayInProgress","parseFloat","highlightedChars","deletedChars","cursorPosition","currentEventIndex","totalEvents","currentTime","totalDuration","usercomments","pasteTimestamps","isPasteEvent","isControlKeyPressed","text","element","document","getElementById","Error","outputElement","loadJSON","then","data","status","processData","this","logData","length","identifyPasteEvents","constructController","startReplay","handleNoSubmission","catch","error","handleError","JSON","parse","comments","Array","isArray","payload","unixTimestamp","startTime","map","event","normalizedTime","Promise","all","templates","render","Str","get_string","_ref","html","str","newElement","window","console","_ref2","message","stopReplay","clearTimeout","replayTimeout","playButton","playSvg","createElement","src","M","util","image_url","querySelector","innerHTML","outerHTML","currentPosition","replayIntervalId","clearInterval","container","controlContainer","buildControllerUI","remove","topRow","classList","add","createPlayButton","appendChild","scrubberContainer","createScrubberContainer","timeDisplay","createTimeDisplay","bottomRow","speedContainer","createSpeedControls","pasteEventsToggle","createPasteEventsToggle","pasteEventsPanel","addEventListener","find","removeClass","addClass","scrubberElement","type","max","min","value","skipToTime","parseInt","textContent","speedLabel","speedGroup","forEach","speedBtn","dataset","querySelectorAll","btn","pasteEventsIcon","pasteIcon","pasteEventsText","pasteEventCount","className","style","marginLeft","chevronIcon","chevron","transition","createPasteEventsPanel","isHidden","display","transform","existingPanel","populatePasteEventsPanel","controlPressed","pasteCount","i","toLowerCase","key","timestamp","push","index","time","formattedTime","formatTime","pastedText","comment","lastIndex","panel","noEventsMessage","carouselContainer","navigationRow","counterDisplay","navButtons","prevButton","nextButton","disabled","contentContainer","createPasteEventDisplay","currentIndex","updateDisplay","opacity","pasteEvent","eventRow","headerRow","textContainer","timestampContainer","pastedTextContainer","playIcon","jumpToTimestamp","percentage","setScrubberVal","String","displayTime","Math","methodname","args","filepath","done","response","fail","ms","seconds","floor","minutes","remainingSeconds","toString","padStart","reset","pauseSvg","replayLog","cursor","updatedHighlights","updatedDeleted","undefined","rePosition","processKeydownEvent","filter","h","expiresAt","d","updateDisplayText","percentComplete","baseIncrement","incrementTime","setTimeout","highlights","deletions","charToInsert","applyKey","includes","wordStart","wordToDelete","substring","char","wordEnd","findNextWordBoundary","findPreviousWordBoundary","trim","lastNonSpace","pos","skipToEnd","textOutput","slice","wasPlaying","targetTime","highlightMap","deletionMap","outOfRangeDeletions","textLines","split","lineIndex","line","escapeHtml","endsWith","sort","a","b","cursorHTML","cursorPos","lastIndexOf","deletedWordHTML","wasScrolledToBottom","scrollHeight","clientHeight","scrollTop","isCursorBelowViewport","cursorElement","cursorRect","getBoundingClientRect","outputRect","bottom","unsafe","replace"],"mappings":"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"}