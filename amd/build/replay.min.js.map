{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport {call as fetchJson} from 'core/ajax';\nimport templates from 'core/templates';\nimport $ from 'jquery';\nimport * as Str from 'core/str';\n\nexport default class Replay {\n    controllerId = '';\n\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        this.controllerId = controllerId;\n        this.replayInProgress = false;\n        this.speed = parseFloat(speed);\n        this.loop = loop;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.cursorPosition = 0;\n        this.currentEventIndex = 0;\n        this.totalEvents = 0;\n        this.currentTime = 0;\n        this.totalDuration = 0;\n        this.usercomments = [];\n        this.pasteTimestamps = [];\n        this.originalContent = \"\";\n        this.isPasteEvent = false;\n\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n            this.outputElement.classList.add('tiny_cursive_outputElement');\n\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n\n        this.loadJSON(filePath)\n            .then((data) => {\n                if (data.status) {\n                    var val = JSON.parse(data.data);\n                    this.logData = val;\n                    this.originalContent = data.original;\n\n                    if (data.comments) {\n                        var comments = JSON.parse(data.comments);\n                        this.usercomments = Array.isArray(comments) ? [...comments] : [];\n                    }\n\n                    if (\"data\" in this.logData) {\n                        this.logData = this.logData.data;\n                    }\n                    if (\"payload\" in this.logData) {\n                        this.logData = this.logData.payload;\n                    }\n\n                    if (this.logData.length > 0 && this.logData[0].unixTimestamp) {\n                        const startTime = this.logData[0].unixTimestamp;\n                        this.logData = this.logData.map(event => ({\n                            ...event,\n                            normalizedTime: event.unixTimestamp - startTime\n                        }));\n                        this.totalDuration = this.logData[this.logData.length - 1].normalizedTime;\n                    }\n\n                    this.totalEvents = this.logData.length;\n                    this.identifyPasteEvents();\n                    if (controllerId && this.logData) {\n                        this.constructController(controllerId);\n                    }\n                    this.startReplay();\n                } else {\n                    try {\n                        // eslint-disable-next-line\n                        Promise.all([\n                            templates.render('tiny_cursive/no_submission'),\n                            Str.get_string('warningpayload', 'tiny_cursive')\n                        ])\n                            .then(function (results) {\n                               var html = results[0];\n                               var str = results[1];\n                               var newElement = $(html);\n                               newElement.text(str);\n                               $('.tiny_cursive').html(newElement);\n                               return true;\n                            })\n                            .catch(function (error) {\n                                window.console.error(error);\n                            });\n                    } catch (error) {\n                        window.console.error(error);\n                    }\n                }\n                return data;\n            })\n            .catch(error => {\n                try {\n                    // eslint-disable-next-line\n                    Promise.all([\n                        templates.render('tiny_cursive/no_submission'),\n                        Str.get_string('warningpayload', 'tiny_cursive')\n                    ])\n                        .then(function (results) {\n                           var html = results[0];\n                           var str = results[1];\n                           var newElement = $(html);\n                           newElement.text(str);\n                           $('.tiny_cursive').html(newElement);\n                        })\n                        .catch(function (error) {\n                            window.console.error(error);\n                        });\n                } catch (error) {\n                    window.console.error(error);\n                }\n                window.console.error('Error loading JSON file: ' + error.message);\n            });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n            var playSvg = document.createElement('img');\n            playSvg.src = M.util.image_url('playicon', 'tiny_cursive');\n\n            if (this.playButton) {\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg.outerHTML;\n            }\n        }\n    }\n\n    constructController(controllerId) {\n        this.replayInProgress = false;\n        this.currentPosition = 0;\n        this.speed = 1;\n        if (this.replayIntervalId) {\n            clearInterval(this.replayIntervalId);\n            this.replayIntervalId = null;\n        }\n        const container = document.getElementById(controllerId);\n        if (!container) {\n            window.console.error(\"Container element not found with ID:\", controllerId);\n            return;\n        }\n        // Clean up any existing controls first\n        const existingControls = container.querySelectorAll('.replay-control');\n        existingControls.forEach(control => control.remove());\n\n        // Check if there's an existing paste events panel\n        const existingPanels = container.querySelectorAll('.paste-events-panel');\n        existingPanels.forEach(panel => panel.remove());\n\n        // Create a container for all controls\n        const controlContainer = document.createElement('div');\n        controlContainer.classList.add('tiny_cursive_replay_control', 'replay-control');\n\n        // Create first row for play button and scrubber\n        const topRow = document.createElement('div');\n        topRow.classList.add('tiny_cursive_top_row');\n\n        // Create play button\n        this.playButton = document.createElement('button');\n       this.playButton.classList.add('tiny_cursive_play_button');\n\n        const playSvg = document.createElement('i');\n        playSvg.className = ''\n\n        this.playButton.innerHTML = `<span class=\"play-icon\">${playSvg.outerHTML}</span>`;\n        this.playButton.classList.add('tiny_cursive_play_button');\n\n        this.playButton.addEventListener('click', () => {\n            if (this.replayInProgress) {\n                this.stopReplay();\n                const playSvg = document.createElement('img');\n                playSvg.src = M.util.image_url('playicon', 'tiny_cursive');\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg.outerHTML;\n            } else {\n                this.startReplay(false);\n            }\n        });\n        topRow.appendChild(this.playButton);\n\n        // Create timeline scrubber\n        const scrubberContainer = document.createElement('div');\n        scrubberContainer.classList.add('tiny_cursive_scrubber_container');\n\n        this.scrubberElement = document.createElement('input');\n        this.scrubberElement.classList.add('tiny_cursive_timeline_scrubber', 'timeline-scrubber');\n        this.scrubberElement.id = 'timelineScrubber';\n        this.scrubberElement.type = 'range';\n        this.scrubberElement.max = '100';\n        this.scrubberElement.min = '0';\n        this.scrubberElement.value = '0';\n\n        this.scrubberElement.addEventListener('input', () => {\n            const scrubberValue = parseInt(this.scrubberElement.value, 10);\n            this.skipToTime(scrubberValue);\n        });\n\n        scrubberContainer.appendChild(this.scrubberElement);\n        topRow.appendChild(scrubberContainer);\n\n        // Create second row for speed controls and time display\n        const bottomRow = document.createElement('div');\n        bottomRow.classList.add('tiny_cursive_bottom_row');\n\n        // Create Speed controls\n        const speedContainer = document.createElement('div');\n        speedContainer.classList.add('tiny_cursive_speed_controls', 'speed-controls');\n\n        const speedLabel = document.createElement('span');\n        speedLabel.classList.add('tiny_cursive_speed_label');\n        speedContainer.appendChild(speedLabel);\n        speedLabel.textContent = 'Speed: ';\n\n        // Create a single button like container for speed options\n        const speedGroup = document.createElement('div');\n        speedGroup.classList.add('tiny_cursive_speed_group');\n\n        [1, 1.5, 2, 5, 10].forEach(speedValue => {\n            const speedBtn = document.createElement('button');\n            speedBtn.textContent = `${speedValue}x`;\n            speedBtn.classList.add('tiny_cursive_speed_btn', 'speed-btn');\n            if (parseFloat(speedValue) === parseFloat(this.speed)) {\n                speedBtn.classList.add('active');\n            }\n            speedBtn.dataset.speed = speedValue;\n            // speedBtn.addEventListener('mouseover', () => {\n            //     if (!speedBtn.classList.contains('active')) {\n            //         speedBtn.style.background = '#f1f3f4';\n            //     }\n            // });\n            // speedBtn.addEventListener('mouseout', () => {\n            //     if (!speedBtn.classList.contains('active')) {\n            //         speedBtn.style.background = 'white';\n            //     }\n            // });\n            speedBtn.addEventListener('click', () => {\n                // document.querySelectorAll('.speed-btn').forEach(btn => {\n                //     btn.style.background = 'white';\n                //     btn.style.color = '#333';\n                //     btn.classList.remove('active');\n                // });\n                // speedBtn.style.background = '#4285f4';\n                // speedBtn.style.color = 'white';\n                // speedBtn.classList.add('active');\n                 document.querySelectorAll('.tiny_cursive_speed_btn').forEach(btn => {\n                    btn.classList.remove('active');\n                });\n                speedBtn.classList.add('active');\n                this.speed = parseFloat(speedBtn.dataset.speed);\n                // Restart to apply the new speed\n                const wasPlaying = this.replayInProgress;\n                if (wasPlaying) {\n                    this.stopReplay();\n                    this.startReplay(false);\n                }\n            });\n            speedGroup.appendChild(speedBtn);\n        });\n\n        speedContainer.appendChild(speedGroup);\n        bottomRow.appendChild(speedContainer);\n\n        // Add rows to container\n        controlContainer.appendChild(topRow);\n        controlContainer.appendChild(bottomRow);\n\n        // Add time display\n        this.timeDisplay = document.createElement('div');\n        this.timeDisplay.classList.add('tiny_cursive_time_display');\n        this.timeDisplay.textContent = '00:00 / 00:00';\n        \n        topRow.appendChild(this.timeDisplay);\n\n        // Create Paste Events Panel toggle button\n        const pasteEventsToggle = document.createElement('div');\n        pasteEventsToggle.classList.add('tiny_cursive_paste_events_toggle', 'paste-events-toggle');\n\n        const pasteEventsIcon = document.createElement('span');\n        const pasteIcon = document.createElement('img');\n        pasteIcon.src = M.util.image_url('pasteicon', 'tiny_cursive');\n        pasteEventsIcon.innerHTML = pasteIcon.outerHTML;\n        pasteEventsIcon.classList.add('tiny_cursive_paste_events_icon');\n\n        const pasteEventsText = document.createElement('span');\n        pasteEventsText.textContent = 'Paste Events';\n\n        const pasteEventCount = document.createElement('span');\n        pasteEventCount.textContent = `(${this.pasteTimestamps.length})`;\n        pasteEventCount.className = 'paste-event-count';\n        pasteEventCount.style.marginLeft = '2px';\n\n        const chevronIcon = document.createElement('span');\n        const chevron = document.createElement('i');\n        chevron.className = 'fa fa-chevron-down';\n        chevronIcon.innerHTML = chevron.outerHTML;\n        chevronIcon.style.marginLeft = '5px';\n        chevronIcon.style.transition = 'transform 0.3s ease';\n\n        pasteEventsToggle.appendChild(pasteEventsIcon);\n        pasteEventsToggle.appendChild(pasteEventsText);\n        pasteEventsToggle.appendChild(pasteEventCount);\n        pasteEventsToggle.appendChild(chevronIcon);\n\n        // Create Paste Events Panel\n        const pasteEventsPanel = document.createElement('div');\n        pasteEventsPanel.classList.add('tiny_cursive_paste_events_panel', 'paste-events-panel');\n\n        this.populatePasteEventsPanel(pasteEventsPanel);\n\n        pasteEventsToggle.addEventListener('click', () => {\n            const isHidden = pasteEventsPanel.style.display === 'none';\n            pasteEventsPanel.style.display = isHidden ? 'block' : 'none';\n            chevronIcon.style.transform = isHidden ? 'rotate(180deg)' : 'rotate(0)';\n        });\n\n        bottomRow.appendChild(pasteEventsToggle);\n\n        controlContainer.appendChild(pasteEventsPanel);\n\n        this.pasteEventsPanel = pasteEventsPanel;\n        this.pasteEventCount = pasteEventCount;\n\n        // Add the controls container to main container\n        container.insertBefore(controlContainer, container.firstChild);\n    }\n\n    identifyPasteEvents() {\n        this.pasteTimestamps = [];\n        let controlPressed = false;\n        let pasteCount = 0;\n\n        // Check for finding Control+V combinations\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                if (event.key === \"Control\") {\n                    controlPressed = true;\n                } else if (event.key === \"v\" && controlPressed) {\n                    const pastePosition = event.rePosition;\n                    const timestamp = event.normalizedTime || 0;\n\n                    let pasteEndPosition = pastePosition;\n                    let pasteLength = 0;\n                    let j = i + 1;\n\n                    while (j < this.logData.length &&\n                            ((this.logData[j].key === \"v\" && this.logData[j].event === \"keyUp\") ||\n                            (this.logData[j].key === \"Control\" && this.logData[j].event === \"keyUp\") ||\n                            (this.logData[j].key === \"left\" && this.logData[j].event === \"mouseUp\") ||\n                            (this.logData[j].key === \"left\" && this.logData[j].event === \"mouseDown\") ||\n                            (this.logData[j].key === \"right\" && this.logData[j].event === \"mouseUp\") ||\n                            (this.logData[j].key === \"right\" && this.logData[j].event === \"mouseDown\"))) {\n                        j++;\n                    }\n\n                    if (j < this.logData.length && this.logData[j].rePosition !== undefined) {\n                        pasteEndPosition = this.logData[j].rePosition;\n                        pasteLength = pasteEndPosition - pastePosition;\n                    } else {\n                        if (this.originalContent && pastePosition < this.originalContent.length) {\n                            pasteEndPosition = this.originalContent.length;\n                            pasteLength = pasteEndPosition - pastePosition;\n                        }\n                    }\n\n                    let FinalPasteLength = pasteLength;\n                    let lastrePosition = pasteEndPosition;\n                    for (let k = j; k < this.logData.length; k++) {\n                        if (this.logData[k].rePosition === undefined) {\n                            continue;\n                        }\n                        if (this.logData[k].event === \"keyDown\" && this.logData[k].key === \"Backspace\") {\n                            FinalPasteLength--;\n                            k++;\n                        } else if (this.logData[k].rePosition > lastrePosition) {\n                            break;\n                        } else {\n                            lastrePosition = this.logData[k].rePosition;\n                        }\n                    }\n\n                    let pastedText = \"\";\n                    if (FinalPasteLength > 0 && this.originalContent) {\n                        const start = Math.min(pastePosition, this.originalContent.length);\n                        const end = Math.min(pastePosition + FinalPasteLength, this.originalContent.length);\n                        pastedText = this.originalContent.substring(start, end);\n                    }\n\n                    this.pasteTimestamps.push({\n                        index: pasteCount,\n                        time: timestamp,\n                        formattedTime: this.formatTime(timestamp),\n                        pastedText: pastedText,\n                        startPosition: pastePosition,\n                        endPosition: pastePosition + FinalPasteLength,\n                        timestamp: timestamp\n                    });\n                    pasteCount++;\n\n                    controlPressed = false;\n                } else {\n                    controlPressed = false;\n                }\n            }\n        }\n\n        if (this.pasteEventsPanel) {\n            this.populatePasteEventsPanel(this.pasteEventsPanel);\n        }\n    }\n\n    populatePasteEventsPanel(panel) {\n        panel.innerHTML = '';\n\n        while (panel.firstChild) {\n            panel.removeChild(panel.firstChild);\n        }\n        panel.classList.add('tiny_cursive_event_panel');\n\n        const pasteEvents = this.pasteTimestamps && this.pasteTimestamps.length ?\n            this.pasteTimestamps : [];\n\n        if (!pasteEvents || pasteEvents.length === 0) {\n            const noEventsMessage = document.createElement('div');\n            noEventsMessage.className = 'no-paste-events-message p-3';\n            noEventsMessage.textContent = 'No paste events detected for this submission.';\n            panel.appendChild(noEventsMessage);\n            return;\n        }\n\n        const carouselContainer = document.createElement('div');\n        carouselContainer.classList.add('tiny_cursive_paste_events_carousel', 'paste-events-carousel')\n\n        const navigationRow = document.createElement('div');\n        navigationRow.classList.add('paste-events-navigation', 'tiny_cursive_navigation_row')\n\n\n        const counterDisplay = document.createElement('div');\n        counterDisplay.classList.add('paste-events-counter', 'tiny_cursive_counter_display')\n        counterDisplay.textContent = 'Paste Events';\n\n\n        const navButtons = document.createElement('div');\n        navButtons.classList.add('tiny_cursive_nav_buttons', 'tiny_cursive_nav_buttons');\n\n        const prevButton = document.createElement('button');\n        prevButton.classList.add('paste-event-prev-btn', 'tiny_cursive_nav_button');\n        const leftChevron = document.createElement('i');\n        leftChevron.className = 'fa fa-chevron-left';\n        prevButton.innerHTML = leftChevron.outerHTML;\n\n        const nextButton = document.createElement('button');\n        nextButton.className = 'paste-event-next-btn tiny_cursive_nav_button';\n        const rightChevron = document.createElement('i');\n        rightChevron.className = 'fa fa-chevron-right';\n        nextButton.innerHTML = rightChevron.outerHTML;\n        nextButton.disabled = pasteEvents.length <= 1;\n\n        navButtons.appendChild(prevButton);\n        navButtons.appendChild(nextButton);\n\n        navigationRow.appendChild(counterDisplay);\n        navigationRow.appendChild(navButtons);\n\n        const contentContainer = document.createElement('div');\n        contentContainer.className = 'paste-events-content tiny_cursive_content_container';\n\n        // Create initial content with first paste event\n        const createPasteEventDisplay = (pasteEvent) => {\n            const eventRow = document.createElement('div');\n            eventRow.className = 'tiny_cursive_event_row';\n\n            // Header row with timestamp and play button\n            const headerRow = document.createElement('div');\n            headerRow.className = 'tiny_cursive_header_row';\n\n            // Timestamp and text container\n            const textContainer = document.createElement('div');\n            textContainer.className = 'tiny_cursive_text_container';\n\n            const timestampContainer = document.createElement('div');\n            timestampContainer.className = 'paste-event-timestamp tiny_cursive_paste_event_timestamp';\n            timestampContainer.textContent = pasteEvent.formattedTime;\n\n            const pastedTextContainer = document.createElement('div');\n            pastedTextContainer.className = 'paste-event-text tiny_cursive_pasted_text_container';\n            pastedTextContainer.textContent = pasteEvent.pastedText;\n\n            textContainer.appendChild(timestampContainer);\n            textContainer.appendChild(pastedTextContainer);\n\n            const playButton = document.createElement('button');\n            playButton.className = 'paste-event-play-btn tiny_cursive_seekplay_button';\n\n            const playIcon = document.createElement('img');\n            playIcon.src = M.util.image_url('seekplayicon', 'tiny_cursive');\n            playButton.innerHTML = playIcon.outerHTML;\n\n            playButton.addEventListener('click', () => {\n                this.jumpToTimestamp(pasteEvent.timestamp);\n            });\n\n            headerRow.appendChild(textContainer);\n            headerRow.appendChild(playButton);\n\n            eventRow.appendChild(headerRow);\n\n            return eventRow;\n        };\n\n        contentContainer.appendChild(createPasteEventDisplay(pasteEvents[0]));\n\n        carouselContainer.appendChild(navigationRow);\n        carouselContainer.appendChild(contentContainer);\n\n        panel.appendChild(carouselContainer);\n\n        let currentIndex = 0;\n\n        prevButton.addEventListener('click', () => {\n            if (currentIndex > 0) {\n                currentIndex--;\n                updatePasteEventDisplay();\n            }\n        });\n\n        nextButton.addEventListener('click', () => {\n            if (currentIndex < pasteEvents.length - 1) {\n                currentIndex++;\n                updatePasteEventDisplay();\n            }\n        });\n\n        const updatePasteEventDisplay = () => {\n            contentContainer.innerHTML = '';\n            contentContainer.appendChild(createPasteEventDisplay(pasteEvents[currentIndex]));\n\n            counterDisplay.textContent = 'Paste Events';\n\n            prevButton.disabled = currentIndex === 0;\n            prevButton.style.opacity = currentIndex === 0 ? '0.5' : '1';\n            nextButton.disabled = currentIndex === pasteEvents.length - 1;\n            nextButton.style.opacity = currentIndex === pasteEvents.length - 1 ? '0.5' : '1';\n        };\n    }\n\n    jumpToTimestamp(timestamp) {\n        const percentage = this.totalDuration > 0 ? (timestamp / this.totalDuration) * 100 : 0;\n\n        this.skipToTime(percentage);\n\n        if (!this.replayInProgress) {\n            this.startReplay(false);\n        }\n    }\n\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n\n            if (this.timeDisplay) {\n                const displayTime = Math.min(this.currentTime, this.totalDuration);\n                const currentTimeFormatted = this.formatTime(displayTime);\n                const totalTimeFormatted = this.formatTime(this.totalDuration);\n                this.timeDisplay.textContent = `${currentTimeFormatted} / ${totalTimeFormatted}`;\n            }\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response => {\n            return response;\n        }).fail(error => {\n            throw new Error('Error loading JSON file: ' + error.message);\n        });\n    }\n\n    formatTime(ms) {\n        const seconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n\n    // Call this to make a \"start\" or \"start over\" function\n    startReplay(reset = true) {\n        // Clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        const atEnd = (this.totalDuration > 0 && this.currentTime >= this.totalDuration) ||\n            (this.currentEventIndex >= this.totalEvents);\n        if (atEnd && !reset) {\n            reset = true;\n        }\n        this.replayInProgress = true;\n        if (reset) {\n            this.outputElement.innerHTML = '';\n            this.text = '';\n            this.cursorPosition = 0;\n            this.currentEventIndex = 0;\n            this.currentTime = 0;\n            this.highlightedChars = [];\n            this.deletedChars = [];\n            this.isControlKeyPressed = false;\n        }\n        if (this.playButton) {\n            const pauseSvg = document.createElement('i');\n            pauseSvg.className = 'fa fa-pause';\n            this.playButton.querySelector('.play-icon').innerHTML = pauseSvg.outerHTML;\n        }\n        this.replayLog();\n    }\n\n    // Called by startReplay() to recursively call through keydown events\n    replayLog() {\n        if (!this.replayInProgress) {\n            this.updateDisplayText(this.text, this.cursorPosition, [], []);\n            return;\n        }\n\n        while (this.currentEventIndex < this.logData.length) {\n            const event = this.logData[this.currentEventIndex];\n\n            if (event.normalizedTime && event.normalizedTime > this.currentTime) {\n                break;\n            }\n\n            let text = this.text || '';\n            let cursor = this.cursorPosition || 0;\n            let updatedHighlights = [...this.highlightedChars];\n            let updatedDeleted = [...this.deletedChars];\n\n            // Always update cursor position based on rePosition if available\n            if (event.rePosition !== undefined) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                }\n                else if (event.key !== \"v\") {\n                    if (event.key !== \"Control\") {\n                        this.isControlKeyPressed = false;\n                    }\n                    if (event.key !== \"Backspace\" && event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n                        this.isPasteEvent = false;\n                    }\n                }\n                else if (event.key == 'v' && this.isControlKeyPressed) {\n                    this.isPasteEvent = true;\n                    this.isControlKeyPressed = false;\n                }\n                if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    // Handle Control+Backspace word deletion\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            updatedDeleted.push({\n                                index: wordStart + i,\n                                char: wordToDelete[i],\n                                time: this.currentTime,\n                                expiresAt: this.currentTime + 2000\n                            });\n                        }\n                        // Remove the word\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                else if (event.key === \"Backspace\" && !this.isPasteEvent) {\n                    if (cursor > 0) {\n                        // Store the character being deleted\n                        updatedDeleted.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 2000 // Make deletions visible for 2 seconds\n                        });\n                        // Remove the character before cursor\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor--;\n                    }\n                }\n                else if (event.key === \"ArrowLeft\") {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                else if (event.key === \"ArrowRight\") {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                else if (charToInsert !== null && charToInsert !== \"\") {\n                    // Insert the character at cursor position\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    // Highlight non-space characters\n                    if (charToInsert.trim() !== \"\") {\n                        updatedHighlights.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 1500 // Make highlights visible for 1.5 seconds\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.text = text;\n            this.cursorPosition = cursor;\n\n            // Filter out expired highlights and deletions\n            this.highlightedChars = updatedHighlights.filter(h =>\n                !h.expiresAt || h.expiresAt > this.currentTime\n            );\n\n            this.deletedChars = updatedDeleted.filter(d =>\n                !d.expiresAt || d.expiresAt > this.currentTime\n            );\n\n            this.currentEventIndex++;\n        }\n\n        this.updateDisplayText(this.text, this.cursorPosition, this.highlightedChars, this.deletedChars);\n\n        // Update timeline\n        if (this.totalDuration > 0) {\n            const percentComplete = Math.min((this.currentTime / this.totalDuration) * 100, 100);\n            this.setScrubberVal(percentComplete);\n        }\n\n        // Continue or stop replay\n        if (this.replayInProgress) {\n            const baseIncrement = 100;\n            const incrementTime = baseIncrement / this.speed;\n            this.currentTime += baseIncrement;\n\n            if (this.currentEventIndex >= this.totalEvents) {\n                if (this.loop) {\n                    this.startReplay(true);\n                } else {\n                    this.stopReplay();\n                    this.updateDisplayText(this.text, this.cursorPosition, [], []);\n                }\n            } else {\n                this.replayTimeout = setTimeout(() => this.replayLog(), incrementTime);\n            }\n        }\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        const wasPlaying = this.replayInProgress;\n        if (wasPlaying) {\n            this.replayInProgress = false;\n            clearTimeout(this.replayTimeout);\n        }\n\n        const targetTime = (this.totalDuration * percentage) / 100;\n        this.currentTime = targetTime;\n        this.currentEventIndex = 0;\n        this.text = '';\n        this.cursorPosition = 0;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.isControlKeyPressed = false;\n\n        let text = '';\n        let cursor = 0;\n\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.normalizedTime && event.normalizedTime > targetTime) {\n                this.currentEventIndex = i;\n                break;\n            }\n\n            if (event.rePosition !== undefined) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                }\n                else if (event.key !== \"v\") {\n                    if (event.key !== \"Control\") {\n                        this.isControlKeyPressed = false;\n                    }\n                    if (event.key !== \"Backspace\" && event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n                        this.isPasteEvent = false;\n                    }\n                }\n                else if (event.key == 'v' && this.isControlKeyPressed) {\n                    this.isPasteEvent = true;\n                    this.isControlKeyPressed = false;\n                }\n                if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            this.deletedChars.push({\n                                index: wordStart + i,\n                                char: wordToDelete[i],\n                                time: targetTime,\n                                expiresAt: targetTime + 2000\n                            });\n                        }\n\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                else if (event.key === \"Backspace\" && !this.isPasteEvent) {\n                    if (cursor > 0) {\n                        this.deletedChars.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: targetTime,\n                            expiresAt: targetTime + 1000\n                        });\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor = Math.max(0, cursor - 1);\n                    }\n                }\n                else if (event.key === \"ArrowLeft\") {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                else if (event.key === \"ArrowRight\") {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                else if (charToInsert && charToInsert.length > 0) {\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    if (charToInsert.trim() !== \"\") {\n                        this.highlightedChars.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: targetTime,\n                            expiresAt: targetTime + 1000\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.currentEventIndex = i + 1;\n        }\n\n        this.text = text;\n        this.cursorPosition = cursor;\n        this.updateDisplayText(text, cursor, this.highlightedChars, this.deletedChars);\n        this.setScrubberVal(percentage);\n\n        if (wasPlaying) {\n            this.replayInProgress = true;\n            this.replayLog();\n        }\n    }\n\n\n    // Update display with text, cursor, highlights and deletions\n    updateDisplayText(text, cursorPosition, highlights, deletions) {\n        let html = '';\n        const highlightMap = {};\n        const deletionMap = {};\n        const currentTime = this.currentTime;\n\n        highlights.forEach(h => {\n            let opacity = 1;\n            if (h.expiresAt) {\n                const timeRemaining = h.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, timeRemaining / 500);\n                }\n            }\n            highlightMap[h.index] = { char: h.char, opacity: opacity };\n        });\n\n        deletions.forEach(d => {\n            let opacity = 0.5;\n            if (d.expiresAt) {\n                const timeRemaining = d.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, (timeRemaining / 500) * 0.5);\n                }\n            }\n            deletionMap[d.index] = { char: d.char, opacity: opacity };\n        });\n\n        // Find if we have out-of-bounds deletions (from Control+Backspace)\n        const outOfRangeDeletions = deletions.filter(d => d.index >= text.length);\n\n        const textLines = text.split('\\n');\n        let currentPosition = 0;\n\n        for (let lineIndex = 0; lineIndex < textLines.length; lineIndex++) {\n            const line = textLines[lineIndex];\n\n            for (let i = 0; i < line.length; i++) {\n                if (currentPosition === cursorPosition) {\n                    html += '<span class=\"tiny_cursive-cursor\">|</span>';\n                }\n\n                const char = line[i];\n\n                if (deletionMap[currentPosition]) {\n                    const deletion = deletionMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-deleted-char\" style=\"opacity: ${deletion.opacity};\">${deletion.char}</span>`;\n                }\n\n                if (highlightMap[currentPosition] && char !== ' ') {\n                    const highlight = highlightMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-highlighted-char\" style=\"opacity: ${highlight.opacity};\">${char}</span>`;\n                } else {\n                    html += char === ' ' ? '&nbsp;' : this.escapeHtml(char);\n                }\n\n                currentPosition++;\n            }\n\n            if (currentPosition === cursorPosition) {\n                html += '<span class=\"tiny_cursive-cursor\">|</span>';\n            }\n\n            if (lineIndex < textLines.length - 1) {\n                html += '<br>';\n                currentPosition++;\n            }\n        }\n\n        if (cursorPosition === text.length && !html.endsWith('<span class=\"tiny_cursive-cursor\">|</span>')) {\n            html += '<span class=\"tiny_cursive-cursor\">|</span>';\n        }\n\n        // For control + backspace functionalities\n        if (outOfRangeDeletions.length > 0) {\n            outOfRangeDeletions.sort((a, b) => a.index - b.index);\n\n            const cursorHTML = '<span class=\"tiny_cursive-cursor\">|</span>';\n            let cursorPos = html.lastIndexOf(cursorHTML);\n\n            if (cursorPos !== -1) {\n                let deletedWordHTML = '<span class=\"tiny_cursive-deleted-char\" style=\"opacity: 0.5;\">';\n                outOfRangeDeletions.forEach(d => {\n                    deletedWordHTML += d.char;\n                });\n                deletedWordHTML += '</span>';\n                html = html.substring(0, cursorPos) + deletedWordHTML + html.substring(cursorPos);\n            }\n        }\n\n        const wasScrolledToBottom = this.outputElement.scrollHeight -\n            this.outputElement.clientHeight <= this.outputElement.scrollTop + 1;\n\n        this.outputElement.innerHTML = html;\n\n        if (wasScrolledToBottom || this.isCursorBelowViewport()) {\n            this.outputElement.scrollTop = this.outputElement.scrollHeight;\n        }\n    }\n\n    // Check if cursor is below visible viewport\n    isCursorBelowViewport() {\n        const cursorElement = this.outputElement.querySelector('.tiny_cursive-cursor:last-of-type');\n        if (!cursorElement) {\n            return false;\n        }\n\n        const cursorRect = cursorElement.getBoundingClientRect();\n        const outputRect = this.outputElement.getBoundingClientRect();\n\n        return cursorRect.bottom > outputRect.bottom;\n    }\n\n    escapeHtml(unsafe) {\n        return unsafe\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    // Used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key) {\n        switch (key) {\n            case \"Enter\":\n                return \"\\n\";\n            case \"Backspace\":\n                return \"\";\n            case \"ControlBackspace\":\n                return \"\";\n            case \" \":\n                return \" \";\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\",\n                    \"ArrowLeft\", \"Meta\", \"CapsLock\", \"Tab\", \"Escape\", \"Delete\", \"PageUp\", \"PageDown\",\n                    \"Insert\", \"Home\", \"End\", \"NumLock\", \"AudioVolumeUp\", \"AudioVolumeDown\", \"MediaPlayPause\",\n                ]\n                    .includes(key) ? key : \"\";\n        }\n    }\n}"],"names":["controllerId","constructor","elementId","filePath","speed","loop","replayInProgress","parseFloat","highlightedChars","deletedChars","cursorPosition","currentEventIndex","totalEvents","currentTime","totalDuration","usercomments","pasteTimestamps","originalContent","isPasteEvent","element","document","getElementById","Error","outputElement","classList","add","loadJSON","then","data","status","val","JSON","parse","logData","original","comments","Array","isArray","this","payload","length","unixTimestamp","startTime","map","event","normalizedTime","identifyPasteEvents","constructController","startReplay","Promise","all","templates","render","Str","get_string","results","html","str","newElement","text","catch","error","window","console","message","stopReplay","clearTimeout","replayTimeout","playSvg","createElement","src","M","util","image_url","playButton","querySelector","innerHTML","outerHTML","currentPosition","replayIntervalId","clearInterval","container","querySelectorAll","forEach","control","remove","panel","controlContainer","topRow","className","addEventListener","appendChild","scrubberContainer","scrubberElement","id","type","max","min","value","scrubberValue","parseInt","skipToTime","bottomRow","speedContainer","speedLabel","textContent","speedGroup","speedValue","speedBtn","dataset","btn","timeDisplay","pasteEventsToggle","pasteEventsIcon","pasteIcon","pasteEventsText","pasteEventCount","style","marginLeft","chevronIcon","chevron","transition","pasteEventsPanel","populatePasteEventsPanel","isHidden","display","transform","insertBefore","firstChild","controlPressed","pasteCount","i","toLowerCase","key","pastePosition","rePosition","timestamp","pasteEndPosition","pasteLength","j","undefined","FinalPasteLength","lastrePosition","k","pastedText","start","Math","end","substring","push","index","time","formattedTime","formatTime","startPosition","endPosition","removeChild","pasteEvents","noEventsMessage","carouselContainer","navigationRow","counterDisplay","navButtons","prevButton","leftChevron","nextButton","rightChevron","disabled","contentContainer","createPasteEventDisplay","pasteEvent","eventRow","headerRow","textContainer","timestampContainer","pastedTextContainer","playIcon","jumpToTimestamp","currentIndex","updatePasteEventDisplay","opacity","percentage","setScrubberVal","String","displayTime","currentTimeFormatted","totalTimeFormatted","methodname","args","filepath","done","response","fail","ms","seconds","floor","remainingSeconds","toString","padStart","reset","isControlKeyPressed","pauseSvg","replayLog","cursor","updatedHighlights","updatedDeleted","charToInsert","applyKey","wordStart","wordToDelete","char","expiresAt","trim","filter","h","d","updateDisplayText","percentComplete","baseIncrement","incrementTime","setTimeout","skipToEnd","textOutput","slice","wasPlaying","targetTime","highlights","deletions","highlightMap","deletionMap","timeRemaining","outOfRangeDeletions","textLines","split","lineIndex","line","deletion","escapeHtml","endsWith","sort","a","b","cursorHTML","cursorPos","lastIndexOf","deletedWordHTML","wasScrolledToBottom","scrollHeight","clientHeight","scrollTop","isCursorBelowViewport","cursorElement","cursorRect","getBoundingClientRect","outputRect","bottom","unsafe","replace","includes"],"mappings":"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"}