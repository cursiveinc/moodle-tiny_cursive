{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport {call as fetchJson} from 'core/ajax';\nimport templates from 'core/templates';\nimport $ from 'jquery';\nimport * as Str from 'core/str';\n\nexport default class Replay {\n    controllerId = '';\n\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        this.controllerId = controllerId;\n        this.replayInProgress = false;\n        this.speed = parseFloat(speed);\n        this.loop = loop;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.cursorPosition = 0;\n        this.currentEventIndex = 0;\n        this.totalEvents = 0;\n        this.currentTime = 0;\n        this.totalDuration = 0;\n        this.usercomments = [];\n        this.pasteTimestamps = [];\n        this.isPasteEvent = false;\n\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n            this.outputElement.classList.add('tiny_cursive_outputElement');\n\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n\n        this.loadJSON(filePath)\n            .then((data) => {\n                if (data.status) {\n                    var val = JSON.parse(data.data);\n                    this.logData = val;\n\n                    if (data.comments) {\n                        var comments = JSON.parse(data.comments);\n                        this.usercomments = Array.isArray(comments) ? [...comments] : [];\n                    }\n\n                    if (\"data\" in this.logData) {\n                        this.logData = this.logData.data;\n                    }\n                    if (\"payload\" in this.logData) {\n                        this.logData = this.logData.payload;\n                    }\n\n                    if (this.logData.length > 0 && this.logData[0].unixTimestamp) {\n                        const startTime = this.logData[0].unixTimestamp;\n                        this.logData = this.logData.map(event => ({\n                            ...event,\n                            normalizedTime: event.unixTimestamp - startTime\n                        }));\n                        this.totalDuration = this.logData[this.logData.length - 1].normalizedTime;\n                    }\n\n                    this.totalEvents = this.logData.length;\n                    this.identifyPasteEvents();\n                    if (controllerId && this.logData) {\n                        this.constructController(controllerId);\n                    }\n                    this.startReplay();\n                } else {\n                    try {\n                        // eslint-disable-next-line\n                        Promise.all([\n                            templates.render('tiny_cursive/no_submission'),\n                            Str.get_string('warningpayload', 'tiny_cursive')\n                        ])\n                            .then(function (results) {\n                                var html = results[0];\n                                var str = results[1];\n                                var newElement = $(html);\n                                newElement.text(str);\n                                $('.tiny_cursive').html(newElement);\n                                return true;\n                            })\n                            .catch(function (error) {\n                                window.console.error(error);\n                            });\n                    } catch (error) {\n                        window.console.error(error);\n                    }\n                }\n                return data;\n            })\n            .catch(error => {\n                try {\n                    // eslint-disable-next-line\n                    Promise.all([\n                        templates.render('tiny_cursive/no_submission'),\n                        Str.get_string('warningpayload', 'tiny_cursive')\n                    ])\n                        .then(function (results) {\n                            var html = results[0];\n                            var str = results[1];\n                            var newElement = $(html);\n                            newElement.text(str);\n                            $('.tiny_cursive').html(newElement);\n                        })\n                        .catch(function (error) {\n                            window.console.error(error);\n                        });\n                } catch (error) {\n                    window.console.error(error);\n                }\n                window.console.error('Error loading JSON file: ' + error.message);\n            });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n            var playSvg = document.createElement('img');\n            playSvg.src = M.util.image_url('playicon', 'tiny_cursive');\n\n            if (this.playButton) {\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg.outerHTML;\n            }\n        }\n    }\n\n    constructController(controllerId) {\n        this.replayInProgress = false;\n        this.currentPosition = 0;\n        this.speed = 1;\n        if (this.replayIntervalId) {\n            clearInterval(this.replayIntervalId);\n            this.replayIntervalId = null;\n        }\n        const container = document.getElementById(controllerId);\n        if (!container) {\n            window.console.error(\"Container element not found with ID:\", controllerId);\n            return;\n        }\n        // Clean up any existing controls first\n        const existingControls = container.querySelectorAll('.replay-control');\n        existingControls.forEach(control => control.remove());\n\n        // Check if there's an existing paste events panel\n        const existingPanels = container.querySelectorAll('.paste-events-panel');\n        existingPanels.forEach(panel => panel.remove());\n\n        // Create a container for all controls\n        const controlContainer = document.createElement('div');\n        controlContainer.classList.add('tiny_cursive_replay_control', 'replay-control');\n\n        // Create first row for play button and scrubber\n        const topRow = document.createElement('div');\n        topRow.classList.add('tiny_cursive_top_row');\n\n        // Create play button\n        this.playButton = document.createElement('button');\n        this.playButton.classList.add('tiny_cursive_play_button');\n\n        const playSvg = document.createElement('i');\n        playSvg.className = '';\n\n        this.playButton.innerHTML = `<span class=\"play-icon\">${playSvg.outerHTML}</span>`;\n        this.playButton.classList.add('tiny_cursive_play_button');\n\n        this.playButton.addEventListener('click', () => {\n            if (this.replayInProgress) {\n                this.stopReplay();\n                const playSvg = document.createElement('img');\n                playSvg.src = M.util.image_url('playicon', 'tiny_cursive');\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg.outerHTML;\n            } else {\n                this.startReplay(false);\n            }\n        });\n        topRow.appendChild(this.playButton);\n\n        // Create timeline scrubber\n        const scrubberContainer = document.createElement('div');\n        scrubberContainer.classList.add('tiny_cursive_scrubber_container');\n\n        this.scrubberElement = document.createElement('input');\n        this.scrubberElement.classList.add('tiny_cursive_timeline_scrubber', 'timeline-scrubber');\n        this.scrubberElement.id = 'timelineScrubber';\n        this.scrubberElement.type = 'range';\n        this.scrubberElement.max = '100';\n        this.scrubberElement.min = '0';\n        this.scrubberElement.value = '0';\n\n        this.scrubberElement.addEventListener('input', () => {\n            const scrubberValue = parseInt(this.scrubberElement.value, 10);\n            this.skipToTime(scrubberValue);\n        });\n\n        scrubberContainer.appendChild(this.scrubberElement);\n        topRow.appendChild(scrubberContainer);\n\n        // Create second row for speed controls and time display\n        const bottomRow = document.createElement('div');\n        bottomRow.classList.add('tiny_cursive_bottom_row');\n\n        // Create Speed controls\n        const speedContainer = document.createElement('div');\n        speedContainer.classList.add('tiny_cursive_speed_controls', 'speed-controls');\n\n        const speedLabel = document.createElement('span');\n        speedLabel.classList.add('tiny_cursive_speed_label');\n        speedContainer.appendChild(speedLabel);\n        speedLabel.textContent = 'Speed: ';\n\n        // Create a single button like container for speed options\n        const speedGroup = document.createElement('div');\n        speedGroup.classList.add('tiny_cursive_speed_group');\n\n        [1, 1.5, 2, 5, 10].forEach(speedValue => {\n            const speedBtn = document.createElement('button');\n            speedBtn.textContent = `${speedValue}x`;\n            speedBtn.classList.add('tiny_cursive_speed_btn', 'speed-btn');\n            if (parseFloat(speedValue) === parseFloat(this.speed)) {\n                speedBtn.classList.add('active');\n            }\n            speedBtn.dataset.speed = speedValue;\n\n            speedBtn.addEventListener('click', () => {\n                document.querySelectorAll('.tiny_cursive_speed_btn').forEach(btn => {\n                    btn.classList.remove('active');\n                });\n                speedBtn.classList.add('active');\n                this.speed = parseFloat(speedBtn.dataset.speed);\n                // Restart to apply the new speed\n                const wasPlaying = this.replayInProgress;\n                if (wasPlaying) {\n                    this.stopReplay();\n                    this.startReplay(false);\n                }\n            });\n            speedGroup.appendChild(speedBtn);\n        });\n\n        speedContainer.appendChild(speedGroup);\n        bottomRow.appendChild(speedContainer);\n\n        // Add rows to container\n        controlContainer.appendChild(topRow);\n        controlContainer.appendChild(bottomRow);\n\n        // Add time display\n        this.timeDisplay = document.createElement('div');\n        this.timeDisplay.classList.add('tiny_cursive_time_display');\n        this.timeDisplay.textContent = '00:00 / 00:00';\n\n        topRow.appendChild(this.timeDisplay);\n\n        // Create Paste Events Panel toggle button\n        const pasteEventsToggle = document.createElement('div');\n        pasteEventsToggle.classList.add('tiny_cursive_paste_events_toggle', 'paste-events-toggle');\n\n        const pasteEventsIcon = document.createElement('span');\n        const pasteIcon = document.createElement('img');\n        pasteIcon.src = M.util.image_url('pasteicon', 'tiny_cursive');\n        pasteEventsIcon.innerHTML = pasteIcon.outerHTML;\n        pasteEventsIcon.classList.add('tiny_cursive_paste_events_icon');\n\n        const pasteEventsText = document.createElement('span');\n        pasteEventsText.textContent = 'Paste Events';\n\n        const pasteEventCount = document.createElement('span');\n        pasteEventCount.textContent = `(${this.usercomments.length})`;\n        pasteEventCount.className = 'paste-event-count';\n        pasteEventCount.style.marginLeft = '2px';\n\n        const chevronIcon = document.createElement('span');\n        const chevron = document.createElement('i');\n        chevron.className = 'fa fa-chevron-down';\n        chevronIcon.innerHTML = chevron.outerHTML;\n        chevronIcon.style.marginLeft = '5px';\n        chevronIcon.style.transition = 'transform 0.3s ease';\n\n        pasteEventsToggle.appendChild(pasteEventsIcon);\n        pasteEventsToggle.appendChild(pasteEventsText);\n        pasteEventsToggle.appendChild(pasteEventCount);\n        pasteEventsToggle.appendChild(chevronIcon);\n\n        // Create Paste Events Panel\n        const pasteEventsPanel = document.createElement('div');\n        pasteEventsPanel.classList.add('tiny_cursive_paste_events_panel', 'paste-events-panel');\n        pasteEventsPanel.style.display = 'none';\n\n        this.populatePasteEventsPanel(pasteEventsPanel);\n\n        pasteEventsToggle.addEventListener('click', () => {\n            const isHidden = pasteEventsPanel.style.display === 'none';\n            pasteEventsPanel.style.display = isHidden ? 'block' : 'none';\n            chevronIcon.style.transform = isHidden ? 'rotate(180deg)' : 'rotate(0)';\n        });\n\n        bottomRow.appendChild(pasteEventsToggle);\n\n        controlContainer.appendChild(pasteEventsPanel);\n\n        this.pasteEventsPanel = pasteEventsPanel;\n        this.pasteEventCount = pasteEventCount;\n\n        // Add the controls container to main container\n        container.insertBefore(controlContainer, container.firstChild);\n    }\n\n    identifyPasteEvents() {\n        this.pasteTimestamps = [];\n        let controlPressed = false;\n        let pasteCount = 0;\n\n        // Check for finding Control+V combinations\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                if (event.key === \"Control\") {\n                    controlPressed = true;\n                } else if (event.key === \"v\" && controlPressed) {\n                    const timestamp = event.normalizedTime || 0;\n\n                    let userComment = \"\";\n                    if (this.usercomments && this.usercomments[pasteCount]) {\n                        userComment = this.usercomments[pasteCount];\n                    }\n\n                    this.pasteTimestamps.push({\n                        index: pasteCount,\n                        time: timestamp,\n                        formattedTime: this.formatTime(timestamp),\n                        pastedText: userComment,\n                        timestamp: timestamp\n                    });\n                    pasteCount++;\n\n                    controlPressed = false;\n                } else {\n                    controlPressed = false;\n                }\n            }\n        }\n\n        if (this.usercomments.length > 0 && this.pasteTimestamps.length === 0) {\n            for (let i = 0; i < this.usercomments.length; i++) {\n                this.pasteTimestamps.push({\n                    index: i,\n                    time: 0,\n                    formattedTime: this.formatTime(0),\n                    pastedText: this.usercomments[i],\n                    timestamp: 0\n                });\n            }\n        }\n\n        while (this.pasteTimestamps.length < this.usercomments.length) {\n            const lastIndex = this.pasteTimestamps.length;\n            this.pasteTimestamps.push({\n                index: lastIndex,\n                time: 0,\n                formattedTime: this.formatTime(0),\n                pastedText: this.usercomments[lastIndex],\n                timestamp: 0\n            });\n        }\n\n        if (this.pasteEventsPanel) {\n            this.populatePasteEventsPanel(this.pasteEventsPanel);\n        }\n    }\n\n    populatePasteEventsPanel(panel) {\n        panel.innerHTML = '';\n\n        while (panel.firstChild) {\n            panel.removeChild(panel.firstChild);\n        }\n        panel.classList.add('tiny_cursive_event_panel');\n\n        const pasteEvents = this.pasteTimestamps && this.pasteTimestamps.length ?\n            this.pasteTimestamps : [];\n\n        if (!pasteEvents || pasteEvents.length === 0) {\n            const noEventsMessage = document.createElement('div');\n            noEventsMessage.className = 'no-paste-events-message p-3';\n            noEventsMessage.textContent = 'No paste events detected for this submission.';\n            panel.appendChild(noEventsMessage);\n            return;\n        }\n\n        const carouselContainer = document.createElement('div');\n        carouselContainer.classList.add('tiny_cursive_paste_events_carousel', 'paste-events-carousel');\n\n        const navigationRow = document.createElement('div');\n        navigationRow.classList.add('paste-events-navigation', 'tiny_cursive_navigation_row');\n\n        const counterDisplay = document.createElement('div');\n        counterDisplay.classList.add('paste-events-counter', 'tiny_cursive_counter_display');\n        counterDisplay.textContent = 'Paste Events';\n\n        const navButtons = document.createElement('div');\n        navButtons.classList.add('tiny_cursive_nav_buttons', 'tiny_cursive_nav_buttons');\n\n        const prevButton = document.createElement('button');\n        prevButton.classList.add('paste-event-prev-btn', 'tiny_cursive_nav_button');\n        const leftChevron = document.createElement('i');\n        leftChevron.className = 'fa fa-chevron-left';\n        prevButton.innerHTML = leftChevron.outerHTML;\n\n        const nextButton = document.createElement('button');\n        nextButton.className = 'paste-event-next-btn tiny_cursive_nav_button';\n        const rightChevron = document.createElement('i');\n        rightChevron.className = 'fa fa-chevron-right';\n        nextButton.innerHTML = rightChevron.outerHTML;\n        nextButton.disabled = pasteEvents.length <= 1;\n\n        navButtons.appendChild(prevButton);\n        navButtons.appendChild(nextButton);\n\n        navigationRow.appendChild(counterDisplay);\n        navigationRow.appendChild(navButtons);\n\n        const contentContainer = document.createElement('div');\n        contentContainer.className = 'paste-events-content tiny_cursive_content_container';\n\n        // Create initial content with first paste event\n        const createPasteEventDisplay = (pasteEvent) => {\n            const eventRow = document.createElement('div');\n            eventRow.className = 'tiny_cursive_event_row';\n\n            // Header row with timestamp and play button\n            const headerRow = document.createElement('div');\n            headerRow.className = 'tiny_cursive_header_row';\n\n            // Timestamp and text container\n            const textContainer = document.createElement('div');\n            textContainer.className = 'tiny_cursive_text_container';\n\n            const timestampContainer = document.createElement('div');\n            timestampContainer.className = 'paste-event-timestamp tiny_cursive_paste_event_timestamp';\n            timestampContainer.textContent = pasteEvent.formattedTime;\n\n            const pastedTextContainer = document.createElement('div');\n            pastedTextContainer.className = 'paste-event-text tiny_cursive_pasted_text_container';\n            pastedTextContainer.textContent = pasteEvent.pastedText;\n\n            textContainer.appendChild(timestampContainer);\n            textContainer.appendChild(pastedTextContainer);\n\n            const playButton = document.createElement('button');\n            playButton.className = 'paste-event-play-btn tiny_cursive_seekplay_button';\n\n            const playIcon = document.createElement('img');\n            playIcon.src = M.util.image_url('seekplayicon', 'tiny_cursive');\n            playButton.innerHTML = playIcon.outerHTML;\n\n            playButton.addEventListener('click', () => {\n                this.jumpToTimestamp(pasteEvent.timestamp);\n            });\n\n            headerRow.appendChild(textContainer);\n            headerRow.appendChild(playButton);\n\n            eventRow.appendChild(headerRow);\n\n            return eventRow;\n        };\n\n        contentContainer.appendChild(createPasteEventDisplay(pasteEvents[0]));\n\n        carouselContainer.appendChild(navigationRow);\n        carouselContainer.appendChild(contentContainer);\n\n        panel.appendChild(carouselContainer);\n\n        let currentIndex = 0;\n\n        prevButton.addEventListener('click', () => {\n            if (currentIndex > 0) {\n                currentIndex--;\n                updatePasteEventDisplay();\n            }\n        });\n\n        nextButton.addEventListener('click', () => {\n            if (currentIndex < pasteEvents.length - 1) {\n                currentIndex++;\n                updatePasteEventDisplay();\n            }\n        });\n\n        const updatePasteEventDisplay = () => {\n            contentContainer.innerHTML = '';\n            contentContainer.appendChild(createPasteEventDisplay(pasteEvents[currentIndex]));\n\n            counterDisplay.textContent = 'Paste Events';\n\n            prevButton.disabled = currentIndex === 0;\n            prevButton.style.opacity = currentIndex === 0 ? '0.5' : '1';\n            nextButton.disabled = currentIndex === pasteEvents.length - 1;\n            nextButton.style.opacity = currentIndex === pasteEvents.length - 1 ? '0.5' : '1';\n        };\n    }\n\n    jumpToTimestamp(timestamp) {\n        const percentage = this.totalDuration > 0 ? (timestamp / this.totalDuration) * 100 : 0;\n\n        this.skipToTime(percentage);\n\n        if (!this.replayInProgress) {\n            this.startReplay(false);\n        }\n    }\n\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n\n            if (this.timeDisplay) {\n                const displayTime = Math.min(this.currentTime, this.totalDuration);\n                const currentTimeFormatted = this.formatTime(displayTime);\n                const totalTimeFormatted = this.formatTime(this.totalDuration);\n                this.timeDisplay.textContent = `${currentTimeFormatted} / ${totalTimeFormatted}`;\n            }\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response => {\n            return response;\n        }).fail(error => {\n            throw new Error('Error loading JSON file: ' + error.message);\n        });\n    }\n\n    formatTime(ms) {\n        const seconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n\n    // Call this to make a \"start\" or \"start over\" function\n    startReplay(reset = true) {\n        // Clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        const atEnd = (this.totalDuration > 0 && this.currentTime >= this.totalDuration) ||\n            (this.currentEventIndex >= this.totalEvents);\n        if (atEnd && !reset) {\n            reset = true;\n        }\n        this.replayInProgress = true;\n        if (reset) {\n            this.outputElement.innerHTML = '';\n            this.text = '';\n            this.cursorPosition = 0;\n            this.currentEventIndex = 0;\n            this.currentTime = 0;\n            this.highlightedChars = [];\n            this.deletedChars = [];\n            this.isControlKeyPressed = false;\n        }\n        if (this.playButton) {\n            const pauseSvg = document.createElement('i');\n            pauseSvg.className = 'fa fa-pause';\n            this.playButton.querySelector('.play-icon').innerHTML = pauseSvg.outerHTML;\n        }\n        this.replayLog();\n    }\n\n    // Called by startReplay() to recursively call through keydown events\n    replayLog() {\n        if (!this.replayInProgress) {\n            this.updateDisplayText(this.text, this.cursorPosition, [], []);\n            return;\n        }\n\n        while (this.currentEventIndex < this.logData.length) {\n            const event = this.logData[this.currentEventIndex];\n\n            if (event.normalizedTime && event.normalizedTime > this.currentTime) {\n                break;\n            }\n\n            let text = this.text || '';\n            let cursor = this.cursorPosition || 0;\n            let updatedHighlights = [...this.highlightedChars];\n            let updatedDeleted = [...this.deletedChars];\n\n            // Always update cursor position based on rePosition if available\n            if (event.rePosition !== undefined) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                }\n                else if (event.key !== \"v\") {\n                    if (event.key !== \"Control\") {\n                        this.isControlKeyPressed = false;\n                    }\n                    if (event.key !== \"Backspace\" && event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n                        this.isPasteEvent = false;\n                    }\n                }\n                else if (event.key == 'v' && this.isControlKeyPressed) {\n                    this.isPasteEvent = true;\n                    this.isControlKeyPressed = false;\n                }\n                if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    // Handle Control+Backspace word deletion\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            updatedDeleted.push({\n                                index: wordStart + i,\n                                char: wordToDelete[i],\n                                time: this.currentTime,\n                                expiresAt: this.currentTime + 2000\n                            });\n                        }\n                        // Remove the word\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                else if (event.key === \"Backspace\" && !this.isPasteEvent) {\n                    if (cursor > 0) {\n                        // Store the character being deleted\n                        updatedDeleted.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 2000 // Make deletions visible for 2 seconds\n                        });\n                        // Remove the character before cursor\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor--;\n                    }\n                }\n                else if (event.key === \"ArrowLeft\") {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                else if (event.key === \"ArrowRight\") {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                else if (charToInsert !== null && charToInsert !== \"\") {\n                    // Insert the character at cursor position\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    // Highlight non-space characters\n                    if (charToInsert.trim() !== \"\") {\n                        updatedHighlights.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 1500 // Make highlights visible for 1.5 seconds\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.text = text;\n            this.cursorPosition = cursor;\n\n            // Filter out expired highlights and deletions\n            this.highlightedChars = updatedHighlights.filter(h =>\n                !h.expiresAt || h.expiresAt > this.currentTime\n            );\n\n            this.deletedChars = updatedDeleted.filter(d =>\n                !d.expiresAt || d.expiresAt > this.currentTime\n            );\n\n            this.currentEventIndex++;\n        }\n\n        this.updateDisplayText(this.text, this.cursorPosition, this.highlightedChars, this.deletedChars);\n\n        // Update timeline\n        if (this.totalDuration > 0) {\n            const percentComplete = Math.min((this.currentTime / this.totalDuration) * 100, 100);\n            this.setScrubberVal(percentComplete);\n        }\n\n        // Continue or stop replay\n        if (this.replayInProgress) {\n            const baseIncrement = 100;\n            const incrementTime = baseIncrement / this.speed;\n            this.currentTime += baseIncrement;\n\n            if (this.currentEventIndex >= this.totalEvents) {\n                if (this.loop) {\n                    this.startReplay(true);\n                } else {\n                    this.stopReplay();\n                    this.updateDisplayText(this.text, this.cursorPosition, [], []);\n                }\n            } else {\n                this.replayTimeout = setTimeout(() => this.replayLog(), incrementTime);\n            }\n        }\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        const wasPlaying = this.replayInProgress;\n        if (wasPlaying) {\n            this.replayInProgress = false;\n            clearTimeout(this.replayTimeout);\n        }\n\n        const targetTime = (this.totalDuration * percentage) / 100;\n        this.currentTime = targetTime;\n        this.currentEventIndex = 0;\n        this.text = '';\n        this.cursorPosition = 0;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.isControlKeyPressed = false;\n\n        let text = '';\n        let cursor = 0;\n\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.normalizedTime && event.normalizedTime > targetTime) {\n                this.currentEventIndex = i;\n                break;\n            }\n\n            if (event.rePosition !== undefined) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                }\n                else if (event.key !== \"v\") {\n                    if (event.key !== \"Control\") {\n                        this.isControlKeyPressed = false;\n                    }\n                    if (event.key !== \"Backspace\" && event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n                        this.isPasteEvent = false;\n                    }\n                }\n                else if (event.key == 'v' && this.isControlKeyPressed) {\n                    this.isPasteEvent = true;\n                    this.isControlKeyPressed = false;\n                }\n                if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            this.deletedChars.push({\n                                index: wordStart + i,\n                                char: wordToDelete[i],\n                                time: targetTime,\n                                expiresAt: targetTime + 2000\n                            });\n                        }\n\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                else if (event.key === \"Backspace\" && !this.isPasteEvent) {\n                    if (cursor > 0) {\n                        this.deletedChars.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: targetTime,\n                            expiresAt: targetTime + 1000\n                        });\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor = Math.max(0, cursor - 1);\n                    }\n                }\n                else if (event.key === \"ArrowLeft\") {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                else if (event.key === \"ArrowRight\") {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                else if (charToInsert && charToInsert.length > 0) {\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    if (charToInsert.trim() !== \"\") {\n                        this.highlightedChars.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: targetTime,\n                            expiresAt: targetTime + 1000\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.currentEventIndex = i + 1;\n        }\n\n        this.text = text;\n        this.cursorPosition = cursor;\n        this.updateDisplayText(text, cursor, this.highlightedChars, this.deletedChars);\n        this.setScrubberVal(percentage);\n\n        if (wasPlaying) {\n            this.replayInProgress = true;\n            this.replayLog();\n        }\n    }\n\n\n    // Update display with text, cursor, highlights and deletions\n    updateDisplayText(text, cursorPosition, highlights, deletions) {\n        let html = '';\n        const highlightMap = {};\n        const deletionMap = {};\n        const currentTime = this.currentTime;\n\n        highlights.forEach(h => {\n            let opacity = 1;\n            if (h.expiresAt) {\n                const timeRemaining = h.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, timeRemaining / 500);\n                }\n            }\n            highlightMap[h.index] = { char: h.char, opacity: opacity };\n        });\n\n        deletions.forEach(d => {\n            let opacity = 0.5;\n            if (d.expiresAt) {\n                const timeRemaining = d.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, (timeRemaining / 500) * 0.5);\n                }\n            }\n            deletionMap[d.index] = { char: d.char, opacity: opacity };\n        });\n\n        // Find if we have out-of-bounds deletions (from Control+Backspace)\n        const outOfRangeDeletions = deletions.filter(d => d.index >= text.length);\n\n        const textLines = text.split('\\n');\n        let currentPosition = 0;\n\n        for (let lineIndex = 0; lineIndex < textLines.length; lineIndex++) {\n            const line = textLines[lineIndex];\n\n            for (let i = 0; i < line.length; i++) {\n                if (currentPosition === cursorPosition) {\n                    html += '<span class=\"tiny_cursive-cursor\">|</span>';\n                }\n\n                const char = line[i];\n\n                if (deletionMap[currentPosition]) {\n                    const deletion = deletionMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-deleted-char\" style=\"opacity: ${deletion.opacity};\">${deletion.char}</span>`;\n                }\n\n                if (highlightMap[currentPosition] && char !== ' ') {\n                    const highlight = highlightMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-highlighted-char\" style=\"opacity: ${highlight.opacity};\">${char}</span>`;\n                } else {\n                    html += char === ' ' ? '&nbsp;' : this.escapeHtml(char);\n                }\n\n                currentPosition++;\n            }\n\n            if (currentPosition === cursorPosition) {\n                html += '<span class=\"tiny_cursive-cursor\">|</span>';\n            }\n\n            if (lineIndex < textLines.length - 1) {\n                html += '<br>';\n                currentPosition++;\n            }\n        }\n\n        if (cursorPosition === text.length && !html.endsWith('<span class=\"tiny_cursive-cursor\">|</span>')) {\n            html += '<span class=\"tiny_cursive-cursor\">|</span>';\n        }\n\n        // For control + backspace functionalities\n        if (outOfRangeDeletions.length > 0) {\n            outOfRangeDeletions.sort((a, b) => a.index - b.index);\n\n            const cursorHTML = '<span class=\"tiny_cursive-cursor\">|</span>';\n            let cursorPos = html.lastIndexOf(cursorHTML);\n\n            if (cursorPos !== -1) {\n                let deletedWordHTML = '<span class=\"tiny_cursive-deleted-char\" style=\"opacity: 0.5;\">';\n                outOfRangeDeletions.forEach(d => {\n                    deletedWordHTML += d.char;\n                });\n                deletedWordHTML += '</span>';\n                html = html.substring(0, cursorPos) + deletedWordHTML + html.substring(cursorPos);\n            }\n        }\n\n        const wasScrolledToBottom = this.outputElement.scrollHeight -\n            this.outputElement.clientHeight <= this.outputElement.scrollTop + 1;\n\n        this.outputElement.innerHTML = html;\n\n        if (wasScrolledToBottom || this.isCursorBelowViewport()) {\n            this.outputElement.scrollTop = this.outputElement.scrollHeight;\n        }\n    }\n\n    // Check if cursor is below visible viewport\n    isCursorBelowViewport() {\n        const cursorElement = this.outputElement.querySelector('.tiny_cursive-cursor:last-of-type');\n        if (!cursorElement) {\n            return false;\n        }\n\n        const cursorRect = cursorElement.getBoundingClientRect();\n        const outputRect = this.outputElement.getBoundingClientRect();\n\n        return cursorRect.bottom > outputRect.bottom;\n    }\n\n    escapeHtml(unsafe) {\n        return unsafe\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    // Used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key) {\n        switch (key) {\n            case \"Enter\":\n                return \"\\n\";\n            case \"Backspace\":\n                return \"\";\n            case \"ControlBackspace\":\n                return \"\";\n            case \" \":\n                return \" \";\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\",\n                    \"ArrowLeft\", \"Meta\", \"CapsLock\", \"Tab\", \"Escape\", \"Delete\", \"PageUp\", \"PageDown\",\n                    \"Insert\", \"Home\", \"End\", \"NumLock\", \"AudioVolumeUp\", \"AudioVolumeDown\", \"MediaPlayPause\",\n                ]\n                    .includes(key) ? key : \"\";\n        }\n    }\n}"],"names":["constructor","elementId","filePath","speed","loop","controllerId","replayInProgress","parseFloat","highlightedChars","deletedChars","cursorPosition","currentEventIndex","totalEvents","currentTime","totalDuration","usercomments","pasteTimestamps","isPasteEvent","element","document","getElementById","Error","outputElement","classList","add","loadJSON","then","data","status","val","JSON","parse","logData","comments","Array","isArray","this","payload","length","unixTimestamp","startTime","map","event","normalizedTime","identifyPasteEvents","constructController","startReplay","Promise","all","templates","render","Str","get_string","results","html","str","newElement","text","catch","error","window","console","message","stopReplay","clearTimeout","replayTimeout","playSvg","createElement","src","M","util","image_url","playButton","querySelector","innerHTML","outerHTML","currentPosition","replayIntervalId","clearInterval","container","querySelectorAll","forEach","control","remove","panel","controlContainer","topRow","className","addEventListener","appendChild","scrubberContainer","scrubberElement","id","type","max","min","value","scrubberValue","parseInt","skipToTime","bottomRow","speedContainer","speedLabel","textContent","speedGroup","speedValue","speedBtn","dataset","btn","timeDisplay","pasteEventsToggle","pasteEventsIcon","pasteIcon","pasteEventsText","pasteEventCount","style","marginLeft","chevronIcon","chevron","transition","pasteEventsPanel","display","populatePasteEventsPanel","isHidden","transform","insertBefore","firstChild","controlPressed","pasteCount","i","toLowerCase","key","timestamp","userComment","push","index","time","formattedTime","formatTime","pastedText","lastIndex","removeChild","pasteEvents","noEventsMessage","carouselContainer","navigationRow","counterDisplay","navButtons","prevButton","leftChevron","nextButton","rightChevron","disabled","contentContainer","createPasteEventDisplay","pasteEvent","eventRow","headerRow","textContainer","timestampContainer","pastedTextContainer","playIcon","jumpToTimestamp","currentIndex","updatePasteEventDisplay","opacity","percentage","setScrubberVal","String","displayTime","Math","currentTimeFormatted","totalTimeFormatted","methodname","args","filepath","done","response","fail","ms","seconds","floor","minutes","remainingSeconds","toString","padStart","reset","isControlKeyPressed","pauseSvg","replayLog","cursor","updatedHighlights","updatedDeleted","undefined","rePosition","charToInsert","applyKey","wordStart","wordToDelete","substring","char","expiresAt","trim","filter","h","d","updateDisplayText","percentComplete","baseIncrement","incrementTime","setTimeout","skipToEnd","textOutput","slice","wasPlaying","targetTime","highlights","deletions","highlightMap","deletionMap","timeRemaining","outOfRangeDeletions","textLines","split","lineIndex","line","deletion","highlight","escapeHtml","endsWith","sort","a","b","cursorHTML","cursorPos","lastIndexOf","deletedWordHTML","wasScrolledToBottom","scrollHeight","clientHeight","scrollTop","isCursorBelowViewport","cursorElement","cursorRect","getBoundingClientRect","outputRect","bottom","unsafe","replace","includes"],"mappings":"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"}