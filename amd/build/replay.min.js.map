{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport {call as fetchJson} from 'core/ajax';\nimport templates from 'core/templates';\nimport $ from 'jquery';\nimport * as Str from 'core/str';\n\nexport default class Replay {\n    controllerId = '';\n\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        this.controllerId = controllerId;\n        this.replayInProgress = false;\n        this.speed = parseFloat(speed);\n        this.loop = loop;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.cursorPosition = 0;\n        this.currentEventIndex = 0;\n        this.totalEvents = 0;\n        this.currentTime = 0;\n        this.totalDuration = 0;\n        this.usercomments = [];\n        this.pasteTimestamps = [];\n        this.isPasteEvent = false;\n\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n\n        this.loadJSON(filePath)\n            .then((data) => {\n                if (data.status) {\n                    var val = JSON.parse(data.data);\n                    this.logData = val;\n                    if (data.comments) {\n                        var comments = JSON.parse(data.comments);\n                        this.usercomments = Array.isArray(comments) ? [...comments] : [];\n                    }\n\n                    if (\"data\" in this.logData) {\n                        this.logData = this.logData.data;\n                    }\n                    if (\"payload\" in this.logData) {\n                        this.logData = this.logData.payload;\n                    }\n\n                    if (this.logData.length > 0 && this.logData[0].unixTimestamp) {\n                        const startTime = this.logData[0].unixTimestamp;\n                        this.logData = this.logData.map(event => ({\n                            ...event,\n                            normalizedTime: event.unixTimestamp - startTime\n                        }));\n                        this.totalDuration = this.logData[this.logData.length - 1].normalizedTime;\n                    }\n\n                    this.totalEvents = this.logData.length;\n                    this.identifyPasteEvents();\n                    if (controllerId && this.logData) {\n                        this.constructController(controllerId);\n                    }\n                    this.startReplay();\n                } else {\n                    try {\n                        // eslint-disable-next-line\n                        Promise.all([\n                            templates.render('tiny_cursive/no_submission'),\n                            Str.get_string('warningpayload', 'tiny_cursive')\n                        ])\n                            .then(function (results) {\n                                var html = results[0];\n                                var str = results[1];\n                                var newElement = $(html);\n                                newElement.text(str);\n                                $('.tiny_cursive').html(newElement);\n                                return true;\n                            })\n                            .catch(function (error) {\n                                window.console.error(error);\n                            });\n                    } catch (error) {\n                        window.console.error(error);\n                    }\n                }\n                return data;\n            })\n            .catch(error => {\n                try {\n                    // eslint-disable-next-line\n                    Promise.all([\n                        templates.render('tiny_cursive/no_submission'),\n                        Str.get_string('warningpayload', 'tiny_cursive')\n                    ])\n                        .then(function (results) {\n                            var html = results[0];\n                            var str = results[1];\n                            var newElement = $(html);\n                            newElement.text(str);\n                            $('.tiny_cursive').html(newElement);\n                        })\n                        .catch(function (error) {\n                            window.console.error(error);\n                        });\n                } catch (error) {\n                    window.console.error(error);\n                }\n                window.console.error('Error loading JSON file: ' + error.message);\n            });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n            var playSvg = document.createElement('img');\n            playSvg.src = M.util.image_url('playicon', 'tiny_cursive');\n\n            if (this.playButton) {\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg.outerHTML;\n            }\n        }\n    }\n\n    constructController(controllerId) {\n        this.replayInProgress = false;\n        this.currentPosition = 0;\n        this.speed = 1;\n        if (this.replayIntervalId) {\n            clearInterval(this.replayIntervalId);\n            this.replayIntervalId = null;\n        }\n\n        const container = document.getElementById(controllerId);\n        if (!container) {\n            window.console.error(\"Container not found with ID:\", controllerId);\n            return;\n        }\n\n        const controlContainer = container.querySelector('.tiny_cursive_replay_control');\n        if (!controlContainer) {\n            window.console.error(\"Replay control container not found in:\", controllerId);\n            return;\n        }\n        controlContainer.innerHTML = '<span class=\"tiny_cursive_loading_spinner\"></span>';\n\n        const topRow = document.createElement('div');\n        topRow.classList.add('tiny_cursive_top_row');\n\n        // Play button\n        this.playButton = document.createElement('button');\n        this.playButton.classList.add('tiny_cursive_play_button');\n        const playSvg = document.createElement('i');\n        playSvg.className = '';\n        this.playButton.innerHTML = `<span class=\"play-icon\">${playSvg.outerHTML}</span>`;\n\n        this.playButton.addEventListener('click', () => {\n            if (this.replayInProgress) {\n                this.stopReplay();\n                const playImg = document.createElement('img');\n                playImg.src = M.util.image_url('playicon', 'tiny_cursive');\n                this.playButton.querySelector('.play-icon').innerHTML = playImg.outerHTML;\n            } else {\n                this.startReplay(false);\n            }\n        });\n        topRow.appendChild(this.playButton);\n\n        // Scrubber\n        const scrubberContainer = document.createElement('div');\n        scrubberContainer.classList.add('tiny_cursive_scrubber_container');\n\n        this.scrubberElement = document.createElement('input');\n        this.scrubberElement.classList.add('tiny_cursive_timeline_scrubber', 'timeline-scrubber');\n        this.scrubberElement.type = 'range';\n        this.scrubberElement.max = '100';\n        this.scrubberElement.min = '0';\n        this.scrubberElement.value = '0';\n\n        this.scrubberElement.addEventListener('input', () => {\n            const scrubberValue = parseInt(this.scrubberElement.value, 10);\n            this.skipToTime(scrubberValue);\n        });\n\n        scrubberContainer.appendChild(this.scrubberElement);\n        topRow.appendChild(scrubberContainer);\n\n        // Time display\n        this.timeDisplay = document.createElement('div');\n        this.timeDisplay.classList.add('tiny_cursive_time_display');\n        this.timeDisplay.textContent = '00:00 / 00:00';\n        topRow.appendChild(this.timeDisplay);\n\n        const bottomRow = document.createElement('div');\n        bottomRow.classList.add('tiny_cursive_bottom_row');\n\n        // Speed controls\n        const speedContainer = document.createElement('div');\n        speedContainer.classList.add('tiny_cursive_speed_controls', 'speed-controls');\n\n        const speedLabel = document.createElement('span');\n        speedLabel.classList.add('tiny_cursive_speed_label');\n        speedLabel.textContent = 'Speed: ';\n        speedContainer.appendChild(speedLabel);\n\n        const speedGroup = document.createElement('div');\n        speedGroup.classList.add('tiny_cursive_speed_group');\n\n        [1, 1.5, 2, 5, 10].forEach(speedValue => {\n            const speedBtn = document.createElement('button');\n            speedBtn.textContent = `${speedValue}x`;\n            speedBtn.classList.add('tiny_cursive_speed_btn', 'speed-btn');\n            if (parseFloat(speedValue) === parseFloat(this.speed)) {\n                speedBtn.classList.add('active');\n            }\n            speedBtn.dataset.speed = speedValue;\n\n            speedBtn.addEventListener('click', () => {\n                document.querySelectorAll('.tiny_cursive_speed_btn').forEach(btn => btn.classList.remove('active'));\n                speedBtn.classList.add('active');\n                this.speed = parseFloat(speedBtn.dataset.speed);\n                if (this.replayInProgress) {\n                    this.stopReplay();\n                    this.startReplay(false);\n                }\n            });\n\n            speedGroup.appendChild(speedBtn);\n        });\n\n        speedContainer.appendChild(speedGroup);\n        bottomRow.appendChild(speedContainer);\n\n        const existingPanel = container.querySelector('.paste-events-panel');\n        if (existingPanel) {\n            existingPanel.remove();\n        }\n\n        // Paste Events Toggle\n        const pasteEventsToggle = document.createElement('div');\n        pasteEventsToggle.classList.add('tiny_cursive_paste_events_toggle', 'paste-events-toggle');\n\n        const pasteEventsIcon = document.createElement('span');\n        const pasteIcon = document.createElement('img');\n        pasteIcon.src = M.util.image_url('pasteicon', 'tiny_cursive');\n        pasteEventsIcon.innerHTML = pasteIcon.outerHTML;\n        pasteEventsIcon.classList.add('tiny_cursive_paste_events_icon');\n\n        const pasteEventsText = document.createElement('span');\n        pasteEventsText.textContent = 'Paste Events';\n\n        const pasteEventCount = document.createElement('span');\n        pasteEventCount.textContent = `(${this.usercomments.length})`;\n        pasteEventCount.className = 'paste-event-count';\n        pasteEventCount.style.marginLeft = '2px';\n\n        const chevronIcon = document.createElement('span');\n        const chevron = document.createElement('i');\n        chevron.className = 'fa fa-chevron-down';\n        chevronIcon.innerHTML = chevron.outerHTML;\n        chevronIcon.style.marginLeft = '5px';\n        chevronIcon.style.transition = 'transform 0.3s ease';\n\n        pasteEventsToggle.appendChild(pasteEventsIcon);\n        pasteEventsToggle.appendChild(pasteEventsText);\n        pasteEventsToggle.appendChild(pasteEventCount);\n        pasteEventsToggle.appendChild(chevronIcon);\n\n        // Create Paste Events Panel\n        const pasteEventsPanel = document.createElement('div');\n        pasteEventsPanel.classList.add('tiny_cursive_paste_events_panel', 'paste-events-panel');\n        pasteEventsPanel.style.display = 'none';\n\n        this.populatePasteEventsPanel(pasteEventsPanel);\n\n        pasteEventsToggle.addEventListener('click', () => {\n            const isHidden = pasteEventsPanel.style.display === 'none';\n            pasteEventsPanel.style.display = isHidden ? 'block' : 'none';\n            chevronIcon.style.transform = isHidden ? 'rotate(180deg)' : 'rotate(0)';\n        });\n\n        bottomRow.appendChild(pasteEventsToggle);\n\n        this.pasteEventsPanel = pasteEventsPanel;\n        this.pasteEventCount = pasteEventCount;\n\n        controlContainer.appendChild(topRow);\n        controlContainer.appendChild(bottomRow);\n        container.appendChild(pasteEventsPanel);\n\n        controlContainer.querySelector('.tiny_cursive_loading_spinner')?.remove();\n    }\n\n    identifyPasteEvents() {\n        this.pasteTimestamps = [];\n        let controlPressed = false;\n        let pasteCount = 0;\n\n        // Check for finding Control+V combinations\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                if (event.key === \"Control\") {\n                    controlPressed = true;\n                } else if (event.key === \"v\" && controlPressed) {\n                    const timestamp = event.normalizedTime || 0;\n\n                    let userComment = \"\";\n                    if (this.usercomments && this.usercomments[pasteCount]) {\n                        userComment = this.usercomments[pasteCount];\n                    }\n\n                    this.pasteTimestamps.push({\n                        index: pasteCount,\n                        time: timestamp,\n                        formattedTime: this.formatTime(timestamp),\n                        pastedText: userComment,\n                        timestamp: timestamp\n                    });\n                    pasteCount++;\n\n                    controlPressed = false;\n                } else {\n                    controlPressed = false;\n                }\n            }\n        }\n\n        if (this.usercomments.length > 0 && this.pasteTimestamps.length === 0) {\n            for (let i = 0; i < this.usercomments.length; i++) {\n                this.pasteTimestamps.push({\n                    index: i,\n                    time: 0,\n                    formattedTime: this.formatTime(0),\n                    pastedText: this.usercomments[i],\n                    timestamp: 0\n                });\n            }\n        }\n\n        while (this.pasteTimestamps.length < this.usercomments.length) {\n            const lastIndex = this.pasteTimestamps.length;\n            this.pasteTimestamps.push({\n                index: lastIndex,\n                time: 0,\n                formattedTime: this.formatTime(0),\n                pastedText: this.usercomments[lastIndex],\n                timestamp: 0\n            });\n        }\n\n        if (this.pasteEventsPanel) {\n            this.populatePasteEventsPanel(this.pasteEventsPanel);\n        }\n    }\n\n    populatePasteEventsPanel(panel) {\n        panel.innerHTML = '';\n\n        while (panel.firstChild) {\n            panel.removeChild(panel.firstChild);\n        }\n        panel.classList.add('tiny_cursive_event_panel');\n\n        const pasteEvents = this.pasteTimestamps && this.pasteTimestamps.length ?\n            this.pasteTimestamps : [];\n\n        if (!pasteEvents || pasteEvents.length === 0) {\n            const noEventsMessage = document.createElement('div');\n            noEventsMessage.className = 'no-paste-events-message p-3';\n            noEventsMessage.textContent = 'No paste events detected for this submission.';\n            panel.appendChild(noEventsMessage);\n            return;\n        }\n\n        const carouselContainer = document.createElement('div');\n        carouselContainer.classList.add('tiny_cursive_paste_events_carousel', 'paste-events-carousel');\n\n        const navigationRow = document.createElement('div');\n        navigationRow.classList.add('paste-events-navigation', 'tiny_cursive_navigation_row');\n\n        const counterDisplay = document.createElement('div');\n        counterDisplay.classList.add('paste-events-counter', 'tiny_cursive_counter_display');\n        counterDisplay.textContent = 'Paste Events';\n\n        const navButtons = document.createElement('div');\n        navButtons.classList.add('tiny_cursive_nav_buttons', 'tiny_cursive_nav_buttons');\n\n        const prevButton = document.createElement('button');\n        prevButton.classList.add('paste-event-prev-btn', 'tiny_cursive_nav_button');\n        const leftChevron = document.createElement('i');\n        leftChevron.className = 'fa fa-chevron-left';\n        prevButton.innerHTML = leftChevron.outerHTML;\n\n        const nextButton = document.createElement('button');\n        nextButton.className = 'paste-event-next-btn tiny_cursive_nav_button';\n        const rightChevron = document.createElement('i');\n        rightChevron.className = 'fa fa-chevron-right';\n        nextButton.innerHTML = rightChevron.outerHTML;\n        nextButton.disabled = pasteEvents.length <= 1;\n\n        navButtons.appendChild(prevButton);\n        navButtons.appendChild(nextButton);\n\n        navigationRow.appendChild(counterDisplay);\n        navigationRow.appendChild(navButtons);\n\n        const contentContainer = document.createElement('div');\n        contentContainer.className = 'paste-events-content tiny_cursive_content_container';\n\n        // Create initial content with first paste event\n        const createPasteEventDisplay = (pasteEvent) => {\n            const eventRow = document.createElement('div');\n            eventRow.className = 'tiny_cursive_event_row';\n\n            // Header row with timestamp and play button\n            const headerRow = document.createElement('div');\n            headerRow.className = 'tiny_cursive_header_row';\n\n            // Timestamp and text container\n            const textContainer = document.createElement('div');\n            textContainer.className = 'tiny_cursive_text_container';\n\n            const timestampContainer = document.createElement('div');\n            timestampContainer.className = 'paste-event-timestamp tiny_cursive_paste_event_timestamp';\n            timestampContainer.textContent = pasteEvent.formattedTime;\n\n            const pastedTextContainer = document.createElement('div');\n            pastedTextContainer.className = 'paste-event-text tiny_cursive_pasted_text_container';\n            pastedTextContainer.textContent = pasteEvent.pastedText;\n\n            textContainer.appendChild(timestampContainer);\n            textContainer.appendChild(pastedTextContainer);\n\n            const playButton = document.createElement('button');\n            playButton.className = 'paste-event-play-btn tiny_cursive_seekplay_button';\n\n            const playIcon = document.createElement('img');\n            playIcon.src = M.util.image_url('seekplayicon', 'tiny_cursive');\n            playButton.innerHTML = playIcon.outerHTML;\n\n            playButton.addEventListener('click', () => {\n                this.jumpToTimestamp(pasteEvent.timestamp);\n            });\n\n            headerRow.appendChild(textContainer);\n            headerRow.appendChild(playButton);\n\n            eventRow.appendChild(headerRow);\n\n            return eventRow;\n        };\n\n        contentContainer.appendChild(createPasteEventDisplay(pasteEvents[0]));\n\n        carouselContainer.appendChild(navigationRow);\n        carouselContainer.appendChild(contentContainer);\n\n        panel.appendChild(carouselContainer);\n\n        let currentIndex = 0;\n\n        prevButton.addEventListener('click', () => {\n            if (currentIndex > 0) {\n                currentIndex--;\n                updatePasteEventDisplay();\n            }\n        });\n\n        nextButton.addEventListener('click', () => {\n            if (currentIndex < pasteEvents.length - 1) {\n                currentIndex++;\n                updatePasteEventDisplay();\n            }\n        });\n\n        const updatePasteEventDisplay = () => {\n            contentContainer.innerHTML = '';\n            contentContainer.appendChild(createPasteEventDisplay(pasteEvents[currentIndex]));\n\n            counterDisplay.textContent = 'Paste Events';\n\n            prevButton.disabled = currentIndex === 0;\n            prevButton.style.opacity = currentIndex === 0 ? '0.5' : '1';\n            nextButton.disabled = currentIndex === pasteEvents.length - 1;\n            nextButton.style.opacity = currentIndex === pasteEvents.length - 1 ? '0.5' : '1';\n        };\n    }\n\n    jumpToTimestamp(timestamp) {\n        const percentage = this.totalDuration > 0 ? (timestamp / this.totalDuration) * 100 : 0;\n\n        this.skipToTime(percentage);\n\n        if (!this.replayInProgress) {\n            this.startReplay(false);\n        }\n    }\n\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n\n            if (this.timeDisplay) {\n                const displayTime = Math.min(this.currentTime, this.totalDuration);\n                const currentTimeFormatted = this.formatTime(displayTime);\n                const totalTimeFormatted = this.formatTime(this.totalDuration);\n                this.timeDisplay.textContent = `${currentTimeFormatted} / ${totalTimeFormatted}`;\n            }\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response => {\n            return response;\n        }).fail(error => {\n            throw new Error('Error loading JSON file: ' + error.message);\n        });\n    }\n\n    formatTime(ms) {\n        const seconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n\n    // Call this to make a \"start\" or \"start over\" function\n    startReplay(reset = true) {\n        // Clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        const atEnd = (this.totalDuration > 0 && this.currentTime >= this.totalDuration) ||\n            (this.currentEventIndex >= this.totalEvents);\n        if (atEnd && !reset) {\n            reset = true;\n        }\n        this.replayInProgress = true;\n        if (reset) {\n            this.outputElement.innerHTML = '';\n            this.text = '';\n            this.cursorPosition = 0;\n            this.currentEventIndex = 0;\n            this.currentTime = 0;\n            this.highlightedChars = [];\n            this.deletedChars = [];\n            this.isControlKeyPressed = false;\n        }\n        if (this.playButton) {\n            const pauseSvg = document.createElement('i');\n            pauseSvg.className = 'fa fa-pause';\n            this.playButton.querySelector('.play-icon').innerHTML = pauseSvg.outerHTML;\n        }\n        this.replayLog();\n    }\n\n    // Called by startReplay() to recursively call through keydown events\n    replayLog() {\n        if (!this.replayInProgress) {\n            this.updateDisplayText(this.text, this.cursorPosition, [], []);\n            return;\n        }\n\n        while (this.currentEventIndex < this.logData.length) {\n            const event = this.logData[this.currentEventIndex];\n\n            if (event.normalizedTime && event.normalizedTime > this.currentTime) {\n                break;\n            }\n\n            let text = this.text || '';\n            let cursor = this.cursorPosition || 0;\n            let updatedHighlights = [...this.highlightedChars];\n            let updatedDeleted = [...this.deletedChars];\n\n            // Use rePosition for the first event or mouse events\n            if (event.rePosition !== undefined && (this.currentEventIndex === 0\n                || event.event === 'mouseDown' || event.event === 'mouseUp')) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                }\n                else if (event.key !== \"v\") {\n                    if (event.key !== \"Control\" && event.key !== 'Backspace' && event.key !== 'Delete' && \n                        event.key !== 'ArrowLeft' && event.key !== 'ArrowRight') {\n                        this.isControlKeyPressed = false;\n                    }\n                    if (event.key !== \"Backspace\" && event.key !== \"Delete\" && \n                        event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n                        this.isPasteEvent = false;\n                    }\n                }\n                else if (event.key === 'v' && this.isControlKeyPressed) {\n                    this.isPasteEvent = true;\n                    this.isControlKeyPressed = false;\n                }\n                if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    // Handle Control+Backspace word deletion\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            updatedDeleted.push({\n                                index: wordStart + i,\n                                char: wordToDelete[i],\n                                time: this.currentTime,\n                                expiresAt: this.currentTime + 2000\n                            });\n                        }\n                        // Remove the word\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                }\n                // Handle Ctrl+Delete\n                else if (event.key === \"Delete\" && this.isControlKeyPressed) {\n                    if (cursor < text.length) {\n                        const wordEnd = this.findNextWordBoundary(text, cursor);\n                        const wordToDelete = text.substring(cursor, wordEnd);\n                        \n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            updatedDeleted.push({\n                                index: cursor + i,\n                                char: wordToDelete[i],\n                                time: this.currentTime,\n                                expiresAt: this.currentTime + 2000\n                            });\n                        }\n                        \n                        // Remove the word from text\n                        text = text.substring(0, cursor) + text.substring(wordEnd);\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                // Handle Ctrl+ArrowLeft\n                else if (event.key === \"ArrowLeft\" && this.isControlKeyPressed) {\n                    cursor = this.findPreviousWordBoundary(text, cursor);\n                }\n                // Handle Ctrl+ArrowRight\n                else if (event.key === \"ArrowRight\" && this.isControlKeyPressed) {\n                    cursor = this.findNextWordBoundary(text, cursor);\n                }\n                // Handle regular Backspace\n                else if (event.key === \"Backspace\" && !this.isPasteEvent) {\n                    if (cursor > 0) {\n                        // Store the character being deleted\n                        updatedDeleted.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 2000 // Make deletions visible for 2 seconds\n                        });\n                        // Remove the character before cursor\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor--;\n                    }\n                }\n                // Handle Delete key\n                else if (event.key === \"Delete\" && !this.isControlKeyPressed) {\n                    if (cursor < text.length) {\n                        updatedDeleted.push({\n                            index: cursor,\n                            char: text[cursor],\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 2000\n                        });\n                        text = text.substring(0, cursor) + text.substring(cursor + 1);\n                    }\n                }\n                // Handle ArrowLeft\n                else if (event.key === \"ArrowLeft\" && !this.isControlKeyPressed) {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                // Handle ArrowRight\n                else if (event.key === \"ArrowRight\" && !this.isControlKeyPressed) {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                // Handle character insertion\n                else if (charToInsert !== null && charToInsert !== \"\") {\n                    // Insert the character at cursor position\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    // Highlight non-space characters\n                    if (charToInsert.trim() !== \"\") {\n                        updatedHighlights.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 1500 // Make highlights visible for 1.5 seconds\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.text = text;\n            this.cursorPosition = cursor;\n\n            // Filter out expired highlights and deletions\n            this.highlightedChars = updatedHighlights.filter(h =>\n                !h.expiresAt || h.expiresAt > this.currentTime\n            );\n\n            this.deletedChars = updatedDeleted.filter(d =>\n                !d.expiresAt || d.expiresAt > this.currentTime\n            );\n\n            this.currentEventIndex++;\n        }\n\n        this.updateDisplayText(this.text, this.cursorPosition, this.highlightedChars, this.deletedChars);\n\n        // Update timeline\n        if (this.totalDuration > 0) {\n            const percentComplete = Math.min((this.currentTime / this.totalDuration) * 100, 100);\n            this.setScrubberVal(percentComplete);\n        }\n\n        // Continue or stop replay\n        if (this.replayInProgress) {\n            const baseIncrement = 100;\n            const incrementTime = baseIncrement / this.speed;\n            this.currentTime += baseIncrement;\n\n            if (this.currentEventIndex >= this.totalEvents) {\n                if (this.loop) {\n                    this.startReplay(true);\n                } else {\n                    this.stopReplay();\n                    this.updateDisplayText(this.text, this.cursorPosition, [], []);\n                }\n            } else {\n                this.replayTimeout = setTimeout(() => this.replayLog(), incrementTime);\n            }\n        }\n    }\n\n    findNextWordBoundary(text, cursor) {\n        if (!text || cursor >= text.length) {\n            return cursor;\n        }\n    \n        if (text[cursor] === ' ') {\n            while (cursor < text.length && text[cursor] === ' ') {\n                cursor++;\n            }\n        }\n    \n        if (cursor >= text.length) {\n            let lastNonSpace = text.length - 1;\n            while (lastNonSpace >= 0 && text[lastNonSpace] === ' ') {\n                lastNonSpace--;\n            }\n            cursor = lastNonSpace + 1;\n            return cursor;\n        }\n    \n        let wordEnd = cursor;\n        while (wordEnd < text.length && text[wordEnd] !== ' ') {\n            wordEnd++;\n        }\n    \n        return wordEnd;\n    }\n    \n    findPreviousWordBoundary(text, cursor) {\n        let pos = cursor;\n        \n        if (pos <= 0) {\n            return 0;\n        }\n        \n        pos--;\n        \n        while (pos > 0 && (text[pos] === ' ' || text[pos] === '\\n')) {\n            pos--;\n        }\n\n        while (pos > 0 && text[pos - 1] !== ' ' && text[pos - 1] !== '\\n') {\n            pos--;\n        }\n        \n        return pos;\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        const wasPlaying = this.replayInProgress;\n        if (wasPlaying) {\n            this.replayInProgress = false;\n            clearTimeout(this.replayTimeout);\n        }\n\n        const targetTime = (this.totalDuration * percentage) / 100;\n        this.currentTime = targetTime;\n        this.currentEventIndex = 0;\n        this.text = '';\n        this.cursorPosition = 0;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.isControlKeyPressed = false;\n        this.isPasteEvent = false;\n\n        let text = '';\n        let cursor = 0;\n        let updatedHighlights = [];\n        let updatedDeleted = [];\n\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.normalizedTime && event.normalizedTime > targetTime) {\n                this.currentEventIndex = i;\n                break;\n            }\n    \n            // Use rePosition for first event or mouse events\n            if (event.rePosition !== undefined && (i === 0 || event.event === 'mouseDown' || event.event === 'mouseUp')) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n    \n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n    \n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                } else if (event.key !== \"v\") {\n                    if (event.key !== \"Control\" && event.key !== 'Backspace' && event.key !== 'Delete' &&\n                        event.key !== 'ArrowLeft' && event.key !== 'ArrowRight') {\n                        this.isControlKeyPressed = false;\n                    }\n                    if (event.key !== \"Backspace\" && event.key !== \"Delete\" &&\n                        event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n                        this.isPasteEvent = false;\n                    }\n                } else if (event.key === 'v' && this.isControlKeyPressed) {\n                    this.isPasteEvent = true;\n                    this.isControlKeyPressed = false;\n                }\n    \n                // Handle Ctrl+Backspace\n                if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let j = 0; j < wordToDelete.length; j++) {\n                            updatedDeleted.push({\n                                index: wordStart + j,\n                                char: wordToDelete[j],\n                                time: targetTime,\n                                expiresAt: targetTime + 2000\n                            });\n                        }\n\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                // Handle Ctrl+Delete\n                else if (event.key === \"Delete\" && this.isControlKeyPressed) {\n                    if (cursor < text.length) {\n                        const wordEnd = this.findNextWordBoundary(text, cursor);\n                        const wordToDelete = text.substring(cursor, wordEnd);\n    \n                        for (let j = 0; j < wordToDelete.length; j++) {\n                            updatedDeleted.push({\n                                index: cursor + j,\n                                char: wordToDelete[j],\n                                time: targetTime,\n                                expiresAt: targetTime + 2000\n                            });\n                        }\n    \n                        text = text.substring(0, cursor) + text.substring(wordEnd);\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                // Handle Ctrl+ArrowLeft\n                else if (event.key === \"ArrowLeft\" && this.isControlKeyPressed) {\n                    cursor = this.findPreviousWordBoundary(text, cursor);\n                }\n                // Handle Ctrl+ArrowRight\n                else if (event.key === \"ArrowRight\" && this.isControlKeyPressed) {\n                    cursor = this.findNextWordBoundary(text, cursor);\n                }\n                // Handle regular Backspace\n                else if (event.key === \"Backspace\" && !this.isPasteEvent) {\n                    if (cursor > 0) {\n                        updatedDeleted.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: targetTime,\n                            expiresAt: targetTime + 2000\n                        });\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor--;\n                    }\n                }\n                // Handle Delete key\n                else if (event.key === \"Delete\" && !this.isControlKeyPressed) {\n                    if (cursor < text.length) {\n                        updatedDeleted.push({\n                            index: cursor,\n                            char: text[cursor],\n                            time: targetTime,\n                            expiresAt: targetTime + 2000\n                        });\n                        text = text.substring(0, cursor) + text.substring(cursor + 1);\n                    }\n                }\n                // Handle ArrowLeft\n                else if (event.key === \"ArrowLeft\" && !this.isControlKeyPressed) {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                // Handle ArrowRight\n                else if (event.key === \"ArrowRight\" && !this.isControlKeyPressed) {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                // Handle character insertion\n                else if (charToInsert && charToInsert.length > 0) {\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    if (charToInsert.trim() !== \"\") {\n                        updatedHighlights.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: targetTime,\n                            expiresAt: targetTime + 1500\n                        });\n                    }\n                    cursor++;\n                }\n            }\n    \n            this.currentEventIndex = i + 1;\n        }\n        // Filter expired highlights and deletions\n        this.highlightedChars = updatedHighlights.filter(h => !h.expiresAt || h.expiresAt > targetTime);\n        this.deletedChars = updatedDeleted.filter(d => !d.expiresAt || d.expiresAt > targetTime);\n    \n        this.text = text;\n        this.cursorPosition = cursor;\n        this.updateDisplayText(text, cursor, this.highlightedChars, this.deletedChars);\n        this.setScrubberVal(percentage);\n\n        if (wasPlaying) {\n            this.replayInProgress = true;\n            this.replayLog();\n        }\n    }\n\n\n    // Update display with text, cursor, highlights and deletions\n    updateDisplayText(text, cursorPosition, highlights, deletions) {\n        let html = '';\n        const highlightMap = {};\n        const deletionMap = {};\n        const currentTime = this.currentTime;\n\n        highlights.forEach(h => {\n            let opacity = 1;\n            if (h.expiresAt) {\n                const timeRemaining = h.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, timeRemaining / 500);\n                }\n            }\n            highlightMap[h.index] = { char: h.char, opacity: opacity };\n        });\n\n        deletions.forEach(d => {\n            let opacity = 0.5;\n            if (d.expiresAt) {\n                const timeRemaining = d.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, (timeRemaining / 500) * 0.5);\n                }\n            }\n            deletionMap[d.index] = { char: d.char, opacity: opacity };\n        });\n\n        // Find if we have out-of-bounds deletions (from Control+Backspace)\n        const outOfRangeDeletions = deletions.filter(d => d.index >= text.length);\n\n        const textLines = text.split('\\n');\n        let currentPosition = 0;\n\n        for (let lineIndex = 0; lineIndex < textLines.length; lineIndex++) {\n            const line = textLines[lineIndex];\n\n            for (let i = 0; i < line.length; i++) {\n                if (currentPosition === cursorPosition) {\n                    html += '<span class=\"tiny_cursive-cursor\"></span>';\n                }\n\n                const char = line[i];\n\n                if (deletionMap[currentPosition]) {\n                    const deletion = deletionMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-deleted-char\" style=\"opacity: ${deletion.opacity};\">${deletion.char}</span>`;\n                }\n\n                if (highlightMap[currentPosition] && char !== ' ') {\n                    const highlight = highlightMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-highlighted-char\" style=\"opacity: ${highlight.opacity};\">${char}</span>`;\n                } else {\n                    html += char === ' ' ? '&nbsp;' : this.escapeHtml(char);\n                }\n\n                currentPosition++;\n            }\n\n            if (currentPosition === cursorPosition) {\n                html += '<span class=\"tiny_cursive-cursor\"></span>';\n            }\n\n            if (lineIndex < textLines.length - 1) {\n                html += '<br>';\n                currentPosition++;\n            }\n        }\n\n        if (cursorPosition === text.length && !html.endsWith('<span class=\"tiny_cursive-cursor\"></span>')) {\n            html += '<span class=\"tiny_cursive-cursor\"></span>';\n        }\n\n        // For control + backspace functionalities\n        if (outOfRangeDeletions.length > 0) {\n            outOfRangeDeletions.sort((a, b) => a.index - b.index);\n\n            const cursorHTML = '<span class=\"tiny_cursive-cursor\"></span>';\n            let cursorPos = html.lastIndexOf(cursorHTML);\n\n            if (cursorPos !== -1) {\n                let deletedWordHTML = '<span class=\"tiny_cursive-deleted-char\" style=\"opacity: 0.5;\">';\n                outOfRangeDeletions.forEach(d => {\n                    deletedWordHTML += d.char;\n                });\n                deletedWordHTML += '</span>';\n                html = html.substring(0, cursorPos) + deletedWordHTML + html.substring(cursorPos);\n            }\n        }\n\n        const wasScrolledToBottom = this.outputElement.scrollHeight -\n            this.outputElement.clientHeight <= this.outputElement.scrollTop + 1;\n\n        this.outputElement.innerHTML = html;\n\n        if (wasScrolledToBottom || this.isCursorBelowViewport()) {\n            this.outputElement.scrollTop = this.outputElement.scrollHeight;\n        }\n    }\n\n    // Check if cursor is below visible viewport\n    isCursorBelowViewport() {\n        const cursorElement = this.outputElement.querySelector('.tiny_cursive-cursor:last-of-type');\n        if (!cursorElement) {\n            return false;\n        }\n\n        const cursorRect = cursorElement.getBoundingClientRect();\n        const outputRect = this.outputElement.getBoundingClientRect();\n\n        return cursorRect.bottom > outputRect.bottom;\n    }\n\n    escapeHtml(unsafe) {\n        return unsafe\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    // Used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key) {\n        switch (key) {\n            case \"Enter\":\n                return \"\\n\";\n            case \"Backspace\":\n            case \"Delete\":\n                return \"\";\n            case \"ControlBackspace\":\n                return \"\";\n            case \" \":\n                return \" \";\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\",\n                    \"ArrowLeft\", \"Meta\", \"CapsLock\", \"Tab\", \"Escape\", \"Delete\", \"PageUp\", \"PageDown\",\n                    \"Insert\", \"Home\", \"End\", \"NumLock\", \"Insert\", \"Home\", \"End\", \"NumLock\", \"AudioVolumeUp\",\n                    \"AudioVolumeDown\", \"MediaPlayPause\", \"F1\", \"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\",\n                    \"F10\", \"F11\", \"F12\", \"PrintScreen\", \"UnIdentified\"]\n                    .includes(key) ? key : \"\";\n        }\n    }\n}"],"names":["constructor","elementId","filePath","speed","loop","controllerId","replayInProgress","parseFloat","highlightedChars","deletedChars","cursorPosition","currentEventIndex","totalEvents","currentTime","totalDuration","usercomments","pasteTimestamps","isPasteEvent","element","document","getElementById","Error","outputElement","loadJSON","then","data","status","val","JSON","parse","logData","comments","Array","isArray","this","payload","length","unixTimestamp","startTime","map","event","normalizedTime","identifyPasteEvents","constructController","startReplay","Promise","all","templates","render","Str","get_string","results","html","str","newElement","text","catch","error","window","console","message","stopReplay","clearTimeout","replayTimeout","playSvg","createElement","src","M","util","image_url","playButton","querySelector","innerHTML","outerHTML","currentPosition","replayIntervalId","clearInterval","container","controlContainer","topRow","classList","add","className","addEventListener","playImg","appendChild","scrubberContainer","scrubberElement","type","max","min","value","scrubberValue","parseInt","skipToTime","timeDisplay","textContent","bottomRow","speedContainer","speedLabel","speedGroup","forEach","speedValue","speedBtn","dataset","querySelectorAll","btn","remove","existingPanel","pasteEventsToggle","pasteEventsIcon","pasteIcon","pasteEventsText","pasteEventCount","style","marginLeft","chevronIcon","chevron","transition","pasteEventsPanel","display","populatePasteEventsPanel","isHidden","transform","controlPressed","pasteCount","i","toLowerCase","key","timestamp","userComment","push","index","time","formattedTime","formatTime","pastedText","lastIndex","panel","firstChild","removeChild","pasteEvents","noEventsMessage","carouselContainer","navigationRow","counterDisplay","navButtons","prevButton","leftChevron","nextButton","rightChevron","disabled","contentContainer","createPasteEventDisplay","pasteEvent","eventRow","headerRow","textContainer","timestampContainer","pastedTextContainer","playIcon","jumpToTimestamp","currentIndex","updatePasteEventDisplay","opacity","percentage","setScrubberVal","String","displayTime","Math","currentTimeFormatted","totalTimeFormatted","methodname","args","filepath","done","response","fail","ms","seconds","floor","minutes","remainingSeconds","toString","padStart","reset","isControlKeyPressed","pauseSvg","replayLog","cursor","updatedHighlights","updatedDeleted","undefined","rePosition","charToInsert","applyKey","wordStart","wordToDelete","substring","char","expiresAt","wordEnd","findNextWordBoundary","findPreviousWordBoundary","trim","filter","h","d","updateDisplayText","percentComplete","baseIncrement","incrementTime","setTimeout","lastNonSpace","pos","skipToEnd","textOutput","slice","wasPlaying","targetTime","j","highlights","deletions","highlightMap","deletionMap","timeRemaining","outOfRangeDeletions","textLines","split","lineIndex","line","deletion","highlight","escapeHtml","endsWith","sort","a","b","cursorHTML","cursorPos","lastIndexOf","deletedWordHTML","wasScrolledToBottom","scrollHeight","clientHeight","scrollTop","isCursorBelowViewport","cursorElement","cursorRect","getBoundingClientRect","outputRect","bottom","unsafe","replace","includes"],"mappings":"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"}