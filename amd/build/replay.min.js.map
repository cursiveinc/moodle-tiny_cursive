{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport { call as fetchJson } from 'core/ajax';\nimport templates from 'core/templates';\nimport $ from 'jquery';\nimport * as Str from 'core/str';\n\nexport default class Replay {\n    controllerId = '';\n\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        this.controllerId = controllerId;\n        this.replayInProgress = false;\n        this.speed = parseFloat(speed);\n        this.loop = loop;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.cursorPosition = 0;\n        this.currentEventIndex = 0;\n        this.totalEvents = 0;\n        this.currentTime = 0;\n        this.totalDuration = 0;\n        this.usercomments = [];\n        this.pasteTimestamps = [];\n        this.originalContent = \"\";\n        this.isPasteEvent = false;\n\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n            this.outputElement.style.whiteSpace = 'pre-wrap';\n            this.outputElement.style.wordBreak = 'break-word';\n            this.outputElement.style.maxWidth = '100%';\n            this.outputElement.style.overflow = 'auto';\n            this.outputElement.style.fontFamily = 'monospace';\n            this.outputElement.style.padding = '10px';\n            this.outputElement.style.border = '1px solid #e0e0e0';\n            this.outputElement.style.borderRadius = '4px';\n            this.outputElement.style.minHeight = '100px';\n            this.outputElement.style.backgroundColor = '#fff';\n        } else {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n\n        this.loadJSON(filePath)\n            .then((data) => {\n                if (data.status) {\n                    var val = JSON.parse(data.data);\n                    this.logData = val;\n                    this.originalContent = data.original;\n                    window.console.log(\"Data: \", data.data);\n                    if (data.comments) {\n                        var comments = JSON.parse(data.comments);\n                        this.usercomments = Array.isArray(comments) ? [...comments] : [];\n                    }\n                    if (\"data\" in this.logData) {\n                        this.logData = this.logData.data;\n                    }\n                    if (\"payload\" in this.logData) {\n                        this.logData = this.logData.payload;\n                    }\n                    if (this.logData.length > 0 && this.logData[0].unixTimestamp) {\n                        const startTime = this.logData[0].unixTimestamp;\n                        this.logData = this.logData.map(event => ({\n                            ...event,\n                            normalizedTime: event.unixTimestamp - startTime\n                        }));\n                        this.totalDuration = this.logData[this.logData.length - 1].normalizedTime;\n                    }\n                    this.totalEvents = this.logData.length;\n                    this.identifyPasteEvents();\n                    if (controllerId && this.logData) {\n                        this.constructController(controllerId);\n                    }\n                    this.startReplay();\n                } else {\n                    try {\n                        // eslint-disable-next-line\n                        Promise.all([\n                            templates.render('tiny_cursive/no_submission'),\n                            Str.get_string('warningpayload', 'tiny_cursive')\n                        ])\n                            .then(function (results) {\n                                var html = results[0];\n                                var str = results[1];\n                                var updatedHtml = html.replace('No Submission', str);\n                                $('.tiny_cursive').html(updatedHtml);\n                                return true;\n                            })\n                            .catch(function (error) {\n                                window.console.error(error);\n                            });\n                    } catch (error) {\n                        window.console.error(error);\n                    }\n                }\n                return data;\n            })\n            .catch(error => {\n                try {\n                    // eslint-disable-next-line\n                    Promise.all([\n                        templates.render('tiny_cursive/no_submission'),\n                        Str.get_string('warningpayload', 'tiny_cursive')\n                    ])\n                        .then(function (results) {\n                            var html = results[0];\n                            var str = results[1];\n                            var updatedHtml = html.replace('No Submission', str);\n                            $('.tiny_cursive').html(updatedHtml);\n                            return true;\n                        })\n                        .catch(function (error) {\n                            window.console.error(error);\n                        });\n                } catch (error) {\n                    window.console.error(error);\n                }\n                window.console.error('Error loading JSON file: ' + error.message);\n            });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n            const playSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\"\n            viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <polygon points=\"5,3 19,12 5,21\" />\n            </svg>`;\n            if (this.playButton) {\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg;\n            }\n        }\n    }\n\n    constructController(controllerId) {\n        this.replayInProgress = false;\n        this.currentPosition = 0;\n        this.speed = 1;\n        if (this.replayIntervalId) {\n            clearInterval(this.replayIntervalId);\n            this.replayIntervalId = null;\n        }\n        const container = document.getElementById(controllerId);\n        if (!container) {\n            window.console.error(\"Container element not found with ID:\", controllerId);\n            return;\n        }\n        // Clean up any existing controls first\n        const existingControls = container.querySelectorAll('.replay-control');\n        existingControls.forEach(control => control.remove());\n\n        // Check if there's an existing paste events panel\n        const existingPanels = container.querySelectorAll('.paste-events-panel');\n        existingPanels.forEach(panel => panel.remove());\n\n        // Create a container for all controls\n        const controlContainer = document.createElement('div');\n        controlContainer.className = 'replay-control';\n        controlContainer.style.display = 'flex';\n        controlContainer.style.flexDirection = 'column';\n        controlContainer.style.gap = '10px';\n        controlContainer.style.margin = '10px 0';\n        controlContainer.style.alignItems = 'center';\n        controlContainer.style.padding = '10px';\n        controlContainer.style.paddingBottom = '10px';\n        controlContainer.style.borderRadius = '8px';\n        controlContainer.style.backgroundColor = '#f8f9fa';\n        controlContainer.style.boxShadow = '0 2px 8px rgba(0,0,0,0.1)';\n        controlContainer.style.width = '100%';\n\n        // Create first row for play button and scrubber\n        const topRow = document.createElement('div');\n        topRow.style.display = 'flex';\n        topRow.style.width = '100%';\n        topRow.style.gap = '12px';\n        topRow.style.alignItems = 'center';\n\n        // Create play button\n        this.playButton = document.createElement('button');\n        this.playButton.className = 'play-button';\n        this.playButton.style.minWidth = '36px';\n        this.playButton.style.height = '36px';\n        this.playButton.style.borderRadius = '50%';\n        this.playButton.style.background = '#4285f4';\n        this.playButton.style.color = 'white';\n        this.playButton.style.border = 'none';\n        this.playButton.style.cursor = 'pointer';\n        this.playButton.style.display = 'flex';\n        this.playButton.style.alignItems = 'center';\n        this.playButton.style.justifyContent = 'center';\n        this.playButton.style.transition = 'background-color 0.2s, transform 0.1s';\n        this.playButton.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';\n        this.playButton.style.flexShrink = '0';\n\n        const playSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\"\n        viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n        <polygon points=\"5,3 19,12 5,21\"></polygon>\n        </svg>`;\n        this.playButton.innerHTML = `<span class=\"play-icon\">${playSvg}</span>`;\n        this.playButton.addEventListener('mouseover', () => {\n            this.playButton.style.background = '#3367d6';\n            this.playButton.style.transform = 'scale(1.05)';\n        });\n        this.playButton.addEventListener('mouseout', () => {\n            this.playButton.style.background = '#4285f4';\n            this.playButton.style.transform = 'scale(1)';\n        });\n        this.playButton.addEventListener('click', () => {\n            if (this.replayInProgress) {\n                this.stopReplay();\n                const playSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\"\n                viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n                <polygon points=\"5,3 19,12 5,21\"></polygon>\n                </svg>`;\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg;\n            } else {\n                this.startReplay(false);\n            }\n        });\n        topRow.appendChild(this.playButton);\n\n        // Create timeline scrubber\n        const scrubberContainer = document.createElement('div');\n        scrubberContainer.style.flexGrow = '1';\n        scrubberContainer.style.width = '100%';\n\n        this.scrubberElement = document.createElement('input');\n        this.scrubberElement.type = 'range';\n        this.scrubberElement.id = 'timelineScrubber';\n        this.scrubberElement.className = 'timeline-scrubber';\n        this.scrubberElement.min = '0';\n        this.scrubberElement.max = '100';\n        this.scrubberElement.value = '0';\n        this.scrubberElement.style.width = '100%';\n        this.scrubberElement.style.height = '8px';\n        this.scrubberElement.style.borderRadius = '4px';\n        this.scrubberElement.style.accentColor = '#4285f4';\n        this.scrubberElement.addEventListener('input', () => {\n            const scrubberValue = parseInt(this.scrubberElement.value, 10);\n            this.skipToTime(scrubberValue);\n        });\n\n        scrubberContainer.appendChild(this.scrubberElement);\n        topRow.appendChild(scrubberContainer);\n\n        // Create second row for speed controls and time display\n        const bottomRow = document.createElement('div');\n        bottomRow.style.display = 'flex';\n        bottomRow.style.width = '100%';\n        bottomRow.style.justifyContent = 'space-between';\n        bottomRow.style.alignItems = 'center';\n        bottomRow.style.marginTop = '5px';\n\n        // Create Speed controls\n        const speedContainer = document.createElement('div');\n        speedContainer.className = 'speed-controls';\n        speedContainer.style.display = 'flex';\n        speedContainer.style.gap = '6px';\n        speedContainer.style.flexShrink = '0';\n        speedContainer.style.alignItems = 'center';\n\n        const speedLabel = document.createElement('span');\n        speedLabel.textContent = 'Speed: ';\n        speedLabel.style.fontSize = '14px';\n        speedLabel.style.fontWeight = '500';\n        speedLabel.style.color = '#333';\n        speedLabel.style.marginRight = '4px';\n        speedContainer.appendChild(speedLabel);\n\n        // Create a single button like container for speed options\n        const speedGroup = document.createElement('div');\n        speedGroup.style.display = 'flex';\n        speedGroup.style.borderRadius = '6px';\n        speedGroup.style.overflow = 'hidden';\n        speedGroup.style.border = '1px solid #e0e0e0';\n\n        [1, 1.5, 2, 5, 10].forEach(speedValue => {\n            const speedBtn = document.createElement('button');\n            speedBtn.textContent = `${speedValue}x`;\n            speedBtn.className = `speed-btn ${parseFloat(speedValue) === parseFloat(this.speed) ? 'active' : ''}`;\n            speedBtn.style.padding = '6px 10px';\n            speedBtn.style.border = 'none';\n            speedBtn.style.borderRight = speedValue !== 10 ? '1px solid #e0e0e0' : 'none';\n            speedBtn.style.background = parseFloat(speedValue) === parseFloat(this.speed) ? '#4285f4' : 'white';\n            speedBtn.style.color = parseFloat(speedValue) === parseFloat(this.speed) ? 'white' : '#333';\n            speedBtn.style.cursor = 'pointer';\n            speedBtn.style.fontSize = '13px';\n            speedBtn.style.fontWeight = '500';\n            speedBtn.style.transition = 'background 0.2s, color 0.2s';\n            speedBtn.dataset.speed = speedValue;\n            speedBtn.addEventListener('mouseover', () => {\n                if (!speedBtn.classList.contains('active')) {\n                    speedBtn.style.background = '#f1f3f4';\n                }\n            });\n            speedBtn.addEventListener('mouseout', () => {\n                if (!speedBtn.classList.contains('active')) {\n                    speedBtn.style.background = 'white';\n                }\n            });\n            speedBtn.addEventListener('click', () => {\n                document.querySelectorAll('.speed-btn').forEach(btn => {\n                    btn.style.background = 'white';\n                    btn.style.color = '#333';\n                    btn.classList.remove('active');\n                });\n                speedBtn.style.background = '#4285f4';\n                speedBtn.style.color = 'white';\n                speedBtn.classList.add('active');\n                this.speed = parseFloat(speedBtn.dataset.speed);\n                // Restart to apply the new speed\n                const wasPlaying = this.replayInProgress;\n                if (wasPlaying) {\n                    this.stopReplay();\n                    this.startReplay(false);\n                }\n            });\n            speedGroup.appendChild(speedBtn);\n        });\n\n        speedContainer.appendChild(speedGroup);\n        bottomRow.appendChild(speedContainer);\n\n        // Add rows to container\n        controlContainer.appendChild(topRow);\n        controlContainer.appendChild(bottomRow);\n\n        // Add time display\n        this.timeDisplay = document.createElement('div');\n        this.timeDisplay.className = 'time-display';\n        this.timeDisplay.textContent = '00:00 / 00:00';\n        this.timeDisplay.style.fontSize = '14px';\n        this.timeDisplay.style.fontFamily = 'sans-serif';\n        this.timeDisplay.style.color = '#333';\n        this.timeDisplay.style.padding = '5px 0';\n        this.timeDisplay.style.flexShrink = '0';\n        this.timeDisplay.style.minWidth = '90px';\n        this.timeDisplay.style.marginLeft = '15px';\n        this.timeDisplay.style.textAlign = 'left';\n\n        topRow.appendChild(this.timeDisplay);\n\n        // Create Paste Events Panel toggle button\n        const pasteEventsToggle = document.createElement('div');\n        pasteEventsToggle.className = 'paste-events-toggle';\n        pasteEventsToggle.style.display = 'flex';\n        pasteEventsToggle.style.alignItems = 'center';\n        pasteEventsToggle.style.cursor = 'pointer';\n        pasteEventsToggle.style.userSelect = 'none';\n        pasteEventsToggle.style.color = '#4285f4';\n        pasteEventsToggle.style.fontFamily = 'sans-serif';\n        pasteEventsToggle.style.fontSize = '14px';\n        pasteEventsToggle.style.fontWeight = '500';\n        pasteEventsToggle.style.marginLeft = 'auto';\n\n        const pasteEventsIcon = document.createElement('span');\n        pasteEventsIcon.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" \n             stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path>\n            <rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect>\n        </svg>`;\n        pasteEventsIcon.style.marginRight = '8px';\n        pasteEventsIcon.style.display = 'flex';\n        pasteEventsIcon.style.alignItems = 'center';\n\n        const pasteEventsText = document.createElement('span');\n        pasteEventsText.textContent = 'Paste Events';\n\n        const pasteEventCount = document.createElement('span');\n        pasteEventCount.textContent = `(${this.pasteTimestamps.length})`;\n        pasteEventCount.className = 'paste-event-count';\n        pasteEventCount.style.marginLeft = '2px';\n\n        const chevronIcon = document.createElement('span');\n        chevronIcon.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" \n             stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"chevron-icon\">\n            <polyline points=\"6 9 12 15 18 9\"></polyline>\n        </svg>`;\n        chevronIcon.style.marginLeft = '5px';\n        chevronIcon.style.transition = 'transform 0.3s ease';\n\n        pasteEventsToggle.appendChild(pasteEventsIcon);\n        pasteEventsToggle.appendChild(pasteEventsText);\n        pasteEventsToggle.appendChild(pasteEventCount);\n        pasteEventsToggle.appendChild(chevronIcon);\n\n        // Create Paste Events Panel\n        const pasteEventsPanel = document.createElement('div');\n        pasteEventsPanel.className = 'paste-events-panel';\n        pasteEventsPanel.style.display = 'none';\n        pasteEventsPanel.style.marginTop = '10px';\n        pasteEventsPanel.style.border = '1px solid #e0e0e0';\n        pasteEventsPanel.style.borderRadius = '4px';\n        pasteEventsPanel.style.backgroundColor = '#fff';\n        pasteEventsPanel.style.maxHeight = '300px';\n        pasteEventsPanel.style.overflowY = 'auto';\n        pasteEventsPanel.style.width = '100%';\n\n        this.populatePasteEventsPanel(pasteEventsPanel);\n\n        pasteEventsToggle.addEventListener('click', () => {\n            const isHidden = pasteEventsPanel.style.display === 'none';\n            pasteEventsPanel.style.display = isHidden ? 'block' : 'none';\n            chevronIcon.style.transform = isHidden ? 'rotate(180deg)' : 'rotate(0)';\n        });\n\n        bottomRow.appendChild(pasteEventsToggle);\n\n        controlContainer.appendChild(pasteEventsPanel);\n\n        this.pasteEventsPanel = pasteEventsPanel;\n        this.pasteEventCount = pasteEventCount;\n\n        // Add the controls container to main container\n        container.insertBefore(controlContainer, container.firstChild);\n\n        // Set styles for the output element to handle text wrapping\n        if (this.outputElement) {\n            this.outputElement.style.whiteSpace = 'pre-wrap';\n            this.outputElement.style.wordBreak = 'break-word';\n            this.outputElement.style.maxWidth = '100%';\n            this.outputElement.style.overflow = 'auto';\n            this.outputElement.style.fontFamily = 'monospace';\n            this.outputElement.style.padding = '10px';\n            this.outputElement.style.border = '1px solid #e0e0e0';\n            this.outputElement.style.borderRadius = '4px';\n            this.outputElement.style.minHeight = '100px';\n            this.outputElement.style.backgroundColor = '#fff';\n        }\n\n        // Add persistent styles only once\n        if (!document.getElementById('tiny_cursive-replay-control-styles')) {\n            const styleElement = document.createElement('style');\n            styleElement.id = 'tiny_cursive-replay-control-styles';\n            styleElement.textContent = `\n                .tiny_cursive-replay-control {\n                    margin: 10px 0;\n                    border-radius: 8px;\n                    background-color: #f8f9fa;\n                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n                    transition: box-shadow 0.3s ease;\n                    width: 100%;\n                    box-sizing: border-box;\n                }\n    \n                .tiny_cursive-replay-control:hover {\n                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n                }\n    \n                .tiny_cursive-highlighted-char {\n                    color: #34a853;\n                    font-weight: bold;\n                    transition: opacity 0.3s ease, color 0.3s ease;\n                }\n    \n                .tiny_cursive-deleted-char {\n                    color: #ea4335;\n                    text-decoration: line-through;\n                    opacity: 0.5;\n                    transition: opacity 0.3s ease;\n                }\n    \n                .tiny_cursive-cursor {\n                    display: inline-block;\n                    width: 2px;\n                    height: 1.2em;\n                    background-color: #4285f4;\n                    animation: tiny_cursive-blink 1s infinite;\n                    vertical-align: middle;\n                    border-radius: 1px;\n                }\n    \n                @keyframes tiny_cursive-blink {\n                    0%, 100% { opacity: 1; }\n                    50% { opacity: 0; }\n                }\n    \n                .tiny_cursive-timeline-scrubber {\n                    width: 100%;\n                    height: 8px;\n                    border-radius: 4px;\n                    appearance: none;\n                    background: #e0e0e0;\n                    transition: background 0.2s;\n                }\n    \n                .tiny_cursive-timeline-scrubber:hover {\n                    background: #d0d0d0;\n                }\n    \n                .tiny_cursive-timeline-scrubber::-webkit-slider-thumb {\n                    appearance: none;\n                    width: 16px;\n                    height: 16px;\n                    border-radius: 50%;\n                    background: #4285f4;\n                    cursor: pointer;\n                    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n                    transition: transform 0.1s, box-shadow 0.1s;\n                }\n    \n                .tiny_cursive-timeline-scrubber::-webkit-slider-thumb:hover {\n                    transform: scale(1.1);\n                    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n                }\n    \n                .tiny_cursive-timeline-scrubber::-moz-range-thumb {\n                    width: 16px;\n                    height: 16px;\n                    border-radius: 50%;\n                    background: #4285f4;\n                    cursor: pointer;\n                    box-shadow: 0 1px 3px rgba(0,0,0,0.2);\n                    transition: transform 0.1s;\n                }\n    \n                .tiny_cursive-timeline-scrubber::-moz-range-thumb:hover {\n                    transform: scale(1.1);\n                    box-shadow: 0 2px 5px rgba(0,0,0,0.3);\n                }\n    \n                .tiny_cursive-speed-btn.active {\n                    background: #4285f4 !important;\n                    color: white !important;\n                    font-weight: 500;\n                }\n            `;\n            document.head.appendChild(styleElement);\n        }\n    }\n\n    identifyPasteEvents() {\n        this.pasteTimestamps = [];\n        let controlPressed = false;\n        let pasteCount = 0;\n\n        // Check for finding Control+V combinations\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                if (event.key === \"Control\") {\n                    controlPressed = true;\n                } else if (event.key === \"v\" && controlPressed) {\n                    const pastePosition = event.rePosition;\n                    const timestamp = event.normalizedTime || 0;\n\n                    let pasteEndPosition = pastePosition;\n                    let pasteLength = 0;\n                    let j = i + 1;\n\n                    while (j < this.logData.length &&\n                        ((this.logData[j].key === \"v\" && this.logData[j].event === \"keyUp\") ||\n                            (this.logData[j].key === \"Control\" && this.logData[j].event === \"keyUp\"))) {\n                        j++;\n                    }\n\n                    if (j < this.logData.length && this.logData[j].rePosition !== undefined) {\n                        pasteEndPosition = this.logData[j].rePosition;\n                        pasteLength = pasteEndPosition - pastePosition;\n                    }\n\n                    let FinalPasteLength = pasteLength;\n                    let lastrePosition = pasteEndPosition;\n                    for (let k = j; k < this.logData.length; k++) {\n                        if (this.logData[k].rePosition === undefined) {\n                            continue;\n                        }\n                        if (this.logData[k].event === \"keyDown\" && this.logData[k].key === \"Backspace\") {\n                            FinalPasteLength--;\n                            k++;\n                        } else if (this.logData[k].rePosition > lastrePosition) {\n                            break;\n                        } else {\n                            lastrePosition = this.logData[k].rePosition;\n                        }\n                    }\n\n                    let pastedText = \"\";\n                    if (FinalPasteLength > 0 && this.originalContent) {\n                        const start = Math.min(pastePosition, this.originalContent.length);\n                        const end = Math.min(pastePosition + FinalPasteLength, this.originalContent.length);\n                        pastedText = this.originalContent.substring(start, end);\n                    }\n\n                    this.pasteTimestamps.push({\n                        index: pasteCount,\n                        time: timestamp,\n                        formattedTime: this.formatTime(timestamp),\n                        pastedText: pastedText,\n                        startPosition: pastePosition,\n                        endPosition: pastePosition + FinalPasteLength,\n                        timestamp: timestamp\n                    });\n                    pasteCount++;\n\n                    controlPressed = false;\n                } else {\n                    controlPressed = false;\n                }\n            }\n        }\n\n        console.log(\"Paste events:\", this.pasteTimestamps);\n        if (this.pasteEventsPanel) {\n            this.populatePasteEventsPanel(this.pasteEventsPanel);\n        }\n    }\n\n    populatePasteEventsPanel(panel) {\n        panel.innerHTML = '';\n\n        while (panel.firstChild) {\n            panel.removeChild(panel.firstChild);\n        }\n\n        panel.style.maxHeight = '400px';\n        panel.style.marginBottom = '15px';\n        panel.style.paddingBottom = '10px';\n        panel.style.boxShadow = '0 2px 8px rgba(0,0,0,0.08)';\n\n        const pasteEvents = this.pasteTimestamps && this.pasteTimestamps.length ?\n            this.pasteTimestamps : [];\n\n        if (!pasteEvents || pasteEvents.length === 0) {\n            const noEventsMessage = document.createElement('div');\n            noEventsMessage.className = 'no-paste-events-message';\n            noEventsMessage.textContent = 'No paste events detected for this submission.';\n            noEventsMessage.style.padding = '15px';\n            panel.appendChild(noEventsMessage);\n            return;\n        }\n\n        const carouselContainer = document.createElement('div');\n        carouselContainer.className = 'paste-events-carousel';\n        carouselContainer.style.display = 'flex';\n        carouselContainer.style.flexDirection = 'column';\n        carouselContainer.style.width = '100%';\n        carouselContainer.style.position = 'relative';\n\n        const navigationRow = document.createElement('div');\n        navigationRow.className = 'paste-events-navigation';\n        navigationRow.style.display = 'flex';\n        navigationRow.style.justifyContent = 'space-between';\n        navigationRow.style.alignItems = 'center';\n        navigationRow.style.padding = '10px 15px';\n        navigationRow.style.borderBottom = '1px solid #f0f0f0';\n\n        const counterDisplay = document.createElement('div');\n        counterDisplay.className = 'paste-events-counter';\n        counterDisplay.textContent = 'Paste Events';\n        counterDisplay.style.fontWeight = 'bold';\n        counterDisplay.style.color = '#4285f4';\n\n        const navButtons = document.createElement('div');\n        navButtons.className = 'paste-events-buttons';\n        navButtons.style.display = 'flex';\n        navButtons.style.gap = '10px';\n\n        const prevButton = document.createElement('button');\n        prevButton.className = 'paste-event-prev-btn';\n        prevButton.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" \n             stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <polyline points=\"15 18 9 12 15 6\"></polyline>\n        </svg>`;\n        prevButton.style.border = 'none';\n        prevButton.style.background = '#f1f3f4';\n        prevButton.style.borderRadius = '50%';\n        prevButton.style.width = '30px';\n        prevButton.style.height = '30px';\n        prevButton.style.display = 'flex';\n        prevButton.style.alignItems = 'center';\n        prevButton.style.justifyContent = 'center';\n        prevButton.style.cursor = 'pointer';\n        prevButton.style.color = '#4285f4';\n        prevButton.style.transition = 'background-color 0.2s';\n        prevButton.disabled = true;\n        prevButton.style.opacity = '0.5';\n\n        const nextButton = document.createElement('button');\n        nextButton.className = 'paste-event-next-btn';\n        nextButton.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" \n             stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <polyline points=\"9 18 15 12 9 6\"></polyline>\n        </svg>`;\n        nextButton.style.border = 'none';\n        nextButton.style.background = '#f1f3f4';\n        nextButton.style.borderRadius = '50%';\n        nextButton.style.width = '30px';\n        nextButton.style.height = '30px';\n        nextButton.style.display = 'flex';\n        nextButton.style.alignItems = 'center';\n        nextButton.style.justifyContent = 'center';\n        nextButton.style.cursor = 'pointer';\n        nextButton.style.color = '#4285f4';\n        nextButton.style.transition = 'background-color 0.2s';\n        nextButton.disabled = pasteEvents.length <= 1;\n        nextButton.style.opacity = pasteEvents.length <= 1 ? '0.5' : '1';\n\n        prevButton.addEventListener('mouseover', () => {\n            if (!prevButton.disabled) {\n                prevButton.style.background = '#e0e0e0';\n            }\n        });\n        prevButton.addEventListener('mouseout', () => {\n            prevButton.style.background = '#f1f3f4';\n        });\n        nextButton.addEventListener('mouseover', () => {\n            if (!nextButton.disabled) {\n                nextButton.style.background = '#e0e0e0';\n            }\n        });\n        nextButton.addEventListener('mouseout', () => {\n            nextButton.style.background = '#f1f3f4';\n        });\n\n        navButtons.appendChild(prevButton);\n        navButtons.appendChild(nextButton);\n\n        navigationRow.appendChild(counterDisplay);\n        navigationRow.appendChild(navButtons);\n\n        const contentContainer = document.createElement('div');\n        contentContainer.className = 'paste-events-content';\n        contentContainer.style.padding = '15px';\n        contentContainer.style.overflow = 'auto';\n        contentContainer.style.position = 'relative';\n\n        // Create initial content with first paste event\n        const createPasteEventDisplay = (pasteEvent) => {\n            const eventRow = document.createElement('div');\n            eventRow.style.display = 'flex';\n            eventRow.style.flexDirection = 'column';\n            eventRow.style.gap = '10px';\n\n            // Header row with timestamp and play button\n            const headerRow = document.createElement('div');\n            headerRow.style.display = 'flex';\n            headerRow.style.justifyContent = 'space-between';\n            headerRow.style.alignItems = 'center';\n            headerRow.style.marginBottom = '8px';\n\n            // Timestamp and text container\n            const textContainer = document.createElement('div');\n            textContainer.style.display = 'flex';\n            textContainer.style.flexDirection = 'column';\n            textContainer.style.flexGrow = '1';\n            textContainer.style.marginRight = '10px';\n\n            const timestampContainer = document.createElement('div');\n            timestampContainer.className = 'paste-event-timestamp';\n            timestampContainer.style.fontFamily = 'monospace';\n            timestampContainer.style.fontSize = '12px';\n            timestampContainer.style.color = '#666';\n            timestampContainer.style.fontWeight = 'bold';\n            timestampContainer.textContent = pasteEvent.formattedTime;\n\n            const pastedTextContainer = document.createElement('div');\n            pastedTextContainer.className = 'paste-event-text';\n            pastedTextContainer.style.fontFamily = 'monospace';\n            pastedTextContainer.style.fontSize = '14px';\n            pastedTextContainer.style.wordBreak = 'break-word';\n            pastedTextContainer.style.whiteSpace = 'pre-wrap';\n            pastedTextContainer.style.color = '#333';\n            pastedTextContainer.style.marginTop = '8px';\n            pastedTextContainer.textContent = pasteEvent.pastedText;\n\n            textContainer.appendChild(timestampContainer);\n            textContainer.appendChild(pastedTextContainer);\n\n            const playButton = document.createElement('button');\n            playButton.className = 'paste-event-play-btn';\n            playButton.style.minWidth = '32px';\n            playButton.style.height = '32px';\n            playButton.style.borderRadius = '0';\n            playButton.style.background = 'transparent';\n            playButton.style.color = 'white';\n            playButton.style.border = 'none';\n            playButton.style.cursor = 'pointer';\n            playButton.style.display = 'flex';\n            playButton.style.alignItems = 'center';\n            playButton.style.justifyContent = 'center';\n            playButton.style.flexShrink = '0';\n\n            const playIcon = `<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M7.58 16.89L13.17 12L7.58 7.11V16.89Z\" fill=\"#4A90E2\"/>\n            <path d=\"M16 7V17H18V7H16Z\" fill=\"#4A90E2\"/>\n            </svg>`;\n            playButton.innerHTML = playIcon;\n\n            playButton.addEventListener('mouseover', () => {\n                playButton.style.transform = 'scale(1.05)';\n            });\n            playButton.addEventListener('mouseout', () => {\n                playButton.style.transform = 'scale(1)';\n            });\n\n            playButton.addEventListener('click', () => {\n                this.jumpToTimestamp(pasteEvent.timestamp);\n            });\n\n            headerRow.appendChild(textContainer);\n            headerRow.appendChild(playButton);\n\n            eventRow.appendChild(headerRow);\n\n            return eventRow;\n        };\n\n        contentContainer.appendChild(createPasteEventDisplay(pasteEvents[0]));\n\n        carouselContainer.appendChild(navigationRow);\n        carouselContainer.appendChild(contentContainer);\n\n        panel.appendChild(carouselContainer);\n\n        let currentIndex = 0;\n\n        prevButton.addEventListener('click', () => {\n            if (currentIndex > 0) {\n                currentIndex--;\n                updatePasteEventDisplay();\n            }\n        });\n\n        nextButton.addEventListener('click', () => {\n            if (currentIndex < pasteEvents.length - 1) {\n                currentIndex++;\n                updatePasteEventDisplay();\n            }\n        });\n\n        const updatePasteEventDisplay = () => {\n            contentContainer.innerHTML = '';\n            contentContainer.appendChild(createPasteEventDisplay(pasteEvents[currentIndex]));\n\n            counterDisplay.textContent = 'Paste Events';\n\n            prevButton.disabled = currentIndex === 0;\n            prevButton.style.opacity = currentIndex === 0 ? '0.5' : '1';\n            nextButton.disabled = currentIndex === pasteEvents.length - 1;\n            nextButton.style.opacity = currentIndex === pasteEvents.length - 1 ? '0.5' : '1';\n        };\n    }\n\n    jumpToTimestamp(timestamp) {\n        const percentage = this.totalDuration > 0 ? (timestamp / this.totalDuration) * 100 : 0;\n\n        this.skipToTime(percentage);\n\n        if (!this.replayInProgress) {\n            this.startReplay(false);\n        }\n    }\n\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n\n            if (this.timeDisplay) {\n                const displayTime = Math.min(this.currentTime, this.totalDuration);\n                const currentTimeFormatted = this.formatTime(displayTime);\n                const totalTimeFormatted = this.formatTime(this.totalDuration);\n                this.timeDisplay.textContent = `${currentTimeFormatted} / ${totalTimeFormatted}`;\n            }\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response => {\n            return response;\n        }).fail(error => {\n            throw new Error('Error loading JSON file: ' + error.message);\n        });\n    }\n\n    formatTime(ms) {\n        const seconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n\n    // Call this to make a \"start\" or \"start over\" function\n    startReplay(reset = true) {\n        // Clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        const atEnd = (this.totalDuration > 0 && this.currentTime >= this.totalDuration) ||\n            (this.currentEventIndex >= this.totalEvents);\n        if (atEnd && !reset) {\n            reset = true;\n        }\n        this.replayInProgress = true;\n        if (reset) {\n            this.outputElement.innerHTML = '';\n            this.text = '';\n            this.cursorPosition = 0;\n            this.currentEventIndex = 0;\n            this.currentTime = 0;\n            this.highlightedChars = [];\n            this.deletedChars = [];\n            this.isControlKeyPressed = false;\n        }\n        if (this.playButton) {\n            const pauseSvg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\"\n            viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <line x1=\"9\" y1=\"4\" x2=\"9\" y2=\"20\"></line>\n            <line x1=\"15\" y1=\"4\" x2=\"15\" y2=\"20\"></line>\n            </svg>`;\n            this.playButton.querySelector('.play-icon').innerHTML = pauseSvg;\n        }\n        this.replayLog();\n    }\n\n    // Called by startReplay() to recursively call through keydown events\n    replayLog() {\n        if (!this.replayInProgress) {\n            this.updateDisplayText(this.text, this.cursorPosition, [], []);\n            return;\n        }\n\n        while (this.currentEventIndex < this.logData.length) {\n            const event = this.logData[this.currentEventIndex];\n\n            if (event.normalizedTime && event.normalizedTime > this.currentTime) {\n                break;\n            }\n\n            let text = this.text || '';\n            let cursor = this.cursorPosition || 0;\n            let updatedHighlights = [...this.highlightedChars];\n            let updatedDeleted = [...this.deletedChars];\n\n            // Always update cursor position based on rePosition if available\n            if (event.rePosition !== undefined) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                }\n                else if (event.key !== \"v\") {\n                    if (event.key !== \"Control\") {\n                        this.isControlKeyPressed = false;\n                    }\n                    if (event.key !== \"Backspace\" && event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n                        this.isPasteEvent = false;\n                    }\n                }\n                else if (event.key == 'v' && this.isControlKeyPressed) {\n                    this.isPasteEvent = true;\n                    this.isControlKeyPressed = false;\n                }\n                if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    // Handle Control+Backspace word deletion\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            updatedDeleted.push({\n                                index: wordStart + i,\n                                char: wordToDelete[i],\n                                time: this.currentTime,\n                                expiresAt: this.currentTime + 2000\n                            });\n                        }\n                        // Remove the word\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                else if (event.key === \"Backspace\" && !this.isPasteEvent) {\n                    if (cursor > 0) {\n                        // Store the character being deleted\n                        updatedDeleted.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 2000 // Make deletions visible for 2 seconds\n                        });\n                        // Remove the character before cursor\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor--;\n                    }\n                }\n                else if (event.key === \"ArrowLeft\") {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                else if (event.key === \"ArrowRight\") {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                else if (charToInsert !== null && charToInsert !== \"\") {\n                    // Insert the character at cursor position\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    // Highlight non-space characters\n                    if (charToInsert.trim() !== \"\") {\n                        updatedHighlights.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: this.currentTime,\n                            expiresAt: this.currentTime + 1500 // Make highlights visible for 1.5 seconds\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.text = text;\n            this.cursorPosition = cursor;\n\n            // Filter out expired highlights and deletions\n            this.highlightedChars = updatedHighlights.filter(h =>\n                !h.expiresAt || h.expiresAt > this.currentTime\n            );\n\n            this.deletedChars = updatedDeleted.filter(d =>\n                !d.expiresAt || d.expiresAt > this.currentTime\n            );\n\n            this.currentEventIndex++;\n        }\n\n        this.updateDisplayText(this.text, this.cursorPosition, this.highlightedChars, this.deletedChars);\n\n        // Update timeline\n        if (this.totalDuration > 0) {\n            const percentComplete = Math.min((this.currentTime / this.totalDuration) * 100, 100);\n            this.setScrubberVal(percentComplete);\n        }\n\n        // Continue or stop replay\n        if (this.replayInProgress) {\n            const baseIncrement = 100;\n            const incrementTime = baseIncrement / this.speed;\n            this.currentTime += baseIncrement;\n\n            if (this.currentEventIndex >= this.totalEvents) {\n                if (this.loop) {\n                    this.startReplay(true);\n                } else {\n                    this.stopReplay();\n                    this.updateDisplayText(this.text, this.cursorPosition, [], []);\n                }\n            } else {\n                this.replayTimeout = setTimeout(() => this.replayLog(), incrementTime);\n            }\n        }\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        const wasPlaying = this.replayInProgress;\n        if (wasPlaying) {\n            this.replayInProgress = false;\n            clearTimeout(this.replayTimeout);\n        }\n\n        const targetTime = (this.totalDuration * percentage) / 100;\n        this.currentTime = targetTime;\n        this.currentEventIndex = 0;\n        this.text = '';\n        this.cursorPosition = 0;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.isControlKeyPressed = false;\n\n        let text = '';\n        let cursor = 0;\n\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.normalizedTime && event.normalizedTime > targetTime) {\n                this.currentEventIndex = i;\n                break;\n            }\n\n            if (event.rePosition !== undefined) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event && event.event.toLowerCase() === \"keydown\") {\n                const charToInsert = this.applyKey(event.key);\n\n                if (event.key === \"Control\") {\n                    this.isControlKeyPressed = true;\n                }\n                else if (event.key !== \"v\") {\n                    if (event.key !== \"Control\") {\n                        this.isControlKeyPressed = false;\n                    }\n                    if (event.key !== \"Backspace\" && event.key !== \"ArrowLeft\" && event.key !== \"ArrowRight\") {\n                        this.isPasteEvent = false;\n                    }\n                }\n                else if (event.key == 'v' && this.isControlKeyPressed) {\n                    this.isPasteEvent = true;\n                    this.isControlKeyPressed = false;\n                }\n                if (event.key === \"Backspace\" && this.isControlKeyPressed) {\n                    if (cursor > 0) {\n                        let wordStart = cursor;\n                        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n                            wordStart--;\n                        }\n                        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n                            wordStart--;\n                        }\n\n                        const wordToDelete = text.substring(wordStart, cursor);\n                        for (let i = 0; i < wordToDelete.length; i++) {\n                            this.deletedChars.push({\n                                index: wordStart + i,\n                                char: wordToDelete[i],\n                                time: targetTime,\n                                expiresAt: targetTime + 2000\n                            });\n                        }\n\n                        text = text.substring(0, wordStart) + text.substring(cursor);\n                        cursor = wordStart;\n                    }\n                    this.isControlKeyPressed = false;\n                }\n                else if (event.key === \"Backspace\" && !this.isPasteEvent) {\n                    if (cursor > 0) {\n                        this.deletedChars.push({\n                            index: cursor - 1,\n                            char: text[cursor - 1],\n                            time: targetTime,\n                            expiresAt: targetTime + 1000\n                        });\n                        text = text.substring(0, cursor - 1) + text.substring(cursor);\n                        cursor = Math.max(0, cursor - 1);\n                    }\n                }\n                else if (event.key === \"ArrowLeft\") {\n                    cursor = Math.max(0, cursor - 1);\n                }\n                else if (event.key === \"ArrowRight\") {\n                    cursor = Math.min(text.length, cursor + 1);\n                }\n                else if (charToInsert && charToInsert.length > 0) {\n                    text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n                    if (charToInsert.trim() !== \"\") {\n                        this.highlightedChars.push({\n                            index: cursor,\n                            char: charToInsert,\n                            time: targetTime,\n                            expiresAt: targetTime + 1000\n                        });\n                    }\n                    cursor++;\n                }\n            }\n\n            this.currentEventIndex = i + 1;\n        }\n\n        this.text = text;\n        this.cursorPosition = cursor;\n        this.updateDisplayText(text, cursor, this.highlightedChars, this.deletedChars);\n        this.setScrubberVal(percentage);\n\n        if (wasPlaying) {\n            this.replayInProgress = true;\n            this.replayLog();\n        }\n    }\n\n\n    // Update display with text, cursor, highlights and deletions\n    updateDisplayText(text, cursorPosition, highlights, deletions) {\n        let html = '';\n        const highlightMap = {};\n        const deletionMap = {};\n        const currentTime = this.currentTime;\n\n        highlights.forEach(h => {\n            let opacity = 1;\n            if (h.expiresAt) {\n                const timeRemaining = h.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, timeRemaining / 500);\n                }\n            }\n            highlightMap[h.index] = { char: h.char, opacity: opacity };\n        });\n\n        deletions.forEach(d => {\n            let opacity = 0.5;\n            if (d.expiresAt) {\n                const timeRemaining = d.expiresAt - currentTime;\n                if (timeRemaining < 500) {\n                    opacity = Math.max(0, (timeRemaining / 500) * 0.5);\n                }\n            }\n            deletionMap[d.index] = { char: d.char, opacity: opacity };\n        });\n\n        // Find if we have out-of-bounds deletions (from Control+Backspace)\n        const outOfRangeDeletions = deletions.filter(d => d.index >= text.length);\n\n        const textLines = text.split('\\n');\n        let currentPosition = 0;\n\n        for (let lineIndex = 0; lineIndex < textLines.length; lineIndex++) {\n            const line = textLines[lineIndex];\n\n            for (let i = 0; i < line.length; i++) {\n                if (currentPosition === cursorPosition) {\n                    html += '<span class=\"tiny_cursive-cursor\">|</span>';\n                }\n\n                const char = line[i];\n\n                if (deletionMap[currentPosition]) {\n                    const deletion = deletionMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-deleted-char\" style=\"opacity: ${deletion.opacity};\">${deletion.char}</span>`;\n                }\n\n                if (highlightMap[currentPosition] && char !== ' ') {\n                    const highlight = highlightMap[currentPosition];\n                    html += `<span class=\"tiny_cursive-highlighted-char\" style=\"opacity: ${highlight.opacity};\">${char}</span>`;\n                } else {\n                    html += char === ' ' ? '&nbsp;' : this.escapeHtml(char);\n                }\n\n                currentPosition++;\n            }\n\n            if (currentPosition === cursorPosition) {\n                html += '<span class=\"tiny_cursive-cursor\">|</span>';\n            }\n\n            if (lineIndex < textLines.length - 1) {\n                html += '<br>';\n                currentPosition++;\n            }\n        }\n\n        if (cursorPosition === text.length && !html.endsWith('<span class=\"tiny_cursive-cursor\">|</span>')) {\n            html += '<span class=\"tiny_cursive-cursor\">|</span>';\n        }\n\n        // For control + backspace functionalities\n        if (outOfRangeDeletions.length > 0) {\n            outOfRangeDeletions.sort((a, b) => a.index - b.index);\n\n            const cursorHTML = '<span class=\"tiny_cursive-cursor\">|</span>';\n            let cursorPos = html.lastIndexOf(cursorHTML);\n\n            if (cursorPos !== -1) {\n                let deletedWordHTML = '<span class=\"tiny_cursive-deleted-char\" style=\"opacity: 0.5;\">';\n                outOfRangeDeletions.forEach(d => {\n                    deletedWordHTML += d.char;\n                });\n                deletedWordHTML += '</span>';\n                html = html.substring(0, cursorPos) + deletedWordHTML + html.substring(cursorPos);\n            }\n        }\n\n        const wasScrolledToBottom = this.outputElement.scrollHeight -\n            this.outputElement.clientHeight <= this.outputElement.scrollTop + 1;\n\n        this.outputElement.innerHTML = html;\n\n        if (wasScrolledToBottom || this.isCursorBelowViewport()) {\n            this.outputElement.scrollTop = this.outputElement.scrollHeight;\n        }\n    }\n\n    // Check if cursor is below visible viewport\n    isCursorBelowViewport() {\n        const cursorElement = this.outputElement.querySelector('.tiny_cursive-cursor:last-of-type');\n        if (!cursorElement) {\n            return false;\n        }\n\n        const cursorRect = cursorElement.getBoundingClientRect();\n        const outputRect = this.outputElement.getBoundingClientRect();\n\n        return cursorRect.bottom > outputRect.bottom;\n    }\n\n    escapeHtml(unsafe) {\n        return unsafe\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    // Used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key) {\n        switch (key) {\n            case \"Enter\":\n                return \"\\n\";\n            case \"Backspace\":\n                return \"\";\n            case \"ControlBackspace\":\n                return \"\";\n            case \" \":\n                return \" \";\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\",\n                    \"ArrowLeft\", \"Meta\", \"CapsLock\", \"Tab\", \"Escape\", \"Delete\", \"PageUp\", \"PageDown\",\n                    \"Insert\", \"Home\", \"End\", \"NumLock\"]\n                    .includes(key) ? key : \"\";\n        }\n    }\n}"],"names":["constructor","elementId","filePath","speed","loop","controllerId","replayInProgress","parseFloat","highlightedChars","deletedChars","cursorPosition","currentEventIndex","totalEvents","currentTime","totalDuration","usercomments","pasteTimestamps","originalContent","isPasteEvent","element","document","getElementById","Error","outputElement","style","whiteSpace","wordBreak","maxWidth","overflow","fontFamily","padding","border","borderRadius","minHeight","backgroundColor","loadJSON","then","data","status","val","JSON","parse","logData","original","window","console","log","comments","Array","isArray","this","payload","length","unixTimestamp","startTime","map","event","normalizedTime","identifyPasteEvents","constructController","startReplay","Promise","all","templates","render","Str","get_string","results","html","str","updatedHtml","replace","catch","error","message","stopReplay","clearTimeout","replayTimeout","playSvg","playButton","querySelector","innerHTML","currentPosition","replayIntervalId","clearInterval","container","querySelectorAll","forEach","control","remove","panel","controlContainer","createElement","className","display","flexDirection","gap","margin","alignItems","paddingBottom","boxShadow","width","topRow","minWidth","height","background","color","cursor","justifyContent","transition","flexShrink","addEventListener","transform","appendChild","scrubberContainer","flexGrow","scrubberElement","type","id","min","max","value","accentColor","scrubberValue","parseInt","skipToTime","bottomRow","marginTop","speedContainer","speedLabel","textContent","fontSize","fontWeight","marginRight","speedGroup","speedValue","speedBtn","borderRight","dataset","classList","contains","btn","add","timeDisplay","marginLeft","textAlign","pasteEventsToggle","userSelect","pasteEventsIcon","pasteEventsText","pasteEventCount","chevronIcon","pasteEventsPanel","maxHeight","overflowY","populatePasteEventsPanel","isHidden","insertBefore","firstChild","styleElement","head","controlPressed","pasteCount","i","toLowerCase","key","pastePosition","rePosition","timestamp","pasteEndPosition","pasteLength","j","undefined","FinalPasteLength","lastrePosition","k","pastedText","start","Math","end","substring","push","index","time","formattedTime","formatTime","startPosition","endPosition","removeChild","marginBottom","pasteEvents","noEventsMessage","carouselContainer","position","navigationRow","borderBottom","counterDisplay","navButtons","prevButton","disabled","opacity","nextButton","contentContainer","createPasteEventDisplay","pasteEvent","eventRow","headerRow","textContainer","timestampContainer","pastedTextContainer","jumpToTimestamp","currentIndex","updatePasteEventDisplay","percentage","setScrubberVal","String","displayTime","currentTimeFormatted","totalTimeFormatted","methodname","args","filepath","done","response","fail","ms","seconds","floor","minutes","remainingSeconds","toString","padStart","reset","text","isControlKeyPressed","pauseSvg","replayLog","updatedHighlights","updatedDeleted","charToInsert","applyKey","wordStart","wordToDelete","char","expiresAt","trim","filter","h","d","updateDisplayText","percentComplete","baseIncrement","incrementTime","setTimeout","skipToEnd","textOutput","slice","wasPlaying","targetTime","highlights","deletions","highlightMap","deletionMap","timeRemaining","outOfRangeDeletions","textLines","split","lineIndex","line","deletion","highlight","escapeHtml","endsWith","sort","a","b","cursorHTML","cursorPos","lastIndexOf","deletedWordHTML","wasScrolledToBottom","scrollHeight","clientHeight","scrollTop","isCursorBelowViewport","cursorElement","cursorRect","getBoundingClientRect","outputRect","bottom","unsafe","includes"],"mappings":"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"}