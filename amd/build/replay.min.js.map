{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author Brain Station 23 <elearning@brainstation-23.com>\n */\n\nimport {call as fetchJson} from 'core/ajax';\nimport templates from 'core/templates';\nimport * as Str from 'core/str';\nexport default class Replay {\n    controllerId = '';\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        this.controllerId = controllerId;\n        this.replayInProgress = false;\n        this.speed = speed;\n        this.loop = loop;\n        const element = document.getElementById(elementId);\n        if (element) {\n            this.outputElement = element;\n        } else {\n            // Debug message that won't shown in UI.\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n        if (controllerId) {\n\n            this.constructController(controllerId);\n        }\n        this.loadJSON(filePath)\n            .then((data) => {\n                if (data.status) {\n                    var val = JSON.parse(data.data);\n                    this.logData = val;\n\n                    if (\"data\" in this.logData) {\n                        this.logData = this.logData.data;\n                    }\n                    if (\"payload\" in this.logData) {\n                        this.logData = this.logData.payload;\n                    }\n                    this.startReplay();\n                } else {\n                   try {\n                    // eslint-disable-next-line\n                    Promise.all([\n                        templates.render('tiny_cursive/no_submission'),\n                        Str.get_string('warningpayload', 'tiny_cursive')\n                    ])\n                    .then(([html, str]) => {\n                        const tempDiv = document.createElement('div');\n                        tempDiv.innerHTML = html;\n\n                        const newContent = tempDiv.firstElementChild || tempDiv;\n                        newContent.textContent = str;\n\n                        document.querySelectorAll('.tiny_cursive').forEach(element => {\n                            element.innerHTML = '';\n                            element.appendChild(newContent.cloneNode(true));\n                        });\n                    })\n                    .catch(window.console.error);\n                } catch (error) {\n                    window.console.error(error);\n                }\n                }\n                return data;\n            })\n\n            .catch(error => {\n\n                try {\n                    // eslint-disable-next-line\n                    Promise.all([\n                        templates.render('tiny_cursive/no_submission'),\n                        Str.get_string('warningpayload', 'tiny_cursive')\n                    ]).then(([html, str]) => {\n                        const tempDiv = document.createElement('div');\n                        tempDiv.innerHTML = html;\n\n                        const newContent = tempDiv.firstElementChild || tempDiv;\n                        newContent.textContent = str;\n\n                        document.querySelectorAll('.tiny_cursive').forEach(element => {\n                            element.innerHTML = '';\n                            element.appendChild(newContent.cloneNode(true));\n                        });\n                    })\n                    .catch(window.console.error);\n                } catch (error) {\n                    window.console.error(error);\n                }\n                window.console.error('Error loading JSON file: ' + error.message);\n            });\n    }\n\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n        }\n    }\n    constructController(controllerId) {\n        const controller = document.getElementById(controllerId);\n\n        if (controller) {\n            this.scrubberElement = document.createElement('input');\n            this.scrubberElement.type = 'range';\n            this.scrubberElement.id = 'timelineScrubber';\n            this.scrubberElement.min = '0';\n            this.scrubberElement.max = '100';\n            this.scrubberElement.addEventListener('input', () => {\n                const scrubberValue = this.scrubberElement.value;\n                this.skipToTime(scrubberValue);\n            });\n            controller.appendChild(this.scrubberElement);\n        }\n    }\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {\n                filepath: filePath,\n            },\n        }])[0].done(response => {\n            return response;\n        }).fail(error => {\n            throw new Error('Error loading JSON file: ' + error.message);\n        });\n    }\n\n    // Call this to make a \"start\" or \"start over\" function\n    startReplay() {\n        // Clear previous instances of timeout to prevent multiple running at once\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        this.replayInProgress = true;\n        let uid = this.controllerId.split('_')[1];\n        let element = document.getElementById('rep' + uid);\n        let isactive = element.classList.contains('active');\n        if (!isactive) {\n            this.stopReplay();\n        } else {\n            this.outputElement.innerHTML = '';\n        }\n        this.replayLog();\n    }\n\n    // Called by startReplay() to recursively call through keydown events\n    replayLog() {\n        let textOutput = \"\";\n        let index = 0;\n        const processEvent = () => {\n\n            if (this.replayInProgress) {\n                if (index < this.logData.length) {\n                    let event = this.logData[index++];\n                    if (event.event.toLowerCase() === 'keydown') {\n                        textOutput = this.applyKey(event.key, textOutput);\n                    }\n                    this.outputElement.innerHTML = textOutput;\n                    this.setScrubberVal(index / this.logData.length * 100);\n                    this.replayTimeout = setTimeout(processEvent, 1 / this.speed * 100);\n                } else {\n                    this.replayInProgress = false;\n                    if (this.loop) {\n                        this.startReplay();\n                    }\n                }\n            }\n        };\n        processEvent();\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        // Only go through certain % of log data\n        let textOutput = \"\";\n        const numElementsToProcess = Math.ceil(this.logData.length * percentage / 100);\n        for (let i = 0; i < numElementsToProcess; i++) {\n            const event = this.logData[i];\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        }\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(percentage);\n    }\n\n    // Used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key, textOutput) {\n        switch (key) {\n            case \"Enter\":\n                return textOutput + \"\\n\";\n            case \"Backspace\":\n                return textOutput.slice(0, -1);\n            case \"ControlBackspace\": {\n                let lastSpace = textOutput.lastIndexOf(' ');\n                return textOutput.slice(0, lastSpace);\n            }\n            default:\n                return ![\"Shift\", \"Ctrl\", \"Alt\", \"ArrowDown\", \"ArrowUp\", \"Control\", \"ArrowRight\",\n                    \"ArrowLeft\", \"Meta\", \"CapsLock\", \"Tab\", \"Escape\", \"Delete\", \"PageUp\", \"PageDown\",\n                    \"Insert\", \"Home\", \"End\", \"NumLock\", \"Insert\", \"Home\", \"End\", \"NumLock\", \"AudioVolumeUp\",\n                    \"AudioVolumeDown\", \"MediaPlayPause\", \"F1\", \"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\",\n                    \"F10\", \"F11\", \"F12\", \"PrintScreen\", \"UnIdentified\"]\n                    .includes(key) ? textOutput + key : textOutput;\n        }\n    }\n}\n"],"names":["controllerId","constructor","elementId","filePath","speed","loop","replayInProgress","element","document","getElementById","Error","outputElement","constructController","loadJSON","then","data","status","val","JSON","parse","logData","this","payload","startReplay","Promise","all","templates","render","Str","get_string","_ref","html","str","tempDiv","createElement","innerHTML","newContent","firstElementChild","textContent","querySelectorAll","forEach","appendChild","cloneNode","catch","window","console","error","_ref2","message","stopReplay","clearTimeout","replayTimeout","controller","scrubberElement","type","id","min","max","addEventListener","scrubberValue","value","skipToTime","setScrubberVal","String","methodname","args","filepath","done","response","fail","uid","split","classList","contains","replayLog","textOutput","index","processEvent","length","event","toLowerCase","applyKey","key","setTimeout","skipToEnd","slice","percentage","numElementsToProcess","Math","ceil","i","lastSpace","lastIndexOf","includes"],"mappings":"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"}