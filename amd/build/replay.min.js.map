{"version":3,"file":"replay.min.js","sources":["../src/replay.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/replay\n * @category TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author kuldeep singh <mca.kuldeep.sekhon@gmail.com>\n */\n\nimport {call as fetchJson} from 'core/ajax';\nimport templates from 'core/templates';\nimport $ from 'jquery';\nimport * as Str from 'core/str';\n\nexport default class Replay {\n    constructor(elementId, filePath, speed = 1, loop = false, controllerId) {\n        // Initialize core properties\n        this.controllerId = controllerId || '';\n        this.replayInProgress = false;\n        this.speed = parseFloat(speed);\n        this.loop = loop;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.cursorPosition = 0;\n        this.currentEventIndex = 0;\n        this.totalEvents = 0;\n        this.currentTime = 0;\n        this.totalDuration = 0;\n        this.usercomments = [];\n        this.pasteTimestamps = [];\n        this.isPasteEvent = false;\n        this.isControlKeyPressed = false;\n        this.text = '';\n\n        const element = document.getElementById(elementId);\n        if (!element) {\n            throw new Error(`Element with id '${elementId}' not found`);\n        }\n        this.outputElement = element;\n\n        // Load JSON data and initialize replay\n        this.loadJSON(filePath).then(data => {\n            if (data.status) {\n                this.processData(data);\n                this.totalEvents = this.logData.length;\n                this.identifyPasteEvents();\n                if (this.controllerId && this.logData) {\n                    this.constructController(this.controllerId);\n                }\n                this.startReplay();\n            } else {\n                this.handleNoSubmission();\n            }\n            return data;\n        }).catch(error => {\n            this.handleNoSubmission();\n            window.console.error('Error loading JSON file:', error.message);\n        });\n    }\n\n    // Process JSON data and normalize timestamps\n    processData(data) {\n        this.logData = JSON.parse(data.data);\n        if (data.comments) {\n            this.usercomments = Array.isArray(JSON.parse(data.comments)) ? JSON.parse(data.comments) : [];\n        }\n        if ('data' in this.logData) {\n            this.logData = this.logData.data;\n        }\n        if ('payload' in this.logData) {\n            this.logData = this.logData.payload;\n        }\n        if (this.logData.length > 0 && this.logData[0].unixTimestamp) {\n            const startTime = this.logData[0].unixTimestamp;\n            this.logData = this.logData.map(event => ({\n                ...event,\n                normalizedTime: event.unixTimestamp - startTime\n            }));\n            this.totalDuration = this.logData[this.logData.length - 1].normalizedTime;\n        }\n    }\n\n    async handleNoSubmission() {\n        try {\n            const [html, str] = await Promise.all([\n                templates.render('tiny_cursive/no_submission'),\n                Str.get_string('warningpayload', 'tiny_cursive')\n            ]);\n            const newElement = $(html).text(str);\n            return $('.tiny_cursive').html(newElement);\n        } catch (error) {\n            window.console.error(error);\n            return false;\n        }\n    }\n\n    // Stop the replay and update play button icon\n    stopReplay() {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n            this.replayInProgress = false;\n            if (this.playButton) {\n                const playSvg = document.createElement('img');\n                playSvg.src = M.util.image_url('playicon', 'tiny_cursive');\n                this.playButton.querySelector('.play-icon').innerHTML = playSvg.outerHTML;\n            }\n        }\n    }\n\n    // Build the replay control UI (play button, scrubber, speed controls)\n    constructController(controllerId) {\n        this.replayInProgress = false;\n        this.currentPosition = 0;\n        this.speed = 1;\n        if (this.replayIntervalId) {\n            clearInterval(this.replayIntervalId);\n            this.replayIntervalId = null;\n        }\n\n        const container = document.getElementById(controllerId);\n        if (!container) {\n            window.console.error('Container not found with ID:', controllerId);\n            return;\n        }\n\n        const controlContainer = container.querySelector('.tiny_cursive_replay_control');\n        if (!controlContainer) {\n            window.console.error('Replay control container not found in:', controllerId);\n            return;\n        }\n        controlContainer.innerHTML = '<span class=\"tiny_cursive_loading_spinner\"></span>';\n\n        this.buildControllerUI(controlContainer, container);\n        controlContainer.querySelector('.tiny_cursive_loading_spinner')?.remove();\n    }\n\n    buildControllerUI(controlContainer, container) {\n        const topRow = document.createElement('div');\n        topRow.classList.add('tiny_cursive_top_row');\n\n        this.playButton = this.createPlayButton();\n        topRow.appendChild(this.playButton);\n\n        const scrubberContainer = this.createScrubberContainer();\n        topRow.appendChild(scrubberContainer);\n\n        this.timeDisplay = this.createTimeDisplay();\n        topRow.appendChild(this.timeDisplay);\n\n        const bottomRow = document.createElement('div');\n        bottomRow.classList.add('tiny_cursive_bottom_row');\n\n        const speedContainer = this.createSpeedControls();\n        bottomRow.appendChild(speedContainer);\n\n        const pasteEventsToggle = this.createPasteEventsToggle(container);\n        bottomRow.appendChild(pasteEventsToggle);\n\n        controlContainer.appendChild(topRow);\n        controlContainer.appendChild(bottomRow);\n        container.appendChild(this.pasteEventsPanel);\n    }\n\n    createPlayButton() {\n        const playButton = document.createElement('button');\n        playButton.classList.add('tiny_cursive_play_button');\n        const playSvg = document.createElement('i');\n        playButton.innerHTML = `<span class=\"play-icon\">${playSvg.outerHTML}</span>`;\n        playButton.addEventListener('click', () => {\n            if (this.replayInProgress) {\n                this.stopReplay();\n            } else {\n                this.startReplay(false);\n            }\n            $('.tiny_cursive-nav-tab').find('.active').removeClass('active');\n            $('a[id^=\"rep\"]').addClass('active');\n        });\n        return playButton;\n    }\n\n    createScrubberContainer() {\n        const scrubberContainer = document.createElement('div');\n        scrubberContainer.classList.add('tiny_cursive_scrubber_container');\n        this.scrubberElement = document.createElement('input');\n        this.scrubberElement.classList.add('tiny_cursive_timeline_scrubber', 'timeline-scrubber');\n        this.scrubberElement.type = 'range';\n        this.scrubberElement.max = '100';\n        this.scrubberElement.min = '0';\n        this.scrubberElement.value = '0';\n        this.scrubberElement.addEventListener('input', () => {\n            this.skipToTime(parseInt(this.scrubberElement.value, 10));\n        });\n        scrubberContainer.appendChild(this.scrubberElement);\n        return scrubberContainer;\n    }\n\n    createTimeDisplay() {\n        const timeDisplay = document.createElement('div');\n        timeDisplay.classList.add('tiny_cursive_time_display');\n        timeDisplay.textContent = '00:00 / 00:00';\n        return timeDisplay;\n    }\n\n    createSpeedControls() {\n        const speedContainer = document.createElement('div');\n        speedContainer.classList.add('tiny_cursive_speed_controls', 'speed-controls');\n        const speedLabel = document.createElement('span');\n        speedLabel.classList.add('tiny_cursive_speed_label');\n        speedLabel.textContent = 'Speed: ';\n        speedContainer.appendChild(speedLabel);\n\n        const speedGroup = document.createElement('div');\n        speedGroup.classList.add('tiny_cursive_speed_group');\n        [1, 1.5, 2, 5, 10].forEach(speed => {\n            const speedBtn = document.createElement('button');\n            speedBtn.textContent = `${speed}x`;\n            speedBtn.classList.add('tiny_cursive_speed_btn', 'speed-btn');\n            if (parseFloat(speed) === this.speed) {\n                speedBtn.classList.add('active');\n            }\n            speedBtn.dataset.speed = speed;\n            speedBtn.addEventListener('click', () => {\n                document.querySelectorAll('.tiny_cursive_speed_btn').forEach(btn => btn.classList.remove('active'));\n                speedBtn.classList.add('active');\n                this.speed = parseFloat(speedBtn.dataset.speed);\n                if (this.replayInProgress) {\n                    this.stopReplay();\n                    this.startReplay(false);\n                }\n            });\n            speedGroup.appendChild(speedBtn);\n        });\n        speedContainer.appendChild(speedGroup);\n        return speedContainer;\n    }\n\n    createPasteEventsToggle(container) {\n        const pasteEventsToggle = document.createElement('div');\n        pasteEventsToggle.classList.add('tiny_cursive_paste_events_toggle', 'paste-events-toggle');\n\n        const pasteEventsIcon = document.createElement('span');\n        const pasteIcon = document.createElement('img');\n        pasteIcon.src = M.util.image_url('pasteicon', 'tiny_cursive');\n        pasteEventsIcon.innerHTML = pasteIcon.outerHTML;\n        pasteEventsIcon.classList.add('tiny_cursive_paste_events_icon');\n\n        const pasteEventsText = document.createElement('span');\n        pasteEventsText.textContent = 'Paste Events';\n\n        this.pasteEventCount = document.createElement('span');\n        this.pasteEventCount.textContent = `(${this.usercomments.length})`;\n        this.pasteEventCount.className = 'paste-event-count';\n        this.pasteEventCount.style.marginLeft = '2px';\n\n        const chevronIcon = document.createElement('span');\n        const chevron = document.createElement('i');\n        chevron.className = 'fa fa-chevron-down';\n        chevronIcon.innerHTML = chevron.outerHTML;\n        chevronIcon.style.marginLeft = '5px';\n        chevronIcon.style.transition = 'transform 0.3s ease';\n\n        pasteEventsToggle.appendChild(pasteEventsIcon);\n        pasteEventsToggle.appendChild(pasteEventsText);\n        pasteEventsToggle.appendChild(this.pasteEventCount);\n        pasteEventsToggle.appendChild(chevronIcon);\n\n        this.pasteEventsPanel = this.createPasteEventsPanel(container);\n        pasteEventsToggle.addEventListener('click', () => {\n            const isHidden = this.pasteEventsPanel.style.display === 'none';\n            this.pasteEventsPanel.style.display = isHidden ? 'block' : 'none';\n            chevronIcon.style.transform = isHidden ? 'rotate(180deg)' : 'rotate(0deg)';\n        });\n\n        return pasteEventsToggle;\n    }\n\n    createPasteEventsPanel(container) {\n        const existingPanel = container.querySelector('.paste-events-panel');\n        if (existingPanel) {\n            existingPanel.remove();\n        }\n        const pasteEventsPanel = document.createElement('div');\n        pasteEventsPanel.classList.add('tiny_cursive_paste_events_panel', 'paste-events-panel');\n        pasteEventsPanel.style.display = 'none';\n        this.populatePasteEventsPanel(pasteEventsPanel);\n        return pasteEventsPanel;\n    }\n\n    // Detect Ctrl+V paste events and sync with user comments\n    identifyPasteEvents() {\n        this.pasteTimestamps = [];\n        let controlPressed = false;\n        let pasteCount = 0;\n\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.event?.toLowerCase() === 'keydown') {\n                if (event.key === 'Control') {\n                    controlPressed = true;\n                } else if (event.key === 'v' && controlPressed) {\n                    const timestamp = event.normalizedTime || 0;\n                    this.pasteTimestamps.push({\n                        index: pasteCount,\n                        time: timestamp,\n                        formattedTime: this.formatTime(timestamp),\n                        pastedText: this.usercomments[pasteCount] || '',\n                        timestamp\n                    });\n                    pasteCount++;\n                    controlPressed = false;\n                } else {\n                    controlPressed = false;\n                }\n            }\n        }\n\n        if (this.usercomments.length > 0 && this.pasteTimestamps.length === 0) {\n            this.usercomments.forEach((comment, i) => {\n                this.pasteTimestamps.push({\n                    index: i,\n                    time: 0,\n                    formattedTime: this.formatTime(0),\n                    pastedText: comment,\n                    timestamp: 0\n                });\n            });\n        }\n\n        while (this.pasteTimestamps.length < this.usercomments.length) {\n            const lastIndex = this.pasteTimestamps.length;\n            this.pasteTimestamps.push({\n                index: lastIndex,\n                time: 0,\n                formattedTime: this.formatTime(0),\n                pastedText: this.usercomments[lastIndex],\n                timestamp: 0\n            });\n        }\n\n        if (this.pasteEventsPanel) {\n            this.populatePasteEventsPanel(this.pasteEventsPanel);\n        }\n    }\n\n    // Populate the paste events panel with navigation\n    populatePasteEventsPanel(panel) {\n        panel.innerHTML = '';\n        panel.classList.add('tiny_cursive_event_panel');\n\n        if (!this.pasteTimestamps.length) {\n            const noEventsMessage = document.createElement('div');\n            noEventsMessage.className = 'no-paste-events-message p-3';\n            noEventsMessage.textContent = 'No paste events detected for this submission.';\n            panel.appendChild(noEventsMessage);\n            return;\n        }\n\n        const carouselContainer = document.createElement('div');\n        carouselContainer.classList.add('tiny_cursive_paste_events_carousel', 'paste-events-carousel');\n\n        const navigationRow = document.createElement('div');\n        navigationRow.classList.add('paste-events-navigation', 'tiny_cursive_navigation_row');\n\n        const counterDisplay = document.createElement('div');\n        counterDisplay.classList.add('paste-events-counter', 'tiny_cursive_counter_display');\n        counterDisplay.textContent = 'Paste Events';\n\n        const navButtons = document.createElement('div');\n        navButtons.classList.add('tiny_cursive_nav_buttons');\n        const prevButton = document.createElement('button');\n        prevButton.classList.add('paste-event-prev-btn', 'tiny_cursive_nav_button');\n        prevButton.innerHTML = '<i class=\"fa fa-chevron-left\"></i>';\n\n        const nextButton = document.createElement('button');\n        nextButton.classList.add('paste-event-next-btn', 'tiny_cursive_nav_button');\n        nextButton.innerHTML = '<i class=\"fa fa-chevron-right\"></i>';\n        nextButton.disabled = this.pasteTimestamps.length <= 1;\n\n        navButtons.appendChild(prevButton);\n        navButtons.appendChild(nextButton);\n        navigationRow.appendChild(counterDisplay);\n        navigationRow.appendChild(navButtons);\n\n        const contentContainer = document.createElement('div');\n        contentContainer.className = 'paste-events-content tiny_cursive_content_container';\n        contentContainer.appendChild(this.createPasteEventDisplay(this.pasteTimestamps[0]));\n\n        carouselContainer.appendChild(navigationRow);\n        carouselContainer.appendChild(contentContainer);\n        panel.appendChild(carouselContainer);\n\n        let currentIndex = 0;\n        const updateDisplay = () => {\n            contentContainer.innerHTML = '';\n            contentContainer.appendChild(this.createPasteEventDisplay(this.pasteTimestamps[currentIndex]));\n            counterDisplay.textContent = 'Paste Events';\n            prevButton.disabled = currentIndex === 0;\n            prevButton.style.opacity = currentIndex === 0 ? '0.5' : '1';\n            nextButton.disabled = currentIndex === this.pasteTimestamps.length - 1;\n            nextButton.style.opacity = currentIndex === this.pasteTimestamps.length - 1 ? '0.5' : '1';\n        };\n\n        prevButton.addEventListener('click', () => {\n            if (currentIndex > 0) {\n                currentIndex--;\n                updateDisplay();\n            }\n        });\n\n        nextButton.addEventListener('click', () => {\n            if (currentIndex < this.pasteTimestamps.length - 1) {\n                currentIndex++;\n                updateDisplay();\n            }\n        });\n    }\n\n    createPasteEventDisplay(pasteEvent) {\n        const eventRow = document.createElement('div');\n        eventRow.className = 'tiny_cursive_event_row';\n\n        const headerRow = document.createElement('div');\n        headerRow.className = 'tiny_cursive_header_row';\n\n        const textContainer = document.createElement('div');\n        textContainer.className = 'tiny_cursive_text_container';\n\n        const timestampContainer = document.createElement('div');\n        timestampContainer.className = 'paste-event-timestamp tiny_cursive_paste_event_timestamp';\n        timestampContainer.textContent = pasteEvent.formattedTime;\n\n        const pastedTextContainer = document.createElement('div');\n        pastedTextContainer.className = 'paste-event-text tiny_cursive_pasted_text_container';\n        pastedTextContainer.textContent = pasteEvent.pastedText;\n\n        textContainer.appendChild(timestampContainer);\n        textContainer.appendChild(pastedTextContainer);\n\n        const playButton = document.createElement('button');\n        playButton.className = 'paste-event-play-btn tiny_cursive_seekplay_button';\n        const playIcon = document.createElement('img');\n        playIcon.src = M.util.image_url('seekplayicon', 'tiny_cursive');\n        playButton.innerHTML = playIcon.outerHTML;\n        playButton.addEventListener('click', () => this.jumpToTimestamp(pasteEvent.timestamp));\n\n        headerRow.appendChild(textContainer);\n        headerRow.appendChild(playButton);\n        eventRow.appendChild(headerRow);\n\n        return eventRow;\n    }\n\n    // Jump to a specific timestamp in the replay\n    jumpToTimestamp(timestamp) {\n        const percentage = this.totalDuration > 0 ? (timestamp / this.totalDuration) * 100 : 0;\n        this.skipToTime(percentage);\n        if (!this.replayInProgress) {\n            this.startReplay(false);\n        }\n    }\n\n    setScrubberVal(value) {\n        if (this.scrubberElement) {\n            this.scrubberElement.value = String(value);\n            if (this.timeDisplay) {\n                const displayTime = Math.min(this.currentTime, this.totalDuration);\n                this.timeDisplay.textContent = `${this.formatTime(displayTime)} / ${this.formatTime(this.totalDuration)}`;\n            }\n        }\n    }\n\n    loadJSON(filePath) {\n        return fetchJson([{\n            methodname: 'cursive_get_reply_json',\n            args: {filepath: filePath}\n        }])[0].done(response => response).fail(error => {\n            throw new Error(`Error loading JSON file: ${error.message}`);\n        });\n    }\n\n    formatTime(ms) {\n        const seconds = Math.floor(ms / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const remainingSeconds = seconds % 60;\n        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n    }\n\n    // Start or restart the replay\n    startReplay(reset = true) {\n        if (this.replayInProgress) {\n            clearTimeout(this.replayTimeout);\n        }\n        const atEnd = (this.totalDuration > 0 && this.currentTime >= this.totalDuration) ||\n            (this.currentEventIndex >= this.totalEvents);\n        if (atEnd && !reset) {\n            reset = true;\n        }\n        this.replayInProgress = true;\n        if (reset) {\n            this.outputElement.innerHTML = '';\n            this.text = '';\n            this.cursorPosition = 0;\n            this.currentEventIndex = 0;\n            this.currentTime = 0;\n            this.highlightedChars = [];\n            this.deletedChars = [];\n            this.isControlKeyPressed = false;\n        }\n        if (this.playButton) {\n            const pauseSvg = document.createElement('i');\n            pauseSvg.className = 'fa fa-pause';\n            this.playButton.querySelector('.play-icon').innerHTML = pauseSvg.outerHTML;\n        }\n        this.replayLog();\n    }\n\n    // Process events in sequence to simulate typing\n    replayLog() {\n        if (!this.replayInProgress) {\n            this.updateDisplayText(this.text, this.cursorPosition, [], []);\n            return;\n        }\n\n        while (this.currentEventIndex < this.logData.length) {\n            const event = this.logData[this.currentEventIndex];\n            if (event.normalizedTime && event.normalizedTime > this.currentTime) {\n                break;\n            }\n\n            let text = this.text || '';\n            let cursor = this.cursorPosition;\n            let updatedHighlights = [...this.highlightedChars];\n            let updatedDeleted = [...this.deletedChars];\n\n            if (event.rePosition !== undefined && (this.currentEventIndex === 0 ||\n                event.event === 'mouseDown' || event.event === 'mouseUp')) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n\n            if (event.event?.toLowerCase() === 'keydown') {\n                ({text, cursor, updatedHighlights, updatedDeleted} =\n                    this.processKeydownEvent(event, text, cursor, updatedHighlights, updatedDeleted));\n            }\n\n            this.text = text;\n            this.cursorPosition = cursor;\n            this.highlightedChars = updatedHighlights.filter(h => !h.expiresAt || h.expiresAt > this.currentTime);\n            this.deletedChars = updatedDeleted.filter(d => !d.expiresAt || d.expiresAt > this.currentTime);\n\n            this.currentEventIndex++;\n        }\n\n        this.updateDisplayText(this.text, this.cursorPosition, this.highlightedChars, this.deletedChars);\n        if (this.totalDuration > 0) {\n            const percentComplete = Math.min((this.currentTime / this.totalDuration) * 100, 100);\n            this.setScrubberVal(percentComplete);\n        }\n\n        if (this.replayInProgress) {\n            const baseIncrement = 100;\n            const incrementTime = baseIncrement / this.speed;\n            this.currentTime += baseIncrement;\n            if (this.currentEventIndex >= this.totalEvents) {\n                if (this.loop) {\n                    this.startReplay(true);\n                } else {\n                    this.stopReplay();\n                    this.updateDisplayText(this.text, this.cursorPosition, [], []);\n                }\n            } else {\n                this.replayTimeout = setTimeout(() => this.replayLog(), incrementTime);\n            }\n        }\n    }\n\n    // Handle keydown events (e.g., typing, backspace, Ctrl+V)\n    processKeydownEvent(event, text, cursor, highlights, deletions) {\n        const key = event.key;\n        const charToInsert = this.applyKey(key);\n        this.updateModifierStates(key);\n        if (this.isCtrlBackspace(key, cursor)) {\n            ({ text, cursor } = this.handleCtrlBackspace(text, cursor, deletions));\n        } else if (this.isCtrlDelete(key, cursor, text)) {\n            ({ text } = this.handleCtrlDelete(text, cursor, deletions));\n        } else if (this.isCtrlArrowMove(key)) {\n            cursor = this.handleCtrlArrowMove(key, text, cursor);\n        } else if (this.isRegularBackspace(key, cursor)) {\n            ({ text, cursor } = this.handleBackspace(text, cursor, deletions));\n        } else if (this.isRegularDelete(key, cursor, text)) {\n            ({ text } = this.handleDelete(text, cursor, deletions));\n        } else if (this.isRegularArrowMove(key)) {\n            cursor = this.handleArrowMove(key, text, cursor);\n        } else if (charToInsert && charToInsert.length > 0) {\n            ({ text, cursor } = this.handleCharacterInsert(charToInsert, text, cursor, highlights));\n        }\n        return {\n            text,\n            cursor,\n            updatedHighlights: highlights,\n            updatedDeleted: deletions\n        };\n    }\n\n    // Update state for modifier keys (Control, paste events)\n    updateModifierStates(key) {\n        if (key === 'Control') {\n            this.isControlKeyPressed = true;\n        } else if (key === 'v' && this.isControlKeyPressed) {\n            this.isPasteEvent = true;\n            this.isControlKeyPressed = false;\n        } else if (!['Control', 'Backspace', 'Delete', 'ArrowLeft', 'ArrowRight'].includes(key)) {\n            this.isControlKeyPressed = false;\n            this.isPasteEvent = false;\n        }\n    }\n\n    isCtrlBackspace(key, cursor) {\n        return key === 'Backspace' && this.isControlKeyPressed && cursor > 0;\n    }\n\n    isCtrlDelete(key, cursor, text) {\n        return key === 'Delete' && this.isControlKeyPressed && cursor < text.length;\n    }\n\n    isCtrlArrowMove(key) {\n        return this.isControlKeyPressed && (key === 'ArrowLeft' || key === 'ArrowRight');\n    }\n\n    isRegularBackspace(key, cursor) {\n        return key === 'Backspace' && !this.isPasteEvent && cursor > 0;\n    }\n\n    isRegularDelete(key, cursor, text) {\n        return key === 'Delete' && !this.isControlKeyPressed && cursor < text.length;\n    }\n\n    isRegularArrowMove(key) {\n        return !this.isControlKeyPressed && (key === 'ArrowLeft' || key === 'ArrowRight');\n    }\n\n    handleCtrlArrowMove(key, text, cursor) {\n        return key === 'ArrowLeft'\n            ? this.findPreviousWordBoundary(text, cursor)\n            : this.findNextWordBoundary(text, cursor);\n    }\n\n    handleBackspace(text, cursor, deletions) {\n        deletions.push({\n            index: cursor - 1,\n            chars: text[cursor - 1],\n            time: this.currentTime,\n            expiresAt: this.currentTime + 2000\n        });\n        return {\n            text: text.substring(0, cursor - 1) + text.substring(cursor),\n            cursor: cursor - 1\n        };\n    }\n\n    handleDelete(text, cursor, deletions) {\n        deletions.push({\n            index: cursor,\n            chars: text[cursor],\n            time: this.currentTime,\n            expiresAt: this.currentTime + 2000\n        });\n        return {\n            text: text.substring(0, cursor) + text.substring(cursor + 1),\n            cursor\n        };\n    }\n\n    handleArrowMove(key, text, cursor) {\n        return key === 'ArrowLeft'\n            ? Math.max(0, cursor - 1)\n            : Math.min(text.length, cursor + 1);\n    }\n\n    handleCharacterInsert(charToInsert, text, cursor, highlights) {\n        text = text.substring(0, cursor) + charToInsert + text.substring(cursor);\n        if (charToInsert.trim() !== '') {\n            highlights.push({\n                index: cursor,\n                chars: charToInsert,\n                time: this.currentTime,\n                expiresAt: this.currentTime + 1500\n            });\n        }\n        return { text, cursor: cursor + 1 };\n    }\n\n    handleCtrlDelete(text, cursor, deletions) {\n        const wordEnd = this.findNextWordBoundary(text, cursor);\n        const wordToDelete = text.substring(cursor, wordEnd);\n        for (let i = 0; i < wordToDelete.length; i++) {\n            deletions.push({\n                index: cursor + i,\n                chars: wordToDelete[i],\n                time: this.currentTime,\n                expiresAt: this.currentTime + 2000\n            });\n        }\n        return {\n            text: text.substring(0, cursor) + text.substring(wordEnd),\n            cursor\n        };\n    }\n\n    handleCtrlBackspace(text, cursor, deletions) {\n        let wordStart = cursor;\n        while (wordStart > 0 && text[wordStart - 1] === ' ') {\n            wordStart--;\n        }\n        while (wordStart > 0 && text[wordStart - 1] !== ' ') {\n            wordStart--;\n        }\n        const wordToDelete = text.substring(wordStart, cursor);\n        for (let i = 0; i < wordToDelete.length; i++) {\n            deletions.push({\n                index: wordStart + i,\n                chars: wordToDelete[i],\n                time: this.currentTime,\n                expiresAt: this.currentTime + 2000\n            });\n        }\n        return { text: text.substring(0, wordStart) + text.substring(cursor), cursor: wordStart };\n    }\n\n    // Finds the index of the next word boundary after the cursor position\n    findNextWordBoundary(text, cursor) {\n        if (!text || cursor >= text.length) {\n            return cursor;\n        }\n        if (text[cursor] === ' ') {\n            while (cursor < text.length && text[cursor] === ' ') {\n                 cursor++;\n            }\n        }\n        if (cursor >= text.length) {\n            let lastNonSpace = text.length - 1;\n            while (lastNonSpace >= 0 && text[lastNonSpace] === ' ') {\n                 lastNonSpace--;\n            }\n            return lastNonSpace + 1;\n        }\n        let wordEnd = cursor;\n        while (wordEnd < text.length && text[wordEnd] !== ' ') {\n             wordEnd++;\n         }\n        return wordEnd;\n    }\n\n    // Finds the index of the previous word boundary before the cursor position\n    findPreviousWordBoundary(text, cursor) {\n        if (cursor <= 0) {\n            return 0;\n        }\n        let pos = cursor - 1;\n        while (pos > 0 && (text[pos] === ' ' || text[pos] === '\\n')) {\n             pos--;\n        }\n        while (pos > 0 && text[pos - 1] !== ' ' && text[pos - 1] !== '\\n') {\n             pos--;\n        }\n\n        return pos;\n    }\n\n    skipToEnd() {\n        if (this.replayInProgress) {\n            this.replayInProgress = false;\n        }\n        let textOutput = \"\";\n        this.logData.forEach(event => {\n            if (event.event.toLowerCase() === 'keydown') {\n                textOutput = this.applyKey(event.key, textOutput);\n            }\n        });\n        this.outputElement.innerHTML = textOutput.slice(0, -1);\n        this.setScrubberVal(100);\n    }\n\n    // Used by the scrubber to skip to a certain percentage of data\n    skipToTime(percentage) {\n        const wasPlaying = this.replayInProgress;\n        this.stopReplay();\n\n        const targetTime = (this.totalDuration * percentage) / 100;\n        this.currentTime = targetTime;\n        this.currentEventIndex = 0;\n        this.text = '';\n        this.cursorPosition = 0;\n        this.highlightedChars = [];\n        this.deletedChars = [];\n        this.isControlKeyPressed = false;\n        this.isPasteEvent = false;\n\n        let text = '';\n        let cursor = 0;\n        let highlights = [];\n        let deletions = [];\n\n        for (let i = 0; i < this.logData.length; i++) {\n            const event = this.logData[i];\n            if (event.normalizedTime && event.normalizedTime > targetTime) {\n                this.currentEventIndex = i;\n                break;\n            }\n            if (event.rePosition !== undefined && (i === 0 || event.event === 'mouseDown' || event.event === 'mouseUp')) {\n                cursor = Math.max(0, Math.min(event.rePosition, text.length));\n            }\n            if (event.event?.toLowerCase() === 'keydown') {\n                ({text, cursor, updatedHighlights: highlights, updatedDeleted: deletions} =\n                    this.processKeydownEvent(event, text, cursor, highlights, deletions));\n            }\n            this.currentEventIndex = i + 1;\n        }\n\n        this.text = text;\n        this.cursorPosition = cursor;\n        this.highlightedChars = highlights.filter(h => !h.expiresAt || h.expiresAt > targetTime);\n        this.deletedChars = deletions.filter(d => !d.expiresAt || d.expiresAt > targetTime);\n        this.updateDisplayText(this.text, this.cursorPosition, this.highlightedChars, this.deletedChars);\n        this.setScrubberVal(percentage);\n\n        if (wasPlaying) {\n            this.replayInProgress = true;\n            this.replayLog();\n        }\n    }\n\n    // Update display with text, cursor, highlights and deletions\n    updateDisplayText(text, cursorPosition, highlights, deletions) {\n        let html = '';\n        const highlightMap = {};\n        const deletionMap = {};\n        const currentTime = this.currentTime;\n\n        highlights.forEach(h => {\n            let opacity = 1;\n            if (h.expiresAt && h.expiresAt - currentTime < 500) {\n                opacity = Math.max(0, (h.expiresAt - currentTime) / 500);\n            }\n            highlightMap[h.index] = {chars: h.chars, opacity};\n        });\n\n        deletions.forEach(d => {\n            let opacity = 0.5;\n            if (d.expiresAt && d.expiresAt - currentTime < 500) {\n                opacity = Math.max(0, ((d.expiresAt - currentTime) / 500) * 0.5);\n            }\n            deletionMap[d.index] = {chars: d.chars, opacity};\n        });\n\n        // Find if we have out-of-bounds deletions (from Control+Backspace)\n        const outOfRangeDeletions = deletions.filter(d => d.index >= text.length);\n        const textLines = text.split('\\n');\n        let currentPosition = 0;\n\n        for (let lineIndex = 0; lineIndex < textLines.length; lineIndex++) {\n            const line = textLines[lineIndex];\n            for (let i = 0; i < line.length; i++) {\n                if (currentPosition === cursorPosition) {\n                    html += '<span class=\"tiny_cursive-cursor\"></span>';\n                }\n                const char = line[i];\n                if (deletionMap[currentPosition]) {\n                    html += `<span class=\"tiny_cursive-deleted-char\" style=\"opacity:\n                        ${deletionMap[currentPosition].opacity};\">${deletionMap[currentPosition].chars}</span>`;\n                }\n                if (highlightMap[currentPosition] && char !== ' ') {\n                    html += `<span class=\"tiny_cursive-highlighted-char\" style=\"opacity:\n                        ${highlightMap[currentPosition].opacity};\">${char}</span>`;\n                } else {\n                    html += char === ' ' ? ' ' : this.escapeHtml(char);\n                }\n                currentPosition++;\n            }\n            if (currentPosition === cursorPosition) {\n                html += '<span class=\"tiny_cursive-cursor\"></span>';\n            }\n            if (lineIndex < textLines.length - 1) {\n                html += '<br>';\n                currentPosition++;\n            }\n        }\n\n        if (cursorPosition === text.length && !html.endsWith('<span class=\"tiny_cursive-cursor\"></span>')) {\n            html += '<span class=\"tiny_cursive-cursor\"></span>';\n        }\n\n        if (outOfRangeDeletions.length > 0) {\n            outOfRangeDeletions.sort((a, b) => a.index - b.index);\n            const cursorHTML = '<span class=\"tiny_cursive-cursor\"></span>';\n            const cursorPos = html.lastIndexOf(cursorHTML);\n            if (cursorPos !== -1) {\n                let deletedWordHTML = '<span class=\"tiny_cursive-deleted-char\" style=\"opacity: 0.5;\">';\n                outOfRangeDeletions.forEach(d => {\n                    deletedWordHTML += d.chars;\n                });\n                deletedWordHTML += '</span>';\n                html = html.substring(0, cursorPos) + deletedWordHTML + html.substring(cursorPos);\n            }\n        }\n\n        const wasScrolledToBottom = this.outputElement.scrollHeight -\n            this.outputElement.clientHeight <= this.outputElement.scrollTop + 1;\n        this.outputElement.innerHTML = html;\n\n        if (wasScrolledToBottom || this.isCursorBelowViewport()) {\n            this.outputElement.scrollTop = this.outputElement.scrollHeight;\n        }\n    }\n\n    // Check if cursor is below visible viewport\n    isCursorBelowViewport() {\n        const cursorElement = this.outputElement.querySelector('.tiny_cursive-cursor:last-of-type');\n        if (!cursorElement) {\n            return false;\n        }\n\n        const cursorRect = cursorElement.getBoundingClientRect();\n        const outputRect = this.outputElement.getBoundingClientRect();\n\n        return cursorRect.bottom > outputRect.bottom;\n    }\n\n    escapeHtml(unsafe) {\n        return unsafe\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#039;');\n    }\n\n    // Used in various places to add a keydown, backspace, etc. to the output\n    applyKey(key) {\n        switch (key) {\n            case 'Enter':\n                return '\\n';\n            case 'Backspace':\n            case 'Delete':\n            case 'ControlBackspace':\n                return '';\n            case ' ':\n                 return ' ';\n            default:\n                return !['Shift', 'Ctrl', 'Alt', 'ArrowDown', 'ArrowUp', 'Control', 'ArrowRight',\n                    'ArrowLeft', 'Meta', 'CapsLock', 'Tab', 'Escape', 'Delete', 'PageUp', 'PageDown',\n                    'Insert', 'Home', 'End', 'NumLock', 'AudioVolumeUp', 'AudioVolumeDown',\n                    'MediaPlayPause', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10',\n                    'F11', 'F12', 'PrintScreen', 'UnIdentified'].includes(key) ? key : '';\n        }\n    }\n}"],"names":["constructor","elementId","filePath","speed","loop","controllerId","replayInProgress","parseFloat","highlightedChars","deletedChars","cursorPosition","currentEventIndex","totalEvents","currentTime","totalDuration","usercomments","pasteTimestamps","isPasteEvent","isControlKeyPressed","text","element","document","getElementById","Error","outputElement","loadJSON","then","data","status","processData","this","logData","length","identifyPasteEvents","constructController","startReplay","handleNoSubmission","catch","error","window","console","message","JSON","parse","comments","Array","isArray","payload","unixTimestamp","startTime","map","event","normalizedTime","html","str","Promise","all","templates","render","Str","get_string","newElement","stopReplay","clearTimeout","replayTimeout","playButton","playSvg","createElement","src","M","util","image_url","querySelector","innerHTML","outerHTML","currentPosition","replayIntervalId","clearInterval","container","controlContainer","buildControllerUI","remove","topRow","classList","add","createPlayButton","appendChild","scrubberContainer","createScrubberContainer","timeDisplay","createTimeDisplay","bottomRow","speedContainer","createSpeedControls","pasteEventsToggle","createPasteEventsToggle","pasteEventsPanel","addEventListener","find","removeClass","addClass","scrubberElement","type","max","min","value","skipToTime","parseInt","textContent","speedLabel","speedGroup","forEach","speedBtn","dataset","querySelectorAll","btn","pasteEventsIcon","pasteIcon","pasteEventsText","pasteEventCount","className","style","marginLeft","chevronIcon","chevron","transition","createPasteEventsPanel","isHidden","display","transform","existingPanel","populatePasteEventsPanel","controlPressed","pasteCount","i","toLowerCase","key","timestamp","push","index","time","formattedTime","formatTime","pastedText","comment","lastIndex","panel","noEventsMessage","carouselContainer","navigationRow","counterDisplay","navButtons","prevButton","nextButton","disabled","contentContainer","createPasteEventDisplay","currentIndex","updateDisplay","opacity","pasteEvent","eventRow","headerRow","textContainer","timestampContainer","pastedTextContainer","playIcon","jumpToTimestamp","percentage","setScrubberVal","String","displayTime","Math","methodname","args","filepath","done","response","fail","ms","seconds","floor","minutes","remainingSeconds","toString","padStart","reset","pauseSvg","replayLog","cursor","updatedHighlights","updatedDeleted","undefined","rePosition","processKeydownEvent","filter","h","expiresAt","d","updateDisplayText","percentComplete","baseIncrement","incrementTime","setTimeout","highlights","deletions","charToInsert","applyKey","updateModifierStates","isCtrlBackspace","handleCtrlBackspace","isCtrlDelete","handleCtrlDelete","isCtrlArrowMove","handleCtrlArrowMove","isRegularBackspace","handleBackspace","isRegularDelete","handleDelete","isRegularArrowMove","handleArrowMove","handleCharacterInsert","includes","findPreviousWordBoundary","findNextWordBoundary","chars","substring","trim","wordEnd","wordToDelete","wordStart","lastNonSpace","pos","skipToEnd","textOutput","slice","wasPlaying","targetTime","highlightMap","deletionMap","outOfRangeDeletions","textLines","split","lineIndex","line","char","escapeHtml","endsWith","sort","a","b","cursorHTML","cursorPos","lastIndexOf","deletedWordHTML","wasScrolledToBottom","scrollHeight","clientHeight","scrollTop","isCursorBelowViewport","cursorElement","cursorRect","getBoundingClientRect","outputRect","bottom","unsafe","replace"],"mappings":"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"}