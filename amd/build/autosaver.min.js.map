{"version":3,"file":"autosaver.min.js","sources":["../src/autosaver.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/autosaver\n * @category   TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author     Brain Station 23 <sales@brainstation-23.com>\n */\n\nimport {call} from 'core/ajax';\nimport {create} from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\nimport {save, cancel, hidden} from 'core/modal_events';\nimport $ from 'jquery';\nimport {iconUrl, iconGrayUrl, tooltipCss} from 'tiny_cursive/common';\n\nexport const register = (editor, interval, userId, hasApiKey, MODULES) => {\n\n    var isStudent = !($('#body').hasClass('teacher_admin'));\n    var intervention = $('#body').hasClass('intervention');\n    var host = M.cfg.wwwroot;\n    var userid = userId;\n    var courseid = M.cfg.courseId;\n    var editorid = editor?.id;\n    var cmid = M.cfg.contextInstanceId;\n    var ed = \"\";\n    var event = \"\";\n    var filename = \"\";\n    var modulename = \"\";\n    var questionid = 0;\n    var resourceId = 0;\n    var quizSubmit = $('#mod_quiz-next-nav');\n    let assignSubmit = $('#id_submitbutton');\n    var syncInterval = interval ? interval * 1000 : 10000; // Default: Sync Every 10s.\n\n    const postOne = async(methodname, args) => {\n        try {\n            const response = await call([{\n                methodname,\n                args,\n            }])[0];\n            return response;\n        } catch (error) {\n            window.console.error('Error in postOne:', error);\n            throw error;\n        }\n    };\n\n    assignSubmit.on('click', async function(e) {\n        e.preventDefault();\n        if (filename) {\n            // eslint-disable-next-line\n            syncData().then(() => {\n                assignSubmit.off('click').click();\n            });\n        } else {\n            assignSubmit.off('click').click();\n        }\n    });\n\n    quizSubmit.on('click', async function(e) {\n        e.preventDefault();\n        if (filename) {\n            // eslint-disable-next-line\n            syncData().then(() => {\n                quizSubmit.off('click').click();\n            });\n        } else {\n            quizSubmit.off('click').click();\n        }\n    });\n\n    const getModal = (e) => {\n\n        Promise.all([\n            getString('tiny_cursive_srcurl', 'tiny_cursive'),\n            getString('tiny_cursive_srcurl_des', 'tiny_cursive'),\n            getString('tiny_cursive_placeholder', 'tiny_cursive')\n        ]).then(function([title, titledes, placeholder]) {\n\n            return create({\n                type: 'SAVE_CANCEL',\n                title: `<div><div class=\"tiny-cursive-title-text\">${title}</div>\n                <span class=\"tiny-cursive-title-description \">${titledes}</span></div>`,\n                body: `<textarea  class=\"form-control inputUrl\" value=\"\" id=\"inputUrl\" placeholder=\"${placeholder}\"></textarea>`,\n                removeOnClose: true,\n            })\n                .done(modal => {\n                    modal.getRoot().addClass('tiny-cursive-modal');\n                    modal.show();\n                    var lastEvent = '';\n                    // eslint-disable-next-line\n                    modal.getRoot().on(save, function() {\n\n                        var number = document.getElementById(\"inputUrl\").value.trim();\n                        let ur = e.srcElement.baseURI;\n                        let parm = new URL(ur);\n                        let modulesInfo = getModulesInfo(ur, parm, MODULES);\n\n                        resourceId = modulesInfo.resourceId;\n                        modulename = modulesInfo.name;\n\n                        if (number === \"\" || number === null || number === undefined) {\n                            editor.execCommand('Undo');\n                            // eslint-disable-next-line\n                            getString('pastewarning', 'tiny_cursive').then(str => alert(str));\n                        } else {\n                            editor.execCommand('Paste');\n                        }\n\n                        postOne('cursive_user_comments', {\n                            modulename: modulename,\n                            cmid: cmid,\n                            resourceid: resourceId,\n                            courseid: courseid,\n                            usercomment: number,\n                            timemodified: Date.now(),\n                            editorid: editorid ? editorid : \"\"\n                        });\n\n                        lastEvent = 'save';\n                        modal.destroy();\n                    });\n                    modal.getRoot().on(cancel, function() {\n                        editor.execCommand('Undo');\n                        lastEvent = 'cancel';\n                    });\n\n                    modal.getRoot().on(hidden, function() {\n                        if (lastEvent != 'cancel' && lastEvent != 'save') {\n                            editor.execCommand('Undo');\n                        }\n                    });\n                    return modal;\n                });\n        }).catch(error => window.console.error(error));\n\n    };\n    // eslint-disable-next-line\n    const sendKeyEvent = (events, editor) => {\n        ed = editor;\n        event = events;\n        let ur = editor.srcElement.baseURI;\n        let parm = new URL(ur);\n        let modulesInfo = getModulesInfo(ur, parm, MODULES);\n\n        resourceId = modulesInfo.resourceId;\n        modulename = modulesInfo.name;\n\n        filename = `${userid}_${resourceId}_${cmid}_${modulename}_attempt`;\n\n        if (modulename === 'quiz') {\n            questionid = editorid.split(':')[1].split('_')[0];\n            filename = `${userid}_${resourceId}_${cmid}_${questionid}_${modulename}_attempt`;\n\n        }\n\n        if (localStorage.getItem(filename)) {\n\n            let data = JSON.parse(localStorage.getItem(filename));\n            data.push({\n                resourceId: resourceId,\n                key: editor.key,\n                keyCode: editor.keyCode,\n                event: event,\n                courseId: courseid,\n                unixTimestamp: Date.now(),\n                clientId: host,\n                personId: userid\n            });\n            localStorage.setItem(filename, JSON.stringify(data));\n        } else {\n            let data = [];\n            data.push({\n                resourceId: resourceId,\n                key: editor.key,\n                keyCode: editor.keyCode,\n                event: event,\n                courseId: courseid,\n                unixTimestamp: Date.now(),\n                clientId: host,\n                personId: userid\n            });\n            localStorage.setItem(filename, JSON.stringify(data));\n        }\n\n    };\n    editor.on('keyUp', (editor) => {\n        customTooltip();\n        sendKeyEvent(\"keyUp\", editor);\n    });\n    editor.on('Paste', async(e) => {\n        customTooltip();\n        if (isStudent && intervention) {\n            getModal(e);\n        }\n    });\n    editor.on('Redo', async(e) => {\n        customTooltip();\n        if (isStudent && intervention) {\n            getModal(e);\n        }\n    });\n    editor.on('keyDown', (editor) => {\n        customTooltip();\n        sendKeyEvent(\"keyDown\", editor);\n    });\n    // eslint-disable-next-line\n    editor.on('init', () => {\n        customTooltip();\n    });\n    editor.on('SetContent', () => {\n        customTooltip();\n    });\n\n\n    /**\n     * Synchronizes data from localStorage to server\n     * @async\n     * @function SyncData\n     * @description Retrieves stored keypress data from localStorage and sends it to server\n     * @returns {Promise} Returns response from server if data exists and is successfully sent\n     * @throws {Error} Logs error to console if data submission fails\n     */\n    async function syncData() {\n\n        let data = localStorage.getItem(filename);\n\n        if (!data || data.length === 0) {\n            return;\n        } else {\n            localStorage.removeItem(filename);\n            let originalText = editor.getContent({format: 'text'});\n            try {\n                // eslint-disable-next-line\n                return await postOne('cursive_write_local_to_json', {\n                    key: ed.key,\n                    event: event,\n                    keyCode: ed.keyCode,\n                    resourceId: resourceId,\n                    cmid: cmid,\n                    modulename: modulename,\n                    editorid: editorid,\n                    \"json_data\": data,\n                    originalText: originalText\n                });\n            } catch (error) {\n                window.console.error('Error submitting data:', error);\n            }\n        }\n    }\n    /**\n     * Sets up custom tooltip functionality for the Cursive icon\n     * Initializes tooltip text, positions the icon in the menubar,\n     * and sets up mouse event handlers for showing/hiding the tooltip\n     * @function customTooltip\n     */\n    function customTooltip() {\n        try {\n            const tooltipText = getTooltipText();\n            const menubarDiv = document.querySelectorAll('div[role=\"menubar\"].tox-menubar');\n            let classArray = [];\n\n            if(menubarDiv.length) {\n                menubarDiv.forEach(function(element, index) {\n                    index+=1;\n                    let className = 'cursive-menu-'+index;\n                    element.classList.add(className);\n                    classArray.push(className);\n                });\n            }\n\n            const cursiveIcon = document.createElement('img');\n            cursiveIcon.src = hasApiKey ? iconUrl: iconGrayUrl;\n\n            cursiveIcon.setAttribute('class', 'tiny_cursive_StateButton');\n            cursiveIcon.style.display = 'inline-block';\n\n            cursiveState(cursiveIcon, menubarDiv, classArray);\n\n            for(let index in classArray) {\n                const elementId = \"tiny_cursive_StateIcon\"+index;\n                const tooltipId = `tiny_cursive_tooltip${index}`;\n\n                tooltipText.then((text) => {\n                    setTooltip(text, document.querySelector(`#${elementId}`), tooltipId);\n                });\n\n                $(`#${elementId}`).on('mouseenter', function () {\n                    $(this).css('position', 'relative');\n                    $(`#${tooltipId}`).css(tooltipCss);\n                });\n\n                $(`#${elementId}`).on('mouseleave', function () {\n                    $(`#${tooltipId}`).css('display', 'none');\n                });\n            }\n        } catch (error) {\n            window.console.error('Error setting up custom tooltip:', error);\n        }\n    }\n\n    /**\n     * Retrieves tooltip text strings from language files\n     * @async\n     * @function getTooltipText\n     * @returns {Promise<Object>} Object containing buttonTitle and buttonDes strings\n     */\n    async function getTooltipText() {\n        const [\n            buttonTitle,\n            buttonDes,\n        ] = await Promise.all([\n            getString('cursive:state:active', 'tiny_cursive'),\n            getString('cursive:state:active:des', 'tiny_cursive'),\n        ]);\n        return {buttonTitle, buttonDes};\n    }\n\n    /**\n     * Updates the Cursive icon state and positions it in the menubar\n     * @param {HTMLElement} cursiveIcon - The Cursive icon element to modify\n     * @param {HTMLElement} menubarDiv - The menubar div element\n     * @param {Array} classArray - Array of class names for the menubar div elements\n     */\n    function cursiveState(cursiveIcon, menubarDiv, classArray) {\n        if (menubarDiv) {\n            for (let index in classArray) {\n                const rightWrapper = document.createElement('div');\n                const imgWrapper   = document.createElement('span');\n                const iconClone = cursiveIcon.cloneNode(true);\n                const targetMenu = document.querySelector('.' + classArray[index]);\n                let elementId = \"tiny_cursive_StateIcon\"+index;\n\n                rightWrapper.style.marginLeft = 'auto';\n                rightWrapper.style.display = 'flex';\n                rightWrapper.style.alignItems = 'center';\n                imgWrapper.id = elementId;\n\n                imgWrapper.appendChild(iconClone);\n                rightWrapper.appendChild(imgWrapper);\n\n                if (targetMenu && !targetMenu.querySelector(`#${elementId}`)) {\n                    targetMenu.appendChild(rightWrapper);\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets up tooltip content and styling for the Cursive icon\n     * @param {Object} text - Object containing tooltip text strings\n     * @param {string} text.buttonTitle - Title text for the tooltip\n     * @param {string} text.buttonDes - Description text for the tooltip\n     * @param {HTMLElement} cursiveIcon - The Cursive icon element to attach tooltip to\n     * @param {string} tooltipId - ID for the tooltip element\n     */\n    function setTooltip(text, cursiveIcon, tooltipId) {\n        if(document.querySelector(`#${tooltipId}`)) {\n            return;\n        }\n\n        const tooltipSpan = document.createElement('span');\n        const description = document.createElement('span');\n        const linebreak = document.createElement('br');\n        const tooltipTitle = document.createElement('strong');\n\n        tooltipSpan.style.display = 'none';\n        // cursiveIcon.style.width = \"auto\";\n\n        tooltipTitle.textContent = text.buttonTitle;\n        tooltipTitle.style.fontSize = '16px';\n        tooltipTitle.style.fontWeight = 'bold';\n        description.textContent = text.buttonDes;\n        description.style.fontSize = '14px';\n\n        tooltipSpan.id = tooltipId;\n        tooltipSpan.classList.add(`shadow`);\n        tooltipSpan.appendChild(tooltipTitle);\n        tooltipSpan.appendChild(linebreak);\n        tooltipSpan.appendChild(description);\n        cursiveIcon.appendChild(tooltipSpan);\n    }\n\n    /**\n     * Extracts module information from URL parameters\n     * @param {string} ur - The base URL to analyze\n     * @param {URL} parm - URL object containing search parameters\n     * @param {Array} MODULES - Array of valid module names to check against\n     * @returns {Object|boolean} Object containing resourceId and module name if found, false if no valid module\n     */\n    function getModulesInfo(ur, parm, MODULES) {\n\n        if (!MODULES.some(module => ur.includes(module))) {\n            return false;\n        }\n\n        if (ur.includes(\"forum\") && !ur.includes(\"assign\")) {\n            resourceId = parm.searchParams.get('edit');\n        } else {\n            resourceId = parm.searchParams.get('attempt');\n        }\n\n        if (resourceId === null) {\n            resourceId = 0;\n        }\n\n        for (const module of MODULES) {\n            if (ur.includes(module)) {\n                modulename = module;\n                if (module === \"lesson\" || module === \"assign\") {\n                    resourceId = cmid;\n                } else if (module === \"oublog\") {\n                    resourceId = 0;\n                }\n                break;\n            }\n        }\n\n        return {resourceId: resourceId, name: modulename};\n    }\n\n    window.addEventListener('unload', () => {\n        syncData();\n    });\n\n    setInterval(syncData, syncInterval);\n};\n"],"names":["editor","interval","userId","hasApiKey","MODULES","isStudent","hasClass","intervention","host","M","cfg","wwwroot","userid","courseid","courseId","editorid","id","cmid","contextInstanceId","ed","event","filename","modulename","questionid","resourceId","quizSubmit","assignSubmit","syncInterval","postOne","async","methodname","args","error","window","console","on","e","preventDefault","syncData","then","off","click","getModal","Promise","all","title","titledes","placeholder","type","body","removeOnClose","done","modal","getRoot","addClass","show","lastEvent","save","number","document","getElementById","value","trim","ur","srcElement","baseURI","modulesInfo","getModulesInfo","URL","name","execCommand","str","alert","resourceid","usercomment","timemodified","Date","now","destroy","cancel","hidden","catch","sendKeyEvent","events","split","localStorage","getItem","data","JSON","parse","push","key","keyCode","unixTimestamp","clientId","personId","setItem","stringify","length","removeItem","originalText","getContent","format","customTooltip","tooltipText","buttonTitle","buttonDes","getTooltipText","menubarDiv","querySelectorAll","classArray","forEach","element","index","className","classList","add","cursiveIcon","createElement","src","iconUrl","iconGrayUrl","setAttribute","style","display","rightWrapper","imgWrapper","iconClone","cloneNode","targetMenu","querySelector","elementId","marginLeft","alignItems","appendChild","cursiveState","tooltipId","text","setTooltip","this","css","tooltipCss","tooltipSpan","description","linebreak","tooltipTitle","textContent","fontSize","fontWeight","parm","some","module","includes","searchParams","get","addEventListener","setInterval"],"mappings":"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"}