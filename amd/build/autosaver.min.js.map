{"version":3,"file":"autosaver.min.js","sources":["../src/autosaver.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/autosaver\n * @category   TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author     Brain Station 23 <sales@brainstation-23.com>\n */\n\nimport {call} from 'core/ajax';\nimport {create} from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\nimport {save, cancel, hidden} from 'core/modal_events';\nimport $ from 'jquery';\nimport {iconUrl, iconGrayUrl, tooltipCss} from 'tiny_cursive/common';\n\nexport const register = (editor, interval, userId, hasApiKey, MODULES) => {\n\n    var isStudent = !($('#body').hasClass('teacher_admin'));\n    var intervention = $('#body').hasClass('intervention');\n    var host = M.cfg.wwwroot;\n    var userid = userId;\n    var courseid = M.cfg.courseId;\n    var editorid = editor?.id;\n    var cmid = M.cfg.contextInstanceId;\n    var ed = \"\";\n    var event = \"\";\n    var filename = \"\";\n    var modulename = \"\";\n    var questionid = 0;\n    var resourceId = 0;\n    var quizSubmit = $('#mod_quiz-next-nav');\n    let assignSubmit = $('#id_submitbutton');\n    var syncInterval = interval ? interval * 1000 : 10000; // Default: Sync Every 10s.\n    var lastCaretPos = 1;\n\n    const postOne = async (methodname, args) => {\n        try {\n            const response = await call([{\n                methodname,\n                args,\n            }])[0];\n            return response;\n        } catch (error) {\n            window.console.error('Error in postOne:', error);\n            throw error;\n        }\n    };\n\n    assignSubmit.on('click', async function (e) {\n        e.preventDefault();\n        if (filename) {\n            // eslint-disable-next-line\n            syncData().then(() => {\n                assignSubmit.off('click').click();\n            });\n        } else {\n            assignSubmit.off('click').click();\n        }\n        localStorage.removeItem('lastCopyCutContent');\n    });\n\n    quizSubmit.on('click', async function (e) {\n        e.preventDefault();\n        if (filename) {\n            // eslint-disable-next-line\n            syncData().then(() => {\n                quizSubmit.off('click').click();\n            });\n        } else {\n            quizSubmit.off('click').click();\n        }\n        localStorage.removeItem('lastCopyCutContent');\n    });\n\n    const getModal = (e) => {\n\n        Promise.all([\n            getString('tiny_cursive_srcurl', 'tiny_cursive'),\n            getString('tiny_cursive_srcurl_des', 'tiny_cursive'),\n            getString('tiny_cursive_placeholder', 'tiny_cursive')\n        ]).then(function ([title, titledes, placeholder]) {\n\n            return create({\n                type: 'SAVE_CANCEL',\n                title: `<div><div class=\"tiny-cursive-title-text\">${title}</div>\n                <span class=\"tiny-cursive-title-description \">${titledes}</span></div>`,\n                body: `<textarea  class=\"form-control inputUrl\" value=\"\" id=\"inputUrl\" placeholder=\"${placeholder}\"></textarea>`,\n                removeOnClose: true,\n            })\n                .done(modal => {\n                    modal.getRoot().addClass('tiny-cursive-modal');\n                    modal.show();\n                    var lastEvent = '';\n                    // eslint-disable-next-line\n                    modal.getRoot().on(save, function() {\n\n                        var number = document.getElementById(\"inputUrl\").value.trim();\n                        let ur = e.srcElement.baseURI;\n                        let parm = new URL(ur);\n                        let modulesInfo = getModulesInfo(ur, parm, MODULES);\n\n                        resourceId = modulesInfo.resourceId;\n                        modulename = modulesInfo.name;\n\n                        if (number === \"\" || number === null || number === undefined) {\n                            editor.execCommand('Undo');\n                            // eslint-disable-next-line\n                            getString('pastewarning', 'tiny_cursive').then(str => alert(str));\n                        } else {\n                            editor.execCommand('Paste');\n                        }\n\n                        postOne('cursive_user_comments', {\n                            modulename: modulename,\n                            cmid: cmid,\n                            resourceid: resourceId,\n                            courseid: courseid,\n                            usercomment: number,\n                            timemodified: Date.now(),\n                            editorid: editorid ? editorid : \"\"\n                        });\n\n                        lastEvent = 'save';\n                        modal.destroy();\n                    });\n                    modal.getRoot().on(cancel, function() {\n                        editor.execCommand('Undo');\n                        lastEvent = 'cancel';\n                    });\n\n                    modal.getRoot().on(hidden, function() {\n                        if (lastEvent != 'cancel' && lastEvent != 'save') {\n                            editor.execCommand('Undo');\n                        }\n                    });\n                    return modal;\n                });\n        }).catch(error => window.console.error(error));\n\n    };\n    // eslint-disable-next-line\n    const sendKeyEvent = (events, editor) => {\n        ed = editor;\n        event = events;\n        let ur = editor.srcElement.baseURI;\n        let parm = new URL(ur);\n        let modulesInfo = getModulesInfo(ur, parm, MODULES);\n\n        resourceId = modulesInfo.resourceId;\n        modulename = modulesInfo.name;\n\n        filename = `${userid}_${resourceId}_${cmid}_${modulename}_attempt`;\n\n        if (modulename === 'quiz') {\n            questionid = editorid.split(':')[1].split('_')[0];\n            filename = `${userid}_${resourceId}_${cmid}_${questionid}_${modulename}_attempt`;\n        }\n\n        if (localStorage.getItem(filename)) {\n            let data = JSON.parse(localStorage.getItem(filename));\n            data.push({\n                resourceId: resourceId,\n                key: editor.key,\n                keyCode: editor.keyCode,\n                event: event,\n                courseId: courseid,\n                unixTimestamp: Date.now(),\n                clientId: host,\n                personId: userid,\n                position: ed.caretPosition,\n                rePosition: ed.rePosition\n            });\n            localStorage.setItem(filename, JSON.stringify(data));\n        } else {\n            let data = [{\n                resourceId: resourceId,\n                key: editor.key,\n                keyCode: editor.keyCode,\n                event: event,\n                courseId: courseid,\n                unixTimestamp: Date.now(),\n                clientId: host,\n                personId: userid,\n                position: ed.caretPosition,\n                rePosition: ed.rePosition\n            }];\n            localStorage.setItem(filename, JSON.stringify(data));\n        }\n    };\n\n    editor.on('keyUp', (editor) => {\n        customTooltip();\n        let position = getCaretPosition(true);\n        editor.caretPosition = position.caretPosition;\n        editor.rePosition = position.rePosition;\n        sendKeyEvent(\"keyUp\", editor);\n    });\n    editor.on('Paste', async(e) => {\n        customTooltip();\n        const pastedContent = (e.clipboardData || e.originalEvent.clipboardData).getData('text').trim();\n\n        if (!pastedContent) {\n            return;\n        }\n\n        if (isStudent && intervention) {\n            if (pastedContent !== localStorage.getItem('lastCopyCutContent')) {\n                getModal(e);\n            }\n        }\n    });\n    editor.on('Redo', async(e) => {\n        customTooltip();\n        if (isStudent && intervention) {\n            getModal(e);\n        }\n    });\n    editor.on('keyDown', (editor) => {\n        customTooltip();\n        let position = getCaretPosition();\n        editor.caretPosition = position.caretPosition;\n        editor.rePosition = position.rePosition;\n        sendKeyEvent(\"keyDown\", editor);\n    });\n     editor.on('Cut', () => {\n        const selectedContent = editor.selection.getContent({format: 'text'});\n        localStorage.setItem('lastCopyCutContent', selectedContent.trim());\n    });\n    editor.on('Copy', () => {\n        const selectedContent = editor.selection.getContent({format: 'text'});\n        localStorage.setItem('lastCopyCutContent', selectedContent.trim());\n    });\n    editor.on('mouseDown', async (editor) => {\n        constructMouseEvent(editor);\n        sendKeyEvent(\"mouseDown\", editor);\n    });\n    editor.on('mouseUp', async (editor) => {\n        constructMouseEvent(editor);\n        sendKeyEvent(\"mouseUp\", editor);\n    });\n    // eslint-disable-next-line\n    editor.on('init', () => {\n        customTooltip();\n    });\n    editor.on('SetContent', () => {\n        customTooltip();\n    });\n\n    /**\n     * Constructs a mouse event object with caret position and button information\n     * @param {Object} editor - The TinyMCE editor instance\n     * @function constructMouseEvent\n     * @description Sets caret position, reposition, key and keyCode properties on the editor object based on current mouse state\n     */\n    function constructMouseEvent(editor) {\n        let position = getCaretPosition();\n        editor.caretPosition = position.caretPosition;\n        editor.rePosition = position.rePosition;\n        editor.key = getMouseButton(editor);\n        editor.keyCode = editor.button;\n    }\n\n    /**\n     * Gets the string representation of a mouse button based on its numeric value\n     * @param {Object} editor - The editor object containing button information\n     * @returns {string} The string representation of the mouse button ('left', 'middle', or 'right')\n     */\n    function getMouseButton(editor) {\n\n        switch (editor.button) {\n            case 0:\n                return 'left';\n            case 1:\n                return 'middle';\n            case 2:\n                return 'right';\n        }\n    }\n\n    /**\n     * Gets the current caret position in the editor\n     * @param {boolean} skip - If true, returns the last known caret position instead of calculating a new one\n     * @returns {Object} Object containing:\n     *   - caretPosition: Sequential position number stored in session\n     *   - rePosition: Absolute character offset from start of content\n     * @throws {Error} Logs warning to console if error occurs during calculation\n     */\n    function getCaretPosition(skip = false) {\n        try {\n            if (!editor || !editor.selection) {\n                return { caretPosition: 0, rePosition: 0 };\n            }\n            const rng = editor.selection.getRng();\n\n            let absolutePosition = 0;\n            let node = rng.startContainer;\n\n            absolutePosition = rng.startOffset;\n\n            // Calculate position by walking through previous nodes\n            while (node && node !== editor.getBody()) {\n                while (node.previousSibling) {\n                    node = node.previousSibling;\n                    if (node.textContent) {\n                        absolutePosition += node.textContent.length;\n                    }\n                }\n                node = node.parentNode;\n            }\n\n            if (skip) {\n                return {\n                    caretPosition: lastCaretPos,\n                    rePosition: absolutePosition\n                };\n            }\n\n            const storageKey = `${userid}_${resourceId}_${cmid}_position`;\n            let storedPos = parseInt(sessionStorage.getItem(storageKey), 10);\n            if (isNaN(storedPos)) {\n                storedPos = 0;\n            }\n            storedPos++;\n            lastCaretPos = storedPos;\n            sessionStorage.setItem(storageKey, storedPos);\n\n            return {\n                caretPosition: storedPos,\n                rePosition: absolutePosition\n            };\n        } catch (e) {\n            window.console.warn('Error getting caret position:', e);\n            return { caretPosition: 0, rePosition: 0 };\n        }\n    }\n\n\n    /**\n     * Synchronizes data from localStorage to server\n     * @async\n     * @function SyncData\n     * @description Retrieves stored keypress data from localStorage and sends it to server\n     * @returns {Promise} Returns response from server if data exists and is successfully sent\n     * @throws {Error} Logs error to console if data submission fails\n     */\n    async function syncData() {\n\n        let data = localStorage.getItem(filename);\n\n        if (!data || data.length === 0) {\n            return;\n        } else {\n            localStorage.removeItem(filename);\n            let originalText = editor.getContent({ format: 'text' });\n            try {\n                // eslint-disable-next-line\n                return await postOne('cursive_write_local_to_json', {\n                    key: ed.key,\n                    event: event,\n                    keyCode: ed.keyCode,\n                    resourceId: resourceId,\n                    cmid: cmid,\n                    modulename: modulename,\n                    editorid: editorid,\n                    \"json_data\": data,\n                    originalText: originalText\n                });\n            } catch (error) {\n                window.console.error('Error submitting data:', error);\n            }\n        }\n    }\n    /**\n     * Sets up custom tooltip functionality for the Cursive icon\n     * Initializes tooltip text, positions the icon in the menubar,\n     * and sets up mouse event handlers for showing/hiding the tooltip\n     * @function customTooltip\n     */\n    function customTooltip() {\n        try {\n            const tooltipText = getTooltipText();\n            const menubarDiv = document.querySelectorAll('div[role=\"menubar\"].tox-menubar');\n            let classArray = [];\n\n            if(menubarDiv.length) {\n                menubarDiv.forEach(function(element, index) {\n                    index+=1;\n                    let className = 'cursive-menu-'+index;\n                    element.classList.add(className);\n                    classArray.push(className);\n                });\n            }\n\n            const cursiveIcon = document.createElement('img');\n            cursiveIcon.src = hasApiKey ? iconUrl: iconGrayUrl;\n\n            cursiveIcon.setAttribute('class', 'tiny_cursive_StateButton');\n            cursiveIcon.style.display = 'inline-block';\n\n            cursiveState(cursiveIcon, menubarDiv, classArray);\n\n            for(let index in classArray) {\n                const elementId = \"tiny_cursive_StateIcon\"+index;\n                const tooltipId = `tiny_cursive_tooltip${index}`;\n\n                tooltipText.then((text) => {\n                    setTooltip(text, document.querySelector(`#${elementId}`), tooltipId);\n                });\n\n                $(`#${elementId}`).on('mouseenter', function () {\n                    $(this).css('position', 'relative');\n                    $(`#${tooltipId}`).css(tooltipCss);\n                });\n\n                $(`#${elementId}`).on('mouseleave', function () {\n                    $(`#${tooltipId}`).css('display', 'none');\n                });\n            }\n        } catch (error) {\n            window.console.error('Error setting up custom tooltip:', error);\n        }\n    }\n\n    /**\n     * Retrieves tooltip text strings from language files\n     * @async\n     * @function getTooltipText\n     * @returns {Promise<Object>} Object containing buttonTitle and buttonDes strings\n     */\n    async function getTooltipText() {\n        const [\n            buttonTitle,\n            buttonDes,\n        ] = await Promise.all([\n            getString('cursive:state:active', 'tiny_cursive'),\n            getString('cursive:state:active:des', 'tiny_cursive'),\n        ]);\n        return {buttonTitle, buttonDes};\n    }\n\n    /**\n     * Updates the Cursive icon state and positions it in the menubar\n     * @param {HTMLElement} cursiveIcon - The Cursive icon element to modify\n     * @param {HTMLElement} menubarDiv - The menubar div element\n     * @param {Array} classArray - Array of class names for the menubar div elements\n     */\n    function cursiveState(cursiveIcon, menubarDiv, classArray) {\n        if (menubarDiv) {\n            for (let index in classArray) {\n                const rightWrapper = document.createElement('div');\n                const imgWrapper   = document.createElement('span');\n                const iconClone = cursiveIcon.cloneNode(true);\n                const targetMenu = document.querySelector('.' + classArray[index]);\n                let elementId = \"tiny_cursive_StateIcon\"+index;\n\n                rightWrapper.style.marginLeft = 'auto';\n                rightWrapper.style.display = 'flex';\n                rightWrapper.style.alignItems = 'center';\n                imgWrapper.id = elementId;\n\n                imgWrapper.appendChild(iconClone);\n                rightWrapper.appendChild(imgWrapper);\n\n                if (targetMenu && !targetMenu.querySelector(`#${elementId}`)) {\n                    targetMenu.appendChild(rightWrapper);\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets up tooltip content and styling for the Cursive icon\n     * @param {Object} text - Object containing tooltip text strings\n     * @param {string} text.buttonTitle - Title text for the tooltip\n     * @param {string} text.buttonDes - Description text for the tooltip\n     * @param {HTMLElement} cursiveIcon - The Cursive icon element to attach tooltip to\n     * @param {string} tooltipId - ID for the tooltip element\n     */\n    function setTooltip(text, cursiveIcon, tooltipId) {\n        if(document.querySelector(`#${tooltipId}`)) {\n            return;\n        }\n\n        const tooltipSpan = document.createElement('span');\n        const description = document.createElement('span');\n        const linebreak = document.createElement('br');\n        const tooltipTitle = document.createElement('strong');\n\n        tooltipSpan.style.display = 'none';\n        // cursiveIcon.style.width = \"auto\";\n\n        tooltipTitle.textContent = text.buttonTitle;\n        tooltipTitle.style.fontSize = '16px';\n        tooltipTitle.style.fontWeight = 'bold';\n        description.textContent = text.buttonDes;\n        description.style.fontSize = '14px';\n\n        tooltipSpan.id = tooltipId;\n        tooltipSpan.classList.add(`shadow`);\n        tooltipSpan.appendChild(tooltipTitle);\n        tooltipSpan.appendChild(linebreak);\n        tooltipSpan.appendChild(description);\n        cursiveIcon.appendChild(tooltipSpan);\n    }\n\n    /**\n     * Extracts module information from URL parameters\n     * @param {string} ur - The base URL to analyze\n     * @param {URL} parm - URL object containing search parameters\n     * @param {Array} MODULES - Array of valid module names to check against\n     * @returns {Object|boolean} Object containing resourceId and module name if found, false if no valid module\n     */\n    function getModulesInfo(ur, parm, MODULES) {\n\n        if (!MODULES.some(module => ur.includes(module))) {\n            return false;\n        }\n\n        if (ur.includes(\"forum\") && !ur.includes(\"assign\")) {\n            resourceId = parm.searchParams.get('edit');\n        } else {\n            resourceId = parm.searchParams.get('attempt');\n        }\n\n        if (resourceId === null) {\n            resourceId = 0;\n        }\n\n        for (const module of MODULES) {\n            if (ur.includes(module)) {\n                modulename = module;\n                if (module === \"lesson\" || module === \"assign\") {\n                    resourceId = cmid;\n                } else if (module === \"oublog\") {\n                    resourceId = 0;\n                }\n                break;\n            }\n        }\n\n        return {resourceId: resourceId, name: modulename};\n    }\n\n    window.addEventListener('unload', () => {\n        syncData();\n    });\n\n    setInterval(syncData, syncInterval);\n};\n"],"names":["editor","interval","userId","hasApiKey","MODULES","isStudent","hasClass","intervention","host","M","cfg","wwwroot","userid","courseid","courseId","editorid","id","cmid","contextInstanceId","ed","event","filename","modulename","questionid","resourceId","quizSubmit","assignSubmit","syncInterval","lastCaretPos","postOne","async","methodname","args","error","window","console","on","e","preventDefault","syncData","then","off","click","localStorage","removeItem","getModal","Promise","all","title","titledes","placeholder","type","body","removeOnClose","done","modal","getRoot","addClass","show","lastEvent","save","number","document","getElementById","value","trim","ur","srcElement","baseURI","modulesInfo","getModulesInfo","URL","name","execCommand","str","alert","resourceid","usercomment","timemodified","Date","now","destroy","cancel","hidden","catch","sendKeyEvent","events","split","getItem","data","JSON","parse","push","key","keyCode","unixTimestamp","clientId","personId","position","caretPosition","rePosition","setItem","stringify","constructMouseEvent","getCaretPosition","button","getMouseButton","skip","selection","rng","getRng","absolutePosition","node","startContainer","startOffset","getBody","previousSibling","textContent","length","parentNode","storageKey","storedPos","parseInt","sessionStorage","isNaN","warn","originalText","getContent","format","customTooltip","tooltipText","buttonTitle","buttonDes","getTooltipText","menubarDiv","querySelectorAll","classArray","forEach","element","index","className","classList","add","cursiveIcon","createElement","src","iconUrl","iconGrayUrl","setAttribute","style","display","rightWrapper","imgWrapper","iconClone","cloneNode","targetMenu","querySelector","elementId","marginLeft","alignItems","appendChild","cursiveState","tooltipId","text","setTooltip","this","css","tooltipCss","tooltipSpan","description","linebreak","tooltipTitle","fontSize","fontWeight","parm","some","module","includes","searchParams","get","pastedContent","clipboardData","originalEvent","getData","selectedContent","addEventListener","setInterval"],"mappings":"0XA6BwB,CAACA,OAAQC,SAAUC,OAAQC,UAAWC,eAEtDC,YAAc,mBAAE,SAASC,SAAS,iBAClCC,cAAe,mBAAE,SAASD,SAAS,gBACnCE,KAAOC,EAAEC,IAAIC,QACbC,OAASV,OACTW,SAAWJ,EAAEC,IAAII,SACjBC,SAAWf,MAAAA,cAAAA,OAAQgB,GACnBC,KAAOR,EAAEC,IAAIQ,kBACbC,GAAK,GACLC,MAAQ,GACRC,SAAW,GACXC,WAAa,GACbC,WAAa,EACbC,WAAa,EACbC,YAAa,mBAAE,0BACfC,cAAe,mBAAE,wBACjBC,aAAe1B,SAAsB,IAAXA,SAAkB,IAC5C2B,aAAe,QAEbC,QAAUC,MAAOC,WAAYC,yBAEJ,cAAK,CAAC,CACzBD,WAAAA,WACAC,KAAAA,QACA,GAEN,MAAOC,aACLC,OAAOC,QAAQF,MAAM,oBAAqBA,OACpCA,QAIdP,aAAaU,GAAG,SAASN,eAAgBO,GACrCA,EAAEC,iBACEjB,SAEAkB,WAAWC,MAAK,KACZd,aAAae,IAAI,SAASC,WAG9BhB,aAAae,IAAI,SAASC,QAE9BC,aAAaC,WAAW,yBAG5BnB,WAAWW,GAAG,SAASN,eAAgBO,GACnCA,EAAEC,iBACEjB,SAEAkB,WAAWC,MAAK,KACZf,WAAWgB,IAAI,SAASC,WAG5BjB,WAAWgB,IAAI,SAASC,QAE5BC,aAAaC,WAAW,+BAGtBC,SAAYR,IAEdS,QAAQC,IAAI,EACR,mBAAU,sBAAuB,iBACjC,mBAAU,0BAA2B,iBACrC,mBAAU,2BAA4B,kBACvCP,MAAK,mBAAWQ,MAAOC,SAAUC,yBAEzB,yBAAO,CACVC,KAAM,cACNH,MAAQ,6CAA4CA,8EACJC,wBAChDG,KAAO,gFAA+EF,2BACtFG,eAAe,IAEdC,MAAKC,QACFA,MAAMC,UAAUC,SAAS,sBACzBF,MAAMG,WACFC,UAAY,UAEhBJ,MAAMC,UAAUpB,GAAGwB,oBAAM,eAEjBC,OAASC,SAASC,eAAe,YAAYC,MAAMC,WACnDC,GAAK7B,EAAE8B,WAAWC,QAElBC,YAAcC,eAAeJ,GADtB,IAAIK,IAAIL,IACwB9D,SAE3CoB,WAAa6C,YAAY7C,WACzBF,WAAa+C,YAAYG,KAEV,KAAXX,QAAAA,MAAiBA,QACjB7D,OAAOyE,YAAY,4BAET,eAAgB,gBAAgBjC,MAAKkC,KAAOC,MAAMD,QAE5D1E,OAAOyE,YAAY,SAGvB5C,QAAQ,wBAAyB,CAC7BP,WAAYA,WACZL,KAAMA,KACN2D,WAAYpD,WACZX,SAAUA,SACVgE,YAAahB,OACbiB,aAAcC,KAAKC,MACnBjE,SAAUA,UAAsB,KAGpC4C,UAAY,OACZJ,MAAM0B,aAEV1B,MAAMC,UAAUpB,GAAG8C,sBAAQ,WACvBlF,OAAOyE,YAAY,QACnBd,UAAY,YAGhBJ,MAAMC,UAAUpB,GAAG+C,sBAAQ,WACN,UAAbxB,WAAsC,QAAbA,WACzB3D,OAAOyE,YAAY,WAGpBlB,YAEhB6B,OAAMnD,OAASC,OAAOC,QAAQF,MAAMA,UAIrCoD,aAAe,CAACC,OAAQtF,UAC1BmB,GAAKnB,OACLoB,MAAQkE,WACJpB,GAAKlE,OAAOmE,WAAWC,QAEvBC,YAAcC,eAAeJ,GADtB,IAAIK,IAAIL,IACwB9D,YAE3CoB,WAAa6C,YAAY7C,WACzBF,WAAa+C,YAAYG,KAEzBnD,SAAY,GAAET,UAAUY,cAAcP,QAAQK,qBAE3B,SAAfA,aACAC,WAAaR,SAASwE,MAAM,KAAK,GAAGA,MAAM,KAAK,GAC/ClE,SAAY,GAAET,UAAUY,cAAcP,QAAQM,cAAcD,sBAG5DqB,aAAa6C,QAAQnE,UAAW,KAC5BoE,KAAOC,KAAKC,MAAMhD,aAAa6C,QAAQnE,WAC3CoE,KAAKG,KAAK,CACNpE,WAAYA,WACZqE,IAAK7F,OAAO6F,IACZC,QAAS9F,OAAO8F,QAChB1E,MAAOA,MACPN,SAAUD,SACVkF,cAAehB,KAAKC,MACpBgB,SAAUxF,KACVyF,SAAUrF,OACVsF,SAAU/E,GAAGgF,cACbC,WAAYjF,GAAGiF,aAEnBzD,aAAa0D,QAAQhF,SAAUqE,KAAKY,UAAUb,WAC3C,KACCA,KAAO,CAAC,CACRjE,WAAYA,WACZqE,IAAK7F,OAAO6F,IACZC,QAAS9F,OAAO8F,QAChB1E,MAAOA,MACPN,SAAUD,SACVkF,cAAehB,KAAKC,MACpBgB,SAAUxF,KACVyF,SAAUrF,OACVsF,SAAU/E,GAAGgF,cACbC,WAAYjF,GAAGiF,aAEnBzD,aAAa0D,QAAQhF,SAAUqE,KAAKY,UAAUb,kBAoE7Cc,oBAAoBvG,YACrBkG,SAAWM,mBACfxG,OAAOmG,cAAgBD,SAASC,cAChCnG,OAAOoG,WAAaF,SAASE,WAC7BpG,OAAO6F,aASa7F,eAEZA,OAAOyG,aACN,QACM,YACN,QACM,cACN,QACM,SAjBFC,CAAe1G,QAC5BA,OAAO8F,QAAU9F,OAAOyG,gBA4BnBD,uBAAiBG,qEAEb3G,SAAWA,OAAO4G,gBACZ,CAAET,cAAe,EAAGC,WAAY,SAErCS,IAAM7G,OAAO4G,UAAUE,aAEzBC,iBAAmB,EACnBC,KAAOH,IAAII,mBAEfF,iBAAmBF,IAAIK,YAGhBF,MAAQA,OAAShH,OAAOmH,WAAW,MAC/BH,KAAKI,iBACRJ,KAAOA,KAAKI,gBACRJ,KAAKK,cACLN,kBAAoBC,KAAKK,YAAYC,QAG7CN,KAAOA,KAAKO,cAGZZ,WACO,CACHR,cAAevE,aACfwE,WAAYW,wBAIdS,WAAc,GAAE5G,UAAUY,cAAcP,oBAC1CwG,UAAYC,SAASC,eAAenC,QAAQgC,YAAa,WACzDI,MAAMH,aACNA,UAAY,GAEhBA,YACA7F,aAAe6F,UACfE,eAAetB,QAAQmB,WAAYC,WAE5B,CACHtB,cAAesB,UACfrB,WAAYW,kBAElB,MAAO1E,UACLH,OAAOC,QAAQ0F,KAAK,gCAAiCxF,GAC9C,CAAE8D,cAAe,EAAGC,WAAY,mBAahC7D,eAEPkD,KAAO9C,aAAa6C,QAAQnE,aAE3BoE,MAAwB,IAAhBA,KAAK6B,OAEX,CACH3E,aAAaC,WAAWvB,cACpByG,aAAe9H,OAAO+H,WAAW,CAAEC,OAAQ,0BAG9BnG,QAAQ,8BAA+B,CAChDgE,IAAK1E,GAAG0E,IACRzE,MAAOA,MACP0E,QAAS3E,GAAG2E,QACZtE,WAAYA,WACZP,KAAMA,KACNK,WAAYA,WACZP,SAAUA,mBACG0E,KACbqC,aAAcA,eAEpB,MAAO7F,OACLC,OAAOC,QAAQF,MAAM,yBAA0BA,kBAUlDgG,0BAEKC,mCAmDNC,YACAC,iBACMtF,QAAQC,IAAI,EAClB,mBAAU,uBAAwB,iBAClC,mBAAU,2BAA4B,wBAEnC,CAACoF,YAAAA,YAAaC,UAAAA,WAzDGC,GACdC,WAAaxE,SAASyE,iBAAiB,uCACzCC,WAAa,GAEdF,WAAWhB,QACVgB,WAAWG,SAAQ,SAASC,QAASC,WAE7BC,UAAY,iBADhBD,OAAO,GAEPD,QAAQG,UAAUC,IAAIF,WACtBJ,WAAW5C,KAAKgD,oBAIlBG,YAAcjF,SAASkF,cAAc,OAC3CD,YAAYE,IAAM9I,UAAY+I,gBAASC,oBAEvCJ,YAAYK,aAAa,QAAS,4BAClCL,YAAYM,MAAMC,QAAU,wBAiDdP,YAAaT,WAAYE,eACvCF,eACK,IAAIK,SAASH,WAAY,OACpBe,aAAezF,SAASkF,cAAc,OACtCQ,WAAe1F,SAASkF,cAAc,QACtCS,UAAYV,YAAYW,WAAU,GAClCC,WAAa7F,SAAS8F,cAAc,IAAMpB,WAAWG,YACvDkB,UAAY,yBAAyBlB,MAEzCY,aAAaF,MAAMS,WAAa,OAChCP,aAAaF,MAAMC,QAAU,OAC7BC,aAAaF,MAAMU,WAAa,SAChCP,WAAWxI,GAAK6I,UAEhBL,WAAWQ,YAAYP,WACvBF,aAAaS,YAAYR,YAErBG,aAAeA,WAAWC,cAAe,IAAGC,cAC5CF,WAAWK,YAAYT,eAjE/BU,CAAalB,YAAaT,WAAYE,gBAElC,IAAIG,SAASH,WAAY,OACnBqB,UAAY,yBAAyBlB,MACrCuB,UAAa,uBAAsBvB,QAEzCT,YAAY1F,MAAM2H,OACdC,WAAWD,KAAMrG,SAAS8F,cAAe,IAAGC,aAAcK,kCAG3D,IAAGL,aAAazH,GAAG,cAAc,+BAC9BiI,MAAMC,IAAI,WAAY,gCACrB,IAAGJ,aAAaI,IAAIC,2CAGxB,IAAGV,aAAazH,GAAG,cAAc,+BAC7B,IAAG8H,aAAaI,IAAI,UAAW,YAG5C,MAAOrI,OACLC,OAAOC,QAAQF,MAAM,mCAAoCA,iBA2DxDmI,WAAWD,KAAMpB,YAAamB,cAChCpG,SAAS8F,cAAe,IAAGM,0BAIxBM,YAAc1G,SAASkF,cAAc,QACrCyB,YAAc3G,SAASkF,cAAc,QACrC0B,UAAY5G,SAASkF,cAAc,MACnC2B,aAAe7G,SAASkF,cAAc,UAE5CwB,YAAYnB,MAAMC,QAAU,OAG5BqB,aAAatD,YAAc8C,KAAKhC,YAChCwC,aAAatB,MAAMuB,SAAW,OAC9BD,aAAatB,MAAMwB,WAAa,OAChCJ,YAAYpD,YAAc8C,KAAK/B,UAC/BqC,YAAYpB,MAAMuB,SAAW,OAE7BJ,YAAYxJ,GAAKkJ,UACjBM,YAAY3B,UAAUC,IAAK,UAC3B0B,YAAYR,YAAYW,cACxBH,YAAYR,YAAYU,WACxBF,YAAYR,YAAYS,aACxB1B,YAAYiB,YAAYQ,sBAUnBlG,eAAeJ,GAAI4G,KAAM1K,aAEzBA,QAAQ2K,MAAKC,QAAU9G,GAAG+G,SAASD,iBAC7B,EASQ,QALfxJ,WADA0C,GAAG+G,SAAS,WAAa/G,GAAG+G,SAAS,UACxBH,KAAKI,aAAaC,IAAI,QAEtBL,KAAKI,aAAaC,IAAI,cAInC3J,WAAa,OAGZ,MAAMwJ,UAAU5K,WACb8D,GAAG+G,SAASD,QAAS,CACrB1J,WAAa0J,OACE,WAAXA,QAAkC,WAAXA,OACvBxJ,WAAaP,KACK,WAAX+J,SACPxJ,WAAa,eAMlB,CAACA,WAAYA,WAAYgD,KAAMlD,YA9V1CtB,OAAOoC,GAAG,SAAUpC,SAChBiI,oBACI/B,SAAWM,kBAAiB,GAChCxG,OAAOmG,cAAgBD,SAASC,cAChCnG,OAAOoG,WAAaF,SAASE,WAC7Bf,aAAa,QAASrF,WAE1BA,OAAOoC,GAAG,SAASN,MAAAA,IACfmG,sBACMmD,eAAiB/I,EAAEgJ,eAAiBhJ,EAAEiJ,cAAcD,eAAeE,QAAQ,QAAQtH,OAEpFmH,eAID/K,WAAaE,cACT6K,gBAAkBzI,aAAa6C,QAAQ,uBACvC3C,SAASR,MAIrBrC,OAAOoC,GAAG,QAAQN,MAAAA,IACdmG,gBACI5H,WAAaE,cACbsC,SAASR,MAGjBrC,OAAOoC,GAAG,WAAYpC,SAClBiI,oBACI/B,SAAWM,mBACfxG,OAAOmG,cAAgBD,SAASC,cAChCnG,OAAOoG,WAAaF,SAASE,WAC7Bf,aAAa,UAAWrF,WAE3BA,OAAOoC,GAAG,OAAO,WACRoJ,gBAAkBxL,OAAO4G,UAAUmB,WAAW,CAACC,OAAQ,SAC7DrF,aAAa0D,QAAQ,qBAAsBmF,gBAAgBvH,WAE/DjE,OAAOoC,GAAG,QAAQ,WACRoJ,gBAAkBxL,OAAO4G,UAAUmB,WAAW,CAACC,OAAQ,SAC7DrF,aAAa0D,QAAQ,qBAAsBmF,gBAAgBvH,WAE/DjE,OAAOoC,GAAG,aAAaN,MAAAA,SACnByE,oBAAoBvG,QACpBqF,aAAa,YAAarF,WAE9BA,OAAOoC,GAAG,WAAWN,MAAAA,SACjByE,oBAAoBvG,QACpBqF,aAAa,UAAWrF,WAG5BA,OAAOoC,GAAG,QAAQ,KACd6F,mBAEJjI,OAAOoC,GAAG,cAAc,KACpB6F,mBA0SJ/F,OAAOuJ,iBAAiB,UAAU,KAC9BlJ,cAGJmJ,YAAYnJ,SAAUZ"}