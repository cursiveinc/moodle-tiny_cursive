{"version":3,"file":"autosaver.min.js","sources":["../src/autosaver.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     tiny_cursive/autosaver\n * @category   TinyMCE Editor\n * @copyright  CTI <info@cursivetechnology.com>\n * @author     Brain Station 23 <sales@brainstation-23.com>\n */\n\nimport { call } from 'core/ajax';\nimport { create } from 'core/modal_factory';\nimport { get_string as getString } from 'core/str';\nimport { save, cancel, hidden } from 'core/modal_events';\n\nexport const register = (editor, interval, userId) => {\n\n    var is_student, intervention;\n\n    var bodyElement = document.querySelector('#body');\n    if (bodyElement) {\n        is_student = !bodyElement.classList.contains('teacher_admin'); // true or false\n        intervention = bodyElement.classList.contains('intervention'); // true or false\n    } else {\n        window.console.error('#body element not found');\n    }\n\n\n    var userid = userId;\n    var host = M.cfg.wwwroot;\n    var courseid = M.cfg.courseId;\n    var filename = \"\";\n    var ed = \"\";\n    var event = \"\";\n    var resourceId = 0;\n    var modulename = \"\";\n    var editorid = editor?.id;\n    var cmid = M.cfg.contextInstanceId;\n    var questionid = 0;\n    var syncInterval = interval ? interval * 1000 : 10000; // Default: Sync Every 10s.\n    const assignSubmit = document.getElementById('id_submitbutton');\n    const quizSubmit = document.getElementById('mod_quiz-next-nav');\n\n    const postOne = async (methodname, args) => {\n        try {\n            const response = await call([{\n                methodname,\n                args,\n            }])[0];\n            return response;\n        } catch (error) {\n            window.console.error('Error in postOne:', error);\n            throw error;\n        }\n    };\n\n    assignSubmit.addEventListener('click', async function (e) {\n        e.preventDefault();\n        if (filename) {\n            // eslint-disable-next-line\n            syncData().then(() => {\n                assignSubmit.off('click').click();\n            });\n        } else {\n            assignSubmit.off('click').click();\n        }\n    });\n\n    quizSubmit.addEventListener('click', async function (e) {\n        e.preventDefault();\n        if (filename) {\n            // eslint-disable-next-line\n            syncData().then(() => {\n                quizSubmit.off('click').click();\n            });\n        } else {\n            quizSubmit.off('click').click();\n        }\n    });\n\n    const getModal = (e) => {\n\n        Promise.all([\n            getString('tiny_cursive_srcurl', 'tiny_cursive'),\n            getString('tiny_cursive_srcurl_des', 'tiny_cursive'),\n            getString('tiny_cursive_placeholder', 'tiny_cursive')\n        ]).then(function ([title, titledes, placeholder]) {\n\n            return create({\n                type: 'SAVE_CANCEL',\n                title: `<div><div style='color:dark;font-weight:500;line-height:0.5'>${title}\n                </div><span style='color: gray;font-weight: 400;line-height: 1.2;font-size: 14px;display: inline-block;margin-top: .5rem;'>${titledes}</span></div>`,\n                body: `<textarea  class=\"form-control inputUrl\" value=\"\" id=\"inputUrl\" placeholder=\"${placeholder}\"></textarea>`,\n\n                removeOnClose: true,\n            })\n                .done(modal => {\n                    modal.getRoot().append('<style>.close{ display: none ! important; }</style>');\n                    modal.show();\n                    var lastEvent = '';\n                    // eslint-disable-next-line\n                    modal.getRoot().on(save, function () {\n                        var number = document.getElementById(\"inputUrl\").value;\n                        if (number === \"\" || number === null || number === undefined) {\n                            editor.execCommand('Undo');\n                            // eslint-disable-next-line\n                            alert(\"You cannot paste text without providing source\");\n                        } else {\n                            editor.execCommand('Paste');\n                        }\n                        let ur = e.srcElement.baseURI;\n                        let resourceId = 0;\n                        let parm = new URL(ur);\n                        let modulename = \"\";\n                        let editorid = editor?.id;\n                        let courseid = M.cfg.courseId;\n                        let cmid = M.cfg.contextInstanceId;\n\n                        // eslint-disable-next-line\n                        if (ur.includes(\"attempt.php\") || ur.includes(\"forum\") || ur.includes(\"assign\")) { } else {\n                            return false;\n                        }\n                        if (ur.includes(\"forum\") && !ur.includes(\"assign\")) {\n                            resourceId = parm.searchParams.get('edit');\n                        }\n                        if (!ur.includes(\"forum\") && !ur.includes(\"assign\")) {\n                            resourceId = parm.searchParams.get('attempt');\n                        }\n\n                        if (resourceId === null) {\n                            resourceId = 0;\n                        }\n                        if (ur.includes(\"forum\")) {\n                            modulename = \"forum\";\n                        }\n                        if (ur.includes(\"assign\")) {\n                            modulename = \"assign\";\n                            resourceId = cmid;\n                        }\n                        if (ur.includes(\"attempt\")) {\n                            modulename = \"quiz\";\n                        }\n                        if (cmid === null) {\n                            cmid = 0;\n                        }\n\n                        postOne('cursive_user_comments', {\n                            modulename: modulename,\n                            cmid: cmid,\n                            resourceid: resourceId,\n                            courseid: courseid,\n                            usercomment: number,\n                            timemodified: Date.now(),\n                            editorid: editorid ? editorid : \"\"\n                        });\n                        lastEvent = 'save';\n                        modal.destroy();\n                    });\n                    modal.getRoot().on(cancel, function () {\n\n                        editor.execCommand('Undo');\n                        lastEvent = 'cancel';\n                    });\n                    modal.getRoot().on(hidden, function () {\n                        if (lastEvent != 'cancel' && lastEvent != 'save') {\n                            editor.execCommand('Undo');\n                        }\n                    });\n                    return modal;\n                });\n        });\n\n    };\n\n    const sendKeyEvent = (events, eds) => {\n        let ur = ed.srcElement.baseURI;\n        let parm = new URL(ur);\n        ed = eds;\n        event = events;\n\n        if (ur.includes(\"attempt.php\") || ur.includes(\"forum\") || ur.includes(\"assign\")) { } else {\n            return false;\n        }\n        if (ur.includes(\"forum\") && !ur.includes(\"assign\")) {\n            resourceId = parm.searchParams.get('edit');\n        } else {\n\n            resourceId = parm.searchParams.get('attempt');\n            resourceId = parm.searchParams.get('attempt');\n        }\n        if (resourceId === null) {\n\n            resourceId = 0;\n        }\n\n        if (ur.includes(\"forum\")) {\n            modulename = \"forum\";\n        }\n        if (ur.includes(\"assign\")) {\n            modulename = \"assign\";\n            resourceId = cmid;\n        }\n        if (ur.includes(\"attempt\")) {\n            modulename = \"quiz\";\n        }\n\n        filename = `${userid}_${resourceId}_${cmid}_${modulename}_attempt`;\n\n        if (modulename === 'quiz') {\n            questionid = editorid.split(':')[1].split('_')[0];\n            filename = `${userid}_${resourceId}_${cmid}_${questionid}_${modulename}_attempt`;\n        }\n        if (ed.key !== \"Process\") {\n            if (localStorage.getItem(filename)) {\n\n                let data = JSON.parse(localStorage.getItem(filename));\n                data.push({\n                    resourceId: resourceId,\n                    key: ed.key,\n                    keyCode: ed.keyCode,\n                    event: event,\n                    courseId: courseid,\n                    unixTimestamp: Date.now(),\n                    clientId: host,\n                    personId: userid\n                });\n                localStorage.setItem(filename, JSON.stringify(data));\n            } else {\n                let data = [];\n                data.push({\n                    resourceId: resourceId,\n                    key: ed.key,\n                    keyCode: ed.keyCode,\n                    event: event,\n                    courseId: courseid,\n                    unixTimestamp: Date.now(),\n                    clientId: host,\n                    personId: userid\n                });\n                localStorage.setItem(filename, JSON.stringify(data));\n            }\n        }\n    };\n\n    editor.on('keyUp', (editor) => {\n        sendKeyEvent(\"keyUp\", editor);\n    });\n\n    editor.on('Paste', async (e) => {\n        if (is_student && intervention) {\n            getModal(e);\n        }\n    });\n\n    editor.on('Redo', async (e) => {\n        if (is_student && intervention) {\n            getModal(e);\n        }\n    });\n\n    editor.on('keyDown', (editor) => {\n        sendKeyEvent(\"keyDown\", editor);\n    });\n    // eslint-disable-next-line\n    editor.on('init', () => {\n\n    });\n\n    async function SyncData() {\n\n        let data = localStorage.getItem(filename);\n\n        if (!data || data.length === 0) {\n            return;\n        } else {\n            localStorage.removeItem(filename);\n            let originalText = editor.getContent({ format: 'text' });\n            try {\n                return await postOne('cursive_write_local_to_json', {\n                    key: ed.key,\n                    event: event,\n                    keyCode: ed.keyCode,\n                    resourceId: resourceId,\n                    cmid: cmid,\n                    modulename: modulename,\n                    editorid: editorid,\n                    json_data: data,\n                    originalText: originalText\n                });\n            } catch (error) {\n                window.console.error('Error submitting data:', error);\n            }\n        }\n    }\n\n    window.addEventListener('unload', () => {\n        SyncData();\n    });\n\n    setInterval(SyncData, syncInterval);\n};\n"],"names":["editor","interval","userId","is_student","intervention","bodyElement","document","querySelector","classList","contains","window","console","error","userid","host","M","cfg","wwwroot","courseid","courseId","filename","ed","event","resourceId","modulename","editorid","id","cmid","contextInstanceId","questionid","syncInterval","assignSubmit","getElementById","quizSubmit","postOne","async","methodname","args","addEventListener","e","preventDefault","syncData","then","off","click","getModal","Promise","all","title","titledes","placeholder","type","body","removeOnClose","done","modal","getRoot","append","show","lastEvent","on","save","number","value","execCommand","alert","ur","srcElement","baseURI","parm","URL","includes","searchParams","get","resourceid","usercomment","timemodified","Date","now","destroy","cancel","hidden","sendKeyEvent","events","eds","split","key","localStorage","getItem","data","JSON","parse","push","keyCode","unixTimestamp","clientId","personId","setItem","stringify","SyncData","length","removeItem","originalText","getContent","format","json_data","setInterval"],"mappings":"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"}